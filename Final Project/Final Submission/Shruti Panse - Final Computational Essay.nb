(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    900187,      16385]
NotebookOptionsPosition[    890987,      16231]
NotebookOutlinePosition[    891800,      16258]
CellTagsIndexPosition[    891757,      16255]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["\<\
 Detecting Malaria-Infected Blood Cells Using Machine Learning\
\>", "Title",
 CellChangeTimes->{{3.770055572438499*^9, 3.7700555729498453`*^9}, {
   3.770055604008165*^9, 3.7700556066618843`*^9}, 
   3.7719286124911366`*^9},ExpressionUUID->"49ab34ee-bfd5-49f5-beef-\
400d3cc456dd"],

Cell["Shruti Panse", "Text",
 CellChangeTimes->{{3.549624168509506*^9, 3.549624171985794*^9}, {
  3.549624508772977*^9, 3.549624510775043*^9}, {3.5498187159613867`*^9, 
  3.5498187170087957`*^9}, {3.549819049020514*^9, 3.5498190533440437`*^9}, {
  3.77005561844785*^9, 3.7700556489651537`*^9}, {3.7719286407615666`*^9, 
  3.7719286422665386`*^9}},ExpressionUUID->"94536f76-3fd2-4bf6-b228-\
fa93ec9acae9"],

Cell["Mentor: Emma Yang", "Text",
 CellChangeTimes->{{3.549624515773694*^9, 3.5496245246892014`*^9}, {
  3.5498187208956137`*^9, 3.5498187221413403`*^9}, {3.5498190558319674`*^9, 
  3.54981906151682*^9}, {3.770055624686027*^9, 3.770055659820487*^9}, {
  3.7719287006833916`*^9, 3.7719287046977005`*^9}, {3.7719291133685827`*^9, 
  3.7719291211068974`*^9}, {3.771931185845888*^9, 3.771931187205248*^9}, {
  3.771932339229414*^9, 
  3.7719323412210903`*^9}},ExpressionUUID->"b70c649b-a958-4202-9f22-\
238ea1f9c7d4"],

Cell[CellGroupData[{

Cell["Overview", "Section",
 CellChangeTimes->{{3.7719309110494113`*^9, 
  3.7719309132126284`*^9}},ExpressionUUID->"924cb575-5c57-4d9b-90ef-\
880ee3d0f827"],

Cell["\<\
The goal of this project is to use artificial intelligence to detect Malaria. \
A program will be created to learn the differences between Malaria-infected \
and Malaria uninfected red blood cells in order to classify them by type. The \
program will use a neural network to classify images of cells into two \
classes. A data set with images of infected and uninfected red blood cells, \
sourced from Kaggle, will be used to train the program. Once an image is \
inputted, the program will run and output a diagnosis of \
\[OpenCurlyDoubleQuote]infected\[CloseCurlyDoubleQuote] or \
\[OpenCurlyDoubleQuote]uninfected\[CloseCurlyDoubleQuote] based on the \
results.  \
\>", "Text",
 CellChangeTimes->{{3.771930964354924*^9, 
  3.7719309656913896`*^9}},ExpressionUUID->"51ad8c17-7a10-408d-8ff7-\
ecade2ef6a39"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Introduction", "Section",
 CellChangeTimes->{{3.771930361724758*^9, 
  3.771930373505269*^9}},ExpressionUUID->"f15e6535-3a5d-4e2e-8daa-\
d7a5c325866f"],

Cell["\<\
\tMalaria is a life-threatening disease caused by parasites that are \
transmitted to people through the bite of infected female Anopheles \
mosquitoes. Once inside the body, the Malaria parasite multiplies in the \
liver cells and gets released back into the bloodstream to destroy blood \
cells. In 2017, there were an estimated 219 million cases of Malaria in 87 \
countries. The symptoms of malaria include cycles of chills, fever, sweats, \
muscle aches and headache that recur every few days. There can also be \
vomiting, diarrhea, coughing, and jaundice in the skin and eyes. Even more \
extreme symptoms include, bleeding problems, shock, kidney and liver failure, \
central nervous system problems, comas, and death. A diagnosis is When \
detected early and accurately, such symptoms can be prevented, thus using \
machine learning to quickly, efficiently, and reliably diagnose malaria is \
important to help people stop the negative effects of malaria before it\
\[CloseCurlyQuote]s too late.\
\>", "Text",
 CellChangeTimes->{{3.7719303856418295`*^9, 3.7719303954416423`*^9}, 
   3.771930426822759*^9},ExpressionUUID->"c47900e3-0d93-418b-a8ca-\
76fed2024df7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Creating Training Data", "Section"]], "Section",
 CellChangeTimes->{{3.771242001269328*^9, 3.771242003647787*^9}, {
   3.7712457271512165`*^9, 3.7712457305424566`*^9}, 
   3.771929058404662*^9},ExpressionUUID->"6232da72-67e6-4c4a-917b-\
1fd2676affb8"],

Cell[TextData[StyleBox["Goal: To import datasets, create variables, and link \
images to their corresponding values.", "Subsubsection"]], "Text",
 CellChangeTimes->{{3.771932298304843*^9, 3.771932305739977*^9}, {
  3.771932345818802*^9, 3.771932361838977*^9}, {3.7719325065459833`*^9, 
  3.771932548974571*^9}, {3.77193285025109*^9, 
  3.7719328854832735`*^9}},ExpressionUUID->"3f81ea6b-d5d2-4f10-bc94-\
bcdc9bf0aa5e"],

Cell["\<\
\tI started my project by downloading Red Blood Cell Datasets from Kaggle. \
The images included Malaria infected and uninfected cell strains.\
\>", "Text",
 CellChangeTimes->{{3.7719292288179936`*^9, 3.771929316205905*^9}, {
   3.771929360562339*^9, 3.7719293728445387`*^9}, {3.7719296074624085`*^9, 
   3.77192961353613*^9}, 3.771930455639725*^9, {3.771930596916099*^9, 
   3.7719306128893957`*^9}, {3.7719310118639326`*^9, 
   3.771931038361105*^9}},ExpressionUUID->"14b1ad91-f8e1-4fc8-9375-\
80aed2baf403"],

Cell[TextData[{
 "Cell images downloaded from: ",
 ButtonBox["https://www.kaggle.com/iarunava/cell-images-for-detecting-malaria \
#cell _images.zip",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://www.kaggle.com/iarunava/cell-images-for-detecting-malaria#\
cell_images.zip"], None},
  ButtonNote->
   "https://www.kaggle.com/iarunava/cell-images-for-detecting-malaria#cell_\
images.zip"]
}], "Text",
 CellChangeTimes->{{3.771242005589776*^9, 3.771242024315638*^9}, {
   3.771242058355798*^9, 3.771242058356341*^9}, 3.7712457412153916`*^9, {
   3.7714961222241273`*^9, 
   3.7714961277560368`*^9}},ExpressionUUID->"5edc8f2d-b00c-42e1-b426-\
0defa90910f1"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"infected", "=", 
   RowBox[{"FileNames", "[", 
    RowBox[{
    "\"\<*.png\>\"", ",", 
     "\"\<C:\\\\Users\\\\Shruti Panse\\\\Desktop\\\\Shruti Panse- Wolfram \
Summer Camp\\\\WSS-Template\\\\Final \
Project\\\\Drafts\\\\cell_images\\\\Parasitized\>\""}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"uninfected", "=", 
   RowBox[{"FileNames", "[", 
    RowBox[{
    "\"\<*.png\>\"", ",", 
     "\"\<C:\\\\Users\\\\Shruti Panse\\\\Desktop\\\\Shruti Panse- Wolfram \
Summer Camp\\\\WSS-Template\\\\Final \
Project\\\\Drafts\\\\cell_images\\\\Uninfected\>\""}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.771242066738948*^9, 3.7712420998323298`*^9}, {
   3.7712453255576515`*^9, 3.7712453373256054`*^9}, 3.771252022482972*^9, {
   3.7712542743211603`*^9, 3.771254340102236*^9}, {3.7712544154879637`*^9, 
   3.771254428085199*^9}, {3.7712544971608276`*^9, 3.771254507363658*^9}, {
   3.7715006054932156`*^9, 3.771500662581663*^9}, 3.771500764997967*^9, {
   3.7715008890978107`*^9, 3.771500921002911*^9}, 3.7715011701544924`*^9, {
   3.771502666711237*^9, 3.7715026805491247`*^9}, {3.7715126217184525`*^9, 
   3.7715127247650404`*^9}, {3.7715799193854585`*^9, 3.771579958000228*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"6faca5a9-b94f-4985-b261-e59532dbf58c"],

Cell[TextData[{
 StyleBox["Constructing File Objects for Images",
  FontWeight->"Bold"],
 "\n\tIn order to optimize the speed of imports, I created file objects for \
the 27,000+ images so that they would import on the fly rather than importing \
all at once."
}], "Text",
 CellChangeTimes->{{3.771251994652898*^9, 3.771252032234208*^9}, {
  3.7719310308193088`*^9, 3.771931041786957*^9}, {3.7719310765380664`*^9, 
  3.771931078665374*^9}, {3.7719311159647155`*^9, 3.7719311656359015`*^9}, {
  3.7719312388272667`*^9, 
  3.7719312559704375`*^9}},ExpressionUUID->"05604ee1-50d3-4b81-9191-\
6b6fcf313f24"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"infectedIMG", "=", 
   RowBox[{"File", "/@", "infected"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"uninfectedIMG", "=", 
   RowBox[{"File", "/@", "uninfected"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.771242117592767*^9, 3.771242136466539*^9}, {
  3.771251181709363*^9, 3.7712512379252567`*^9}, {3.7712513743588753`*^9, 
  3.7712514169467597`*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"9a838ade-0d84-4b7d-84be-249166c36d89"],

Cell[TextData[{
 StyleBox["Generating Values for Training/Testing Data.\n",
  FontWeight->"Bold"],
 "\tI created lists of true and false values equal to the amount of images \
for each class of uninfected and infected. This was done so later on I could \
match image to value. True represented infected and false equaled uninfected."
}], "Text",
 CellChangeTimes->{{3.771245395204212*^9, 3.7712454095756636`*^9}, {
  3.7719312730826936`*^9, 3.7719312889233527`*^9}, {3.77193132230067*^9, 
  3.771931362108265*^9}, {3.771931726230962*^9, 
  3.77193180314338*^9}},ExpressionUUID->"d6e698ea-8634-4140-9548-\
ffd75e34c429"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "infected", "]"}]], "Input",
 CellChangeTimes->{{3.7712444934436817`*^9, 3.7712445112002506`*^9}},
 CellLabel->"In[22]:=",ExpressionUUID->"56acb087-9161-4599-be74-2c9ce5fc7dcf"],

Cell[BoxData["13779"], "Output",
 CellChangeTimes->{3.771502333123698*^9, 3.7715026902544413`*^9, 
  3.7715804086555543`*^9},
 CellLabel->"Out[22]=",ExpressionUUID->"85bcd672-c326-4ec8-a65a-ae5693a936f7"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"infectedvalues", "=", 
   RowBox[{"Table", "[", 
    RowBox[{"True", ",", " ", 
     RowBox[{"Length", "[", "infected", "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7712445336339855`*^9, 3.771244587939514*^9}, {
   3.7712446530100207`*^9, 3.771244655791816*^9}, 3.77150271900741*^9},
 CellLabel->"In[23]:=",ExpressionUUID->"d82b1fc5-00e0-4524-8b87-55c1a56a29c1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", "uninfected", "]"}]], "Input",
 CellChangeTimes->{{3.7712444934436817`*^9, 3.7712445112002506`*^9}, {
  3.7712447044064493`*^9, 3.7712447084796953`*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"533182cc-5275-4040-b0dc-d8b4472f472d"],

Cell[BoxData["13779"], "Output",
 CellChangeTimes->{3.771244512434698*^9, 3.7712447278146505`*^9, 
  3.7712540699120417`*^9, 3.771254349270944*^9, 3.7712545173325586`*^9, 
  3.771494261498458*^9, 3.771495391489822*^9, 3.7715007122523346`*^9, 
  3.7715023360148735`*^9, 3.771502695281747*^9, 3.7715804088151283`*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"b5d0c4e2-41f3-4b86-8c79-a63ae34d1af4"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"uninfectedvalues", "=", 
   RowBox[{"Table", "[", 
    RowBox[{"False", ",", " ", 
     RowBox[{"Length", "[", "uninfected", "]"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7712445336339855`*^9, 3.771244587939514*^9}, {
  3.7712446530100207`*^9, 3.771244655791816*^9}, {3.771244710855175*^9, 
  3.771244720015862*^9}, {3.7715023791240406`*^9, 3.771502380108678*^9}},
 CellLabel->"In[25]:=",ExpressionUUID->"4f1e146a-db97-4421-8d3f-639087eeae5f"],

Cell["Combing Infected and Uninfected Values and Keys", "Text",
 CellChangeTimes->{{3.771252050484928*^9, 
  3.7712520978153505`*^9}},ExpressionUUID->"8cb3bdb3-b1fb-47a6-a17e-\
860dba5fdda0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"imagekeys", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"{", 
     RowBox[{"infectedIMG", ",", " ", "uninfectedIMG"}], "}"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.7712454555034757`*^9, 3.77124549224434*^9}, {
  3.771251832218448*^9, 3.7712518498148403`*^9}, {3.771251920999694*^9, 
  3.7712519258443155`*^9}, {3.77125224807732*^9, 3.77125225978303*^9}, {
  3.771580317769418*^9, 3.771580319247465*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"424ceb74-7fed-48f4-942e-6bd967ad688c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"values", "=", 
   RowBox[{"Flatten", "[", 
    RowBox[{"{", 
     RowBox[{"infectedvalues", ",", " ", "uninfectedvalues"}], "}"}], "]"}]}],
   ";"}]], "Input",
 CellChangeTimes->{{3.771245514949769*^9, 3.771245542611394*^9}, {
   3.771245582041409*^9, 3.771245586823534*^9}, {3.7712518449230604`*^9, 
   3.771251845204246*^9}, {3.7712519022140017`*^9, 3.771251904042124*^9}, 
   3.7715027278431797`*^9},
 CellLabel->"In[27]:=",ExpressionUUID->"682b4eae-b9bc-4a58-8025-ec80878aad3a"],

Cell["\<\
Creating Training/Testing Data by Combining Keys and Values
\tI separated the associated data into two groups, one for training and one \
fro validation. The training data will be the majority, 75%, because it is \
what the neural net will be learning. The validation data acts as a test at \
the end of each training round to track the neural network\[CloseCurlyQuote]s \
progress, thus it is a smaller part of the data, 25%.\
\>", "Text",
 CellChangeTimes->{{3.7712521055194497`*^9, 3.7712521371207795`*^9}, {
  3.7719318127726336`*^9, 3.771931826868962*^9}, {3.771932644096445*^9, 
  3.77193282043991*^9}},ExpressionUUID->"c1136194-4eb1-487c-95c8-\
a967c6df96de"],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", " ", 
   RowBox[{"RandomSample", "[", 
    RowBox[{"AssociationThread", "[", 
     RowBox[{"imagekeys", "\[Rule]", " ", "values"}], "]"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.771252164064808*^9, 3.771252187148511*^9}, {
  3.7712523091509185`*^9, 3.771252313808523*^9}, {3.7712523826180735`*^9, 
  3.7712523876224756`*^9}, {3.771252463001756*^9, 3.7712524677210474`*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"de40e697-9a65-400b-9275-a1b5085df37e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"traininglength", "=", " ", 
  RowBox[{
   RowBox[{"Length", "[", "data", "]"}], "*", ".75"}]}]], "Input",
 CellChangeTimes->{{3.771252470611846*^9, 3.7712524946839075`*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"c8974b31-21fc-4f2a-a63d-44b903ed02c7"],

Cell[BoxData["20668.5`"], "Output",
 CellChangeTimes->{3.7712540707546525`*^9, 3.7712543508275995`*^9, 
  3.7712545201826773`*^9, 3.771494261905033*^9, 3.7714953924435034`*^9, 
  3.7715007123959837`*^9, 3.77150273240406*^9, 3.771580332887117*^9, 
  3.771580409291854*^9},
 CellLabel->"Out[29]=",ExpressionUUID->"4d2e1fdb-56ee-4cda-9030-26348c650469"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["20668.5"], "Input",
 CellChangeTimes->{{3.7712525305627885`*^9, 3.771252532469309*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"5dc0f7af-34c3-4801-a1ea-48adc49dc188"],

Cell[BoxData["20668.5`"], "Output",
 CellChangeTimes->{3.7712540709119577`*^9, 3.771254351180911*^9, 
  3.771254520306426*^9, 3.771494261998774*^9, 3.7714953926621757`*^9, 
  3.771500712427249*^9, 3.77158040943946*^9},
 CellLabel->"Out[30]=",ExpressionUUID->"1ddcafa4-49d4-4a8c-99c8-a85837f19d62"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"trainingdata", "=", " ", 
   RowBox[{"data", "[", 
    RowBox[{"[", 
     RowBox[{"1", ";;", "20669"}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7712525356102514`*^9, 3.7712526141897984`*^9}},
 CellLabel->"In[31]:=",ExpressionUUID->"788e4742-ede3-4fbf-b9e6-6d1cb5ecd057"],

Cell[BoxData[
 RowBox[{
  RowBox[{"validationdata", "=", 
   RowBox[{"data", "[", 
    RowBox[{"[", 
     RowBox[{"20670", ";;"}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7712526193157415`*^9, 3.7712526393501377`*^9}},
 CellLabel->"In[32]:=",ExpressionUUID->"8c340929-7b3b-4dc8-963e-7a5d8ed5c25a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Training the Neural Network", "Section"]], "Section",
 CellChangeTimes->{{3.7712546368950224`*^9, 
  3.7712546449581475`*^9}},ExpressionUUID->"3c986e32-4ac8-4703-be61-\
f387ef381f5c"],

Cell[TextData[StyleBox["Goal: To create a Neural Network using the NetChain \
function with multiple layers within it.", "Subsubsection"]], "Text",
 CellChangeTimes->{{3.7719329460007133`*^9, 3.77193299470984*^9}, {
  3.771933070760893*^9, 3.77193307609161*^9}, {3.771933161045019*^9, 
  3.7719331796793137`*^9}, {3.7719333184788065`*^9, 
  3.771933320009534*^9}},ExpressionUUID->"b7eaa46a-30c5-4ec9-9026-\
f6e86ab129b4"],

Cell["\<\
Creating the Baseline Neural Network with Layers
\tIn order to sense the difference between cells with Malaria and cells \
without Malaria, layers need to be put into place to control the features \
that the neural net senses and organize them into classes.
\t Here are a few notable layers:
\t\tResizeLayer: Changes the dimensions of each image to make them all even \
for the neural network.
\t\tRamp: Narrows the number of features detected by getting rid of \
unessential features.
\t\tPoolingLayer: Downsamples the features detected.
\t\tFlattenLayer: Creates features into a feature vector.
\t\tSoftmaxLayer: Turns the vectors into a probability to classify the image.\
\>", "Text",
 CellChangeTimes->{{3.7712528035238667`*^9, 3.7712528182924213`*^9}, {
  3.77193332394571*^9, 3.7719333440858617`*^9}, {3.77193355670746*^9, 
  3.771933764828005*^9}, {3.771933796618724*^9, 3.771933830058139*^9}, {
  3.771933883743693*^9, 
  3.7719339809523306`*^9}},ExpressionUUID->"b87785f4-5941-4e04-ab96-\
555fb73b9d09"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dims", "=", " ", 
  RowBox[{"{", 
   RowBox[{"135", ",", "135"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.7712539930777235`*^9, 3.771254007379158*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"0c82c71c-0a8d-462c-8d1b-8b87719cc37e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"135", ",", "135"}], "}"}]], "Output",
 CellChangeTimes->{{3.771254059557618*^9, 3.77125407178834*^9}, 
   3.7712543521137657`*^9, 3.77125452048295*^9, 3.7714942625611353`*^9, 
   3.7714953930995693`*^9, 3.7715007125521994`*^9, 3.7715027405472374`*^9, 
   3.7715803850755973`*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"21d60123-4bfa-44c5-b751-bef21ffbad6b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lenet", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ResizeLayer", "[", "dims", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"20", ",", "5"}], "]"}], ",", "\[IndentingNewLine]", "Ramp", 
      ",", " ", 
      RowBox[{"(*", 
       RowBox[{
       "Takes", " ", "out", " ", "the", " ", "the", " ", "not", " ", "useful",
         " ", "features"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"PoolingLayer", "[", 
       RowBox[{"2", ",", "2"}], "]"}], ",", 
      RowBox[{"(*", "Downsamples", "*)"}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"50", ",", "5"}], "]"}], ",", "\[IndentingNewLine]", "Ramp", 
      ",", " ", 
      RowBox[{"(*", 
       RowBox[{
       "Takes", " ", "out", " ", "the", " ", "the", " ", "not", " ", "useful",
         " ", "features"}], "*)"}], "\[IndentingNewLine]", 
      RowBox[{"PoolingLayer", "[", 
       RowBox[{"2", ",", "2"}], "]"}], ",", 
      RowBox[{"(*", "Downsamples", "*)"}], "\[IndentingNewLine]", 
      "\[IndentingNewLine]", 
      RowBox[{"FlattenLayer", "[", "]"}], ",", "500", ",", 
      RowBox[{"(*", 
       RowBox[{
       "Makes", " ", "features", " ", "into", " ", "feature", " ", "vector", 
        "\"\<\>"}], "*)"}], "\[IndentingNewLine]", "Ramp", ",", "2", ",", 
      RowBox[{"(*", 
       RowBox[{
        RowBox[{
        "Takes", " ", "out", " ", "the", " ", "the", " ", "not", " ", 
         "useful", " ", "features"}], "-", " ", 
        RowBox[{"True", " ", "or", " ", "false"}]}], "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", 
    RowBox[{"(*", 
     RowBox[{
     "Turns", " ", "the", " ", "vector", " ", "into", " ", "probabilities"}], 
     "*)"}], "\[IndentingNewLine]", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Class\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"True", ",", "False"}], "}"}]}], "}"}], "]"}]}], ",", 
    RowBox[{"(*", 
     RowBox[{"Tensor", " ", "into", " ", "true", " ", "or", " ", "false"}], 
     "*)"}], "\[IndentingNewLine]", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", 
     RowBox[{"NetEncoder", "[", "\"\<Image\>\"", "]"}]}]}], 
   RowBox[{"(*", 
    RowBox[{"Turns", " ", "image", " ", "into", " ", "numbers"}], "*)"}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.7712528255278673`*^9, 3.7712529209597654`*^9}, {
   3.7712539629386063`*^9, 3.7712540564030232`*^9}, 3.771609506074289*^9, 
   3.7716138891144714`*^9, {3.7716199394443417`*^9, 3.771619983312642*^9}, {
   3.771620013931839*^9, 3.771620093044567*^9}, {3.7716826993693247`*^9, 
   3.771682750104686*^9}, {3.7716827874837646`*^9, 3.771682812759185*^9}, {
   3.771682885497729*^9, 3.771682956794164*^9}, {3.7716830221344843`*^9, 
   3.7716830794631796`*^9}},ExpressionUUID->"ae03eb60-e8f1-43d7-b2e5-\
05ad61c6a384"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {20., {0., 20.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, BaseStyle -> GrayLevel[0.6], 
                 ImageMargins -> 0, ImageSize -> {36, Automatic}, 
                 PlotRangePadding -> 0], 
                StyleBox[
                "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                 FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                 RGBColor[0.66, 0, 0], GraphicsColor -> RGBColor[0.66, 0, 0], 
                 FontFamily -> "Roboto", FontSize -> 8, FontColor -> 
                 RGBColor[0.66, 0, 0], Background -> GrayLevel[1, 0.65]]}, 
               Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["12", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {20., {0., 20.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, BaseStyle -> GrayLevel[0.6], 
                 ImageMargins -> 0, ImageSize -> {36, Automatic}, 
                 PlotRangePadding -> 0], 
                StyleBox[
                "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                 FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                 RGBColor[0.66, 0, 0], GraphicsColor -> RGBColor[0.66, 0, 0], 
                 FontFamily -> "Roboto", FontSize -> 8, FontColor -> 
                 RGBColor[0.66, 0, 0], Background -> GrayLevel[1, 0.65]]}, 
               Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Resize", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{135, 135}], 
                    "Resampling" -> "Linear", "Dimensionality" -> 2, 
                    "$Channels" -> 3, "$InputSize" -> {128, 128}, 
                    "$OutputSize" -> {135, 135}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 135, 135}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{20, 3, 5, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 20, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {135, 135}, 
                    "$OutputSize" -> {131, 131}, "$WeightsInputChannels" -> 
                    3], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 135, 135}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 131, 131}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {20, 131, 131}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 131, 131}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 131, 131}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 20, "$InputSize" -> {131, 131}, 
                    "$OutputSize" -> {65, 65}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 131, 131}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 65, 65}, NeuralNetworks`RealT]
                    ]], "5" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{50, 20, 5, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 50, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 20, "$InputSize" -> {65, 65}, 
                    "$OutputSize" -> {61, 61}, "$WeightsInputChannels" -> 20],
                     "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 65, 65}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 61, 61}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {50, 61, 61}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 61, 61}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 61, 61}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 50, "$InputSize" -> {61, 61}, 
                    "$OutputSize" -> {30, 30}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 61, 61}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 30, 30}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{45000}, NeuralNetworks`RealT]]], 
                    "9" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{500, 45000}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {500}, "$OutputSize" -> 500, 
                    "$InputSize" -> 45000, "$InputDimensions" -> {45000}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{45000}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
                    "10" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {500}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
                    "11" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{2, 500}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 500, "$InputDimensions" -> {500}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{3, 128, 128}, 
                    NeuralNetworks`RealT], "Type" -> "Image", 
                    "ImageSize" -> {128, 128}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "Interleaving" -> False, 
                    "MeanImage" -> None, "VarianceImage" -> None, "$Version" -> 
                    "12.0.10"]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "Type" -> "Class", 
                    "Labels" -> {True, False}, "InputDepth" -> 1, 
                    "Dimensions" -> 2, "$Rank" -> 0, "$Version" -> 
                    "12.0.10"]]], NeuralNetworks`Private`NetChain`opart = 
                   Null, NeuralNetworks`Private`NetChain`part = Null, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"128\"", "\"128\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ResizeLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"135\"", "\"135\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"131\"", "\"131\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"131\"", "\"131\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"65\"", "\"65\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"61\"", "\"61\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"61\"", "\"61\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"30\"", "\"30\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"45000\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"12\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {60., {8., 15.}}, 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.771254077198148*^9, 3.771254356841919*^9, 
  3.771254520732286*^9, 3.7714942634671736`*^9, 3.771495393536972*^9, 
  3.771500712645957*^9, 3.7715027461047716`*^9},
 CellLabel->"Out[65]=",ExpressionUUID->"367fe044-2d83-4ea0-87eb-01b214d17127"]
}, Open  ]],

Cell["\<\
Training the Neural Network with Net Train
\tIn order to train the neural network, I used a GPU, graphics processing \
device, to run the data with 10 rounds. The error rate for the round training \
was 0.329% while the validation training error rate was 7.53%. The gap \
between the orange round training and blue validation training represents the \
amount of overfitting. The smaller the gap, the less overfitting. \
Furthermore, the downward trend of the round training shows the error rate \
going down as the neural network goes through more rounds.\
\>", "Text",
 CellChangeTimes->{{3.7712546798750267`*^9, 3.771254688844451*^9}, {
  3.7719339948304005`*^9, 3.7719340260918193`*^9}, {3.7719340695255313`*^9, 
  3.77193419708488*^9}, {3.7719357306104755`*^9, 3.771935775171815*^9}, {
  3.7719358428335843`*^9, 
  3.771935889772709*^9}},ExpressionUUID->"960c56b0-54b1-4787-b3de-\
b85c3e0845ea"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"results", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"lenet", ",", 
    RowBox[{"Normal", "[", "trainingdata", "]"}], ",", "All", ",", 
    RowBox[{"ValidationSet", "\[Rule]", 
     RowBox[{"Normal", "[", "validationdata", "]"}]}], ",", 
    RowBox[{"MaxTrainingRounds", "\[Rule]", "10"}], ",", " ", 
    RowBox[{"TargetDevice", "\[Rule]", "\"\<GPU\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.771254706742689*^9, 3.771254821871353*^9}, {
  3.7714992380029755`*^9, 3.771499244598179*^9}},
 CellLabel->"In[66]:=",ExpressionUUID->"2fdc1736-16ee-4e85-bcdf-85516efb2ffb"],

Cell[BoxData[
 FrameBox[GridBox[{
    {
     ItemBox[
      FrameBox[
       StyleBox["\<\"NetTrain Results\"\>", "SuggestionsBarText",
        StripOnInput->False,
        FontSize->12],
       FrameMargins->{{10, 5}, {-4, 2}},
       FrameStyle->None,
       StripOnInput->False],
      Alignment->{Left, Bottom},
      Background->RGBColor[0.96, 0.96, 0.96],
      Frame->{{False, False}, {True, False}},
      FrameStyle->Opacity[0.1],
      ItemSize->{Automatic, 1},
      StripOnInput->False]},
    {
     ItemBox[
      TagBox[
       FrameBox[
        TagBox[GridBox[{
           {
            TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"summary\"", 
               GrayLevel[0.4], StripOnInput -> False]},
             "RowDefault"], 
            
            TemplateBox[{
             ",","\",\"",
              TemplateBox[{"\[ThinSpace]", "\" \"", "\"batches:\"", "3230"}, 
               "RowWithSeparators"],
              TemplateBox[{"\[ThinSpace]", "\" \"", "\"rounds:\"", "10"}, 
               "RowWithSeparators"],
              TemplateBox[{
               "\[ThinSpace]", "\" \"", "\"time:\"", "\"2.1min\""}, 
               "RowWithSeparators"],
              TemplateBox[{
               "\[ThinSpace]", "\" \"", "\"examples/s:\"", "1612"}, 
               "RowWithSeparators"]},
             "RowWithSeparators"]},
           {
            TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"data\"", 
               GrayLevel[0.4], StripOnInput -> False]},
             "RowDefault"], 
            
            TemplateBox[{
             ",","\",\"",
              TemplateBox[{
               "\[ThinSpace]", "\" \"", "\"training examples:\"", "20669"}, 
               "RowWithSeparators"],
              TemplateBox[{
               "\[ThinSpace]", "\" \"", "\"validation examples:\"", "6889"}, 
               "RowWithSeparators"],
              TemplateBox[{
               "\[ThinSpace]", "\" \"", "\"processed examples:\"", "206720"}, 
               "RowWithSeparators"],
              TemplateBox[{
               "\[ThinSpace]", "\" \"", "\"skipped examples:\"", "0"}, 
               "RowWithSeparators"]},
             "RowWithSeparators"]},
           {
            TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"method\"", 
               GrayLevel[0.4], StripOnInput -> False]},
             "RowDefault"], 
            
            TemplateBox[{
             ",","\",\"",
              TemplateBox[{
               "\[ThinSpace]", "\" \"", "\"ADAM\"", "\"optimizer\""}, 
               "RowWithSeparators"],
              TemplateBox[{"\[ThinSpace]", "\" \"", "\"batch size\"", "64"}, 
               "RowWithSeparators"],"\"GPU\""},
             "RowWithSeparators"]},
           {
            TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"round\"", 
               GrayLevel[0.4], StripOnInput -> False]},
             "RowDefault"], 
            TemplateBox[{",","\",\"",TemplateBox[{"\[ThinSpace]", "\" \"", 
                TagBox[
                 TooltipBox["\"loss:\"", 
                  TagBox[
                   GridBox[{{
                    
                    TemplateBox[{"\"Measurement: \"", "\"loss\""}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Column"]], Annotation[#, 
                  Column[{
                    Row[{"Measurement: ", "loss"}]}], "Tooltip"]& ], 
                TagBox[
                 InterpretationBox[
                  RowBox[{"\"1.11\"", "\[Times]", 
                    SuperscriptBox["10", "\"-2\""]}], 0.011127746329624957`, 
                  AutoDelete -> True], ScientificForm[#, 3]& ]}, 
               "RowWithSeparators"],TemplateBox[{"\[ThinSpace]", "\" \"", 
                TagBox[
                 TooltipBox["\"error:\"", 
                  TagBox[
                   GridBox[{{
                    
                    TemplateBox[{"\"Measurement: \"", "\"ErrorRate\""}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Column"]], Annotation[#, 
                  Column[{
                    Row[{"Measurement: ", "ErrorRate"}]}], "Tooltip"]& ], 
                "\"0.329%\""}, "RowWithSeparators"]},
             "RowWithSeparators"]},
           {
            
            TemplateBox[{
             TemplateBox[{5}, "Spacer1"],StyleBox["\"validation\"", 
               GrayLevel[0.4], StripOnInput -> False]},
             "RowDefault"], 
            TemplateBox[{",","\",\"",TemplateBox[{"\[ThinSpace]", "\" \"", 
                TagBox[
                 TooltipBox["\"loss:\"", 
                  TagBox[
                   GridBox[{{
                    
                    TemplateBox[{"\"Measurement: \"", "\"loss\""}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Column"]], Annotation[#, 
                  Column[{
                    Row[{"Measurement: ", "loss"}]}], "Tooltip"]& ], 
                TagBox[
                 InterpretationBox[
                  RowBox[{"\"4.1\"", "\[Times]", 
                    SuperscriptBox["10", "\"-1\""]}], 0.40961502843393066`, 
                  AutoDelete -> True], ScientificForm[#, 3]& ]}, 
               "RowWithSeparators"],TemplateBox[{"\[ThinSpace]", "\" \"", 
                TagBox[
                 TooltipBox["\"error:\"", 
                  TagBox[
                   GridBox[{{
                    
                    TemplateBox[{"\"Measurement: \"", "\"ErrorRate\""}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Column"]], Annotation[#, 
                  Column[{
                    Row[{"Measurement: ", "ErrorRate"}]}], "Tooltip"]& ], 
                "\"7.53%\""}, "RowWithSeparators"]},
             "RowWithSeparators"]},
           {
            ItemBox[
             
             DynamicModuleBox[{NeuralNetworks`Private`NetTrain`index$$ = 2, 
              NeuralNetworks`Private`NetTrain`plotList$$ = {
               GeneralUtilities`TightLabeled[
                Graphics[{
                  AbsoluteThickness[1.25], {{
                    Hue[0.083, 1., 1.], 
                    Line[CompressedData["
1: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
6zOGzaQvTYO3A5LTeveM4n8B9rVr0g==
                    "]]}, {}}, {{
                    Hue[0.59, 0.7, 0.75], 
                    
                    Line[{{0.9698996655518394, -0.34033841761245254`}, {
                    1.9732441471571907`, -0.5116668555207398}, {
                    2.9765886287625416`, -0.6690818747269256}, {
                    3.979933110367893, -0.6551035667197335}, {
                    4.983277591973244, -0.5596410485360398}, {
                    5.986622073578595, -0.574818348435244}, {
                    6.989966555183946, -0.5019294258692759}, {
                    7.993311036789297, -0.4843846232793803}, {
                    8.996655518394649, -0.43399878763750244`}, {
                    10., -0.3876241178374125}}]}, {
                    AbsolutePointSize[3.8333333333333335`], 
                    Hue[0.59, 0.7, 0.65], 
                    
                    Point[{{0.9698996655518394, -0.34033841761245254`}, {
                    1.9732441471571907`, -0.5116668555207398}, {
                    2.9765886287625416`, -0.6690818747269256}, {
                    3.979933110367893, -0.6551035667197335}, {
                    4.983277591973244, -0.5596410485360398}, {
                    5.986622073578595, -0.574818348435244}, {
                    6.989966555183946, -0.5019294258692759}, {
                    7.993311036789297, -0.4843846232793803}, {
                    8.996655518394649, -0.43399878763750244`}, {
                    10., -0.3876241178374125}}]}}}, Prolog -> {{
                    Text[5, 
                    Offset[{-2, -2}, {5., 2.2600000000000002`}], {1., 1.}], 
                    Text[10, 
                    Offset[{-2, -2}, {10., 2.2600000000000002`}], {1., 1.}], 
                    Text[15, 
                    Offset[{-2, -2}, {15., 2.2600000000000002`}], {1., 1.}]}, {
                    Text[
                    Superscript[10, "-3"], 
                    Offset[{3, 0}, {0, -3.}], {-1, -1.}], 
                    Text[
                    Superscript[10, "-2"], 
                    Offset[{3, 0}, {0, -2.}], {-1, -1.}], 
                    Text[
                    Superscript[10, "-1"], 
                    Offset[{3, 0}, {0, -1.}], {-1, -1.}], 
                    Text["1", 
                    Offset[{3, 0}, {0, 0.}], {-1, -1.}], 
                    Text["10", 
                    Offset[{3, 0}, {0, 1.}], {-1, -1.}], 
                    Text[
                    Superscript[10, "2"], 
                    Offset[{3, 0}, {0, 2.}], {-1, -1.}]}}, 
                 PlotRange -> {{
                   0, 10.013931888544903`}, {-3.8600000000000003`, 
                   2.2600000000000002`}}, ImageSize -> {302, 182.}, 
                 GridLines -> {{5., 10., 15.}, {{-4., 
                    GrayLevel[0.3001]}, {-3., 
                    GrayLevel[0.3001]}, {-2., 
                    GrayLevel[0.3001]}, {-1., 
                    GrayLevel[0.3001]}, {0., 
                    GrayLevel[0.3001]}, {1., 
                    GrayLevel[0.3001]}, {2., 
                    GrayLevel[0.3001]}}}, Frame -> True, Axes -> None, 
                 AspectRatio -> Full, 
                 BaseStyle -> {
                  FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
                   GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, 
                   ScriptMinSize -> 6}, PlotRangePadding -> None, 
                 PlotRangeClipping -> True, Background -> GrayLevel[1], 
                 FrameStyle -> GrayLevel[0.5], ImagePadding -> 1, FrameTicks -> 
                 None], {None, "loss", "rounds"}], 
               GeneralUtilities`TightLabeled[
                Graphics[{
                  AbsoluteThickness[1.25], {{
                    Hue[0.083, 1., 1.], 
                    Line[CompressedData["
1:eJxNVgtY1FUWHx7yfgwMzMDwmmGQrdbPfD/azTOZKBiVSya2+CisNFcxEc1o
s8XANLXElRWRDJVWRAQsTUUENF0VNwLkXRgqoCj5SETkofu/Zw7n7v/j+/jO
3HPP43fO+Z1rjF0W9Y61SqUKtVKpxP/w2GHpZct2w1Td3ISqsF/BIh8CFLe3
wJJ/Tm7N+kMRrKwKU366TOenLOe6BmhKHF9SePEsPFt0Y8/G4Y2kX076TfD4
wMtOqZ9WgAq/n+l+FezdOFy50QCpt0ceOPbVJTpvInu1FE8TmOyfr8p5VA/o
bm492W+CTeL6xgY4EhT+MP31XyieRvJ3me43QEjm/i/OzG4h/Ubyf4XjX/JU
we7idVcBwy+qgy0YzzWoFuFX1cNh/FpZbsD42jjefnPRubyr7dAhrt+oAwPG
e53yq4EpP5Y2Zas7yH4NLML4bxI+l2DTG2d/y5x0i/Crg0LMp5P8VUJNW7kq
bclvJF+CHszvNtmrAP/4Ss3mjDt0/hMYMN+7JF+AUU8WKx7vUjwXYArmf4/i
PQ+zhPu+e5TPGViEePxO+qcgceP7/37O8z6dn4dNiM991t/1l/sF457uonzO
QiHi1UX4l8Jp3arjo8wPSL8YahC/QbkM2pt7Tg+P7qZ4j0MP4tlN9SoCp+yP
/vtM3EPwwXqdBH/E9yGdl8DwxY9rQ1N6qD+KwYx4P6J4jkPUiKRfgzMfEV7H
4G3Ev5fy/x5Wddt0BH7XS/EehfVYjz6+n6GAoS/vo/uHIQ/r08/2StY69muv
9FM+x6AS6zXA+lfDNw3R9AxQfkegC+v3mPA9Cnbu4ntC9S8CH6znE44n7aYw
oDIP3g/E+qrMmG7CIdgnzO1SmS33v4URWG+V2dLfh+B44cU0q2esWJ6M9bcy
W/DKg4uKt0+OSHkmpm9ltuB9EJpXvfL1gNma7b+L/WHN/u80uisVsjZb4i2A
1dgvNmYLvrlgJcoVbWO24LkfPsf+sSF/haDJ2nrwg2s2Zks98yET+8mW/OXC
UJuZ3z6Is+V48rG/5Pn4d72Prui1ZX9l2G9DON+IC3Un7qUMYfvV2H9DzJZ6
5UCMgMPDjvA9CK3Yj3asv/RL0RB2bL8b+9OO73+idMffnrJnfw7Yr/aMT+rr
v1R0fGdP+odBj/1rb7bU/wDsVchvITiwvWHYzw5mSzvkwBG/+Q1t5Q6kvxcm
YX87UrzfwLk1huYFsxwp3l0wA/vdkfR3QuMV8TlSPLshFvvfietxa8re9vlL
nch/FiTgPDiR/ywY2Pf2reYeJ6pXNqzD+XBm2d059G5MsjPhswfScV6cqV5f
gTHuelejuwv1xz7Ixflx4XxHi/bY6cL+i3GeXDifsDECEFfGowLny5XtR2//
o9Ih8rwF582V8Xqvt9O++nk3zud3nD836p898NHcfJcZF9y4/rY4j+5c/81K
d1TMdGe8tDif7lTvb+Br00htZIuUt+G8qtn/Gy9+6No2Vs35WeZXTXhthWtd
YoDU5D8NcnCe1YznUmWaFpxSc/wWPpf2Hkbv9Aq29yB8t0MxzrsH5ZcBSQLO
SA/2NxXn34P6IRWcT8zxzdoq5UrkAw/ylw5pS04qHSjv/xX5QfoLChSfJ9ej
FfnCk+Pd/5NoUE/Wj0P+kPqjRbvul+c9yCee7P/kKPPQmDuejM9a5BcN35+m
dLN+rIbzdUG+0RA+W6BKQaMxUcP2/4X8o+H+ipkmAJHnBuQjDc9LG9KBF9cz
F/nJi+NZlisawIv9jUG+8qL4NsOjmOTRtaleNC/boAT5S55/qnTHtnov8pcE
4chng+cfg2tp2ITXArzpfjJUI795s7/tAo4F3hT/ZzAH+W5Q/gCMwYJw5Hk7
8p83+zugsM+W2/L8fWwPLffD2JTzL7w6Rsv+epEftdwPpeOenuKWqGX8kpEv
tVyPiBsbpv5YKu25vSD4U55f2iEGRsf20pFPdVz/uS+JT8f6wcivOo73er8Y
aB3Hl4d8q2O8l4vxrpP2xyH/Sv2++Uuj1vv7kP3PoQz52IftpyjTPy3Wh/Gc
jvwsz91/UNojR96vQb4ePI+GHQkCEB+u5zzkb1/CYzmYBH2O9uV+uIF87sv6
B+tnzHvxQ1/2H4/87st4jt9w6E3rUl/2349878v+Twn6sNXz/XXI/1J+qTP+
nX9M1zMe6jCxD/TM17UCji16nucM3A96xnP+q4KgpRySI/aFnvHvUAkG8WO8
8nF/+LG/Fcq0/P0tP+7HCbhPpDywYNbyP+0bvL8QTuN+8WO8PhPj0unH+UTi
vvFn/DzOiYHx5/t1uH/8OZ6dq8Xnz/ffxH3kz/UZqrDH+BJp7ybuJ3le8PPE
j7ttAtheAu6rAJ7XiYJOIwI4n8e4vwLY3g+T+pISvgzgeq3HfSbPXxbtURvA
/jwjxH6T9urFa10fSHiqVJm47wJZ/63XApQOkXJonlgwgdwvt2zXKIwayPUt
xH0YyPms/P7y5mc7pf5zuB6D2P8TQR8jpXwG92UQ57/BVxCqPH8F92cQ109z
UTRIENtvwH36f/olYqEZGI9C3K8GxstTdyVyZYiB65uA+9bA+daJcKYZOJ8J
uH8NHF+GoLfFUr8f97GU5xlFwFIuw/0s5eDEPcpGkP6TcV9L++3V4jNwfuG4
v+X9XFHuBzIfl9linxv5PE6sDx8j26/E/W7kfh3VLAZE6m/DfS/lbmW7zJhn
ZPuzcf8buV+KFDRGJBkZX398D0j9NWKcso08ry34PjDy/p0s1vN/jMz/2fhe
kP7tdghCNnI9F+H7QcZffi9F6bhg9jcM3xPBfP+L6aIBgzneu/i+CGY8ogRd
RUn9w/jekPpaAcdKaX81vj+k3DRTPACkvT/je0Te36W8BpxPSH1Vk3ifSP1Y
O0F40v8ZfK/I81CxDlQmltfj+0XKN486LMw1STkS3zMmtpevnqhsUBP3rxrf
NybGL/498Zm4fjX43pH2xp0WC9bE8afj+0fe7xXrtkCez8H3kPRfskIQipQt
7yNpf62yja93SXut+F4KMW8NiVD+4uF/zgnKDw==
                    "]]}, {}}, {{
                    Hue[0.59, 0.7, 0.75], 
                    
                    Line[{{0.9698996655518394, 0.19364203803164465`}, {
                    1.9732441471571907`, 0.0884017999709682}, {
                    2.9765886287625416`, 0.07635360719988386}, {
                    3.979933110367893, 0.07345042821889969}, {
                    4.983277591973244, 0.0702569313398171}, {
                    5.986622073578595, 0.06793438815502975}, {
                    6.989966555183946, 0.07098272608506313}, {
                    7.993311036789297, 0.0751923356074902}, {
                    8.996655518394649, 0.0769342429960807}, {10., 
                    0.0753374945565394}}]}, {
                    AbsolutePointSize[3.8333333333333335`], 
                    Hue[0.59, 0.7, 0.65], 
                    
                    Point[{{0.9698996655518394, 0.19364203803164465`}, {
                    1.9732441471571907`, 0.0884017999709682}, {
                    2.9765886287625416`, 0.07635360719988386}, {
                    3.979933110367893, 0.07345042821889969}, {
                    4.983277591973244, 0.0702569313398171}, {
                    5.986622073578595, 0.06793438815502975}, {
                    6.989966555183946, 0.07098272608506313}, {
                    7.993311036789297, 0.0751923356074902}, {
                    8.996655518394649, 0.0769342429960807}, {10., 
                    0.0753374945565394}}]}}}, Prolog -> {{
                    Text[5, 
                    Offset[{-2, -2}, {5., 0.6060000000000001}], {1., 1.}], 
                    Text[10, 
                    Offset[{-2, -2}, {10., 0.6060000000000001}], {1., 1.}], 
                    Text[15, 
                    Offset[{-2, -2}, {15., 0.6060000000000001}], {1., 1.}]}, {
                    Text[
                    PercentForm[0.], 
                    Offset[{3, 0}, {0, 0.}], {-1, -1.}], 
                    Text[
                    PercentForm[0.2], 
                    Offset[{3, 0}, {0, 0.2}], {-1, -1.}], 
                    Text[
                    PercentForm[0.4], 
                    Offset[{3, 0}, {0, 0.4}], {-1, -1.}]}}, 
                 PlotRange -> {{
                   0, 10.013931888544903`}, {-0.006000000000000001, 
                   0.6060000000000001}}, ImageSize -> {302, 182.}, 
                 GridLines -> {{5., 10., 15.}, {{0., 
                    GrayLevel[0.8501]}, {0.05, 
                    GrayLevel[0.8501]}, {0.1, 
                    GrayLevel[0.8501]}, {0.15, 
                    GrayLevel[0.8501]}, {0.2, 
                    GrayLevel[0.8501]}, {0.2, 
                    GrayLevel[0.8501]}, {0.25, 
                    GrayLevel[0.8501]}, {0.3, 
                    GrayLevel[0.8501]}, {0.35, 
                    GrayLevel[0.8501]}, {0.4, 
                    GrayLevel[0.8501]}, {0.4, 
                    GrayLevel[0.8501]}, {0.45, 
                    GrayLevel[0.8501]}, {0.5, 
                    GrayLevel[0.8501]}, {0.55, 
                    GrayLevel[0.8501]}, {0.6, 
                    GrayLevel[0.8501]}, {0.6, 
                    GrayLevel[0.8501]}, {0.65, 
                    GrayLevel[0.8501]}, {0.7, 
                    GrayLevel[0.8501]}, {0.75, 
                    GrayLevel[0.8501]}, {0.8, 
                    GrayLevel[0.8501]}, {0., 
                    GrayLevel[0.3001]}, {0.2, 
                    GrayLevel[0.3001]}, {0.4, 
                    GrayLevel[0.3001]}, {0.6, 
                    GrayLevel[0.3001]}, {0.8, 
                    GrayLevel[0.3001]}}}, Frame -> True, Axes -> None, 
                 AspectRatio -> Full, 
                 BaseStyle -> {
                  FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
                   GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, 
                   ScriptMinSize -> 6}, PlotRangePadding -> None, 
                 PlotRangeClipping -> True, Background -> GrayLevel[1], 
                 FrameStyle -> GrayLevel[0.5], ImagePadding -> 1, FrameTicks -> 
                 None], {None, "error rate", "rounds"}]}}, 
              TagBox[GridBox[{
                 {
                  DynamicBox[ToBoxes[
                    Grid[{{
                    Button[
                    MouseAppearance[
                    Style["\:2039", FontColor :> If[
                    CurrentValue["MouseOver"], 
                    RGBColor[0.27, 0.54, 0.79], 
                    GrayLevel[0.25]], FontFamily -> "MS Gothic", FontSize -> 
                    14, FontWeight -> "Thin"], "LinkHand"], 
                    NeuralNetworks`Private`NetTrain`index$$ = 
                    Mod[NeuralNetworks`Private`NetTrain`index$$ - 1, 2, 1], 
                    Appearance -> None], 
                    Dynamic[
                    Part[{
                    Tooltip["loss", 
                    Column[{
                    Row[{"Measurement: ", "loss"}]}]], 
                    Tooltip["error rate", 
                    Column[{
                    Row[{"Measurement: ", "ErrorRate"}]}]]}, 
                    NeuralNetworks`Private`NetTrain`index$$], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetTrain`index$$}], 
                    Button[
                    MouseAppearance[
                    Style["\:203a", FontColor :> If[
                    CurrentValue["MouseOver"], 
                    RGBColor[0.27, 0.54, 0.79], 
                    GrayLevel[0.25]], FontFamily -> "MS Gothic", FontSize -> 
                    14, FontWeight -> "Thin"], "LinkHand"], 
                    NeuralNetworks`Private`NetTrain`index$$ = 
                    Mod[NeuralNetworks`Private`NetTrain`index$$ + 1, 2, 1], 
                    Appearance -> None]}}, ItemSize -> {{3, 20, 3}, {2}}], 
                    StandardForm],
                   ImageSizeCache->{276., {7., 13.}},
                   TrackedSymbols:>{NeuralNetworks`Private`NetTrain`index$$}]},
                 {
                  DynamicBox[ToBoxes[
                    Part[
                    NeuralNetworks`Private`NetTrain`plotList$$, 
                    NeuralNetworks`Private`NetTrain`index$$], StandardForm],
                   ImageSizeCache->{314., {94., 99.}},
                   TrackedSymbols:>{NeuralNetworks`Private`NetTrain`index$$}]}
                },
                DefaultBaseStyle->"Column",
                GridBoxAlignment->{"Columns" -> {{Center}}},
                
                GridBoxItemSize->{
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
               "Column"],
              DynamicModuleValues:>{}],
             Alignment->Center,
             StripOnInput->False], "\[SpanFromLeft]"},
           {
            ItemBox[
             StyleBox[
              RowBox[{
               GraphicsBox[{},
                Axes->None,
                Background->Hue[0.083, 1., 1.],
                ImagePadding->{{0, 0}, {5, 2}},
                ImageSize->{13, 1}], "  ", "\<\"training set\"\>", "\t", 
               GraphicsBox[{},
                Axes->None,
                Background->Hue[0.59, 0.7, 0.75],
                ImagePadding->{{0, 0}, {5, 2}},
                ImageSize->{13, 1}], "  ", "\<\"validation set\"\>"}],
              FontFamily->"Verdana",
              FontSize->8,
              FontColor->GrayLevel[0.4]],
             Alignment->Center,
             StripOnInput->False], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          ColumnsEqual->False,
          
          GridBoxAlignment->{
           "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
          GridBoxDividers->{"Columns" -> {False, {
               Opacity[0.15]}, False}},
          GridBoxItemSize->{"Columns" -> {8, {26}}, "Rows" -> {{1.}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], 
              Offset[1.1199999999999999`], {
               Offset[1.75]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.8]}, 
              Offset[0.2]}}],
         "Grid"],
        FrameMargins->{{10, 10}, {10, 5}},
        FrameStyle->None,
        StripOnInput->False],
       Deploy,
       DefaultBaseStyle->"Deploy"],
      Alignment->Center,
      BaseStyle->{
       FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI", 
        NumberMarks -> False, Deployed -> False},
      StripOnInput->False]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.5599999999999999]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], 
       Offset[0.8], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  Background->GrayLevel[1],
  FrameMargins->{{0, 0}, {0, 0}},
  FrameStyle->GrayLevel[0.85],
  RoundingRadius->5,
  StripOnInput->False]], "Output",
 CellChangeTimes->{3.771254762322571*^9, 3.7712548043132925`*^9, 
  3.771256988890458*^9, 3.7714952115589557`*^9, 3.7714955891893797`*^9, 
  3.7715007182698064`*^9, 3.771502897130298*^9},
 CellLabel->"Out[66]=",ExpressionUUID->"4d19b54a-e810-4a01-882c-beafb4f7b396"]
}, Open  ]],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
zexmX3fes9nFPrqKttzSYTb/d90620v595+wG3OvnLVf/x62CM0KZpJjM/x3
m8a3POkb7rzu7bJ76ycrLC0XcRojNmEvEImNXQ/K8JGmllnUyf6J2uLQ+ODD
sbc55QHvuaTfoNBkM0i3WjzB5owhBa4kBCCvXmyE5XLUtJsPfHvK81LFE5Kv
8dtvHwspuF5dVpoQtH1j8M0xobpGx/b96fM/ny17xBhkV0b5HXX62gq/cO28
pXUWgyWlVUUnhZnGXmePMdl8sUwxu7qlmVWVF/w2mqTWQlN9ZQtaVqNsXZC2
XAjX+ZsFOW/Zuv0w8oXz1ntGexIJFJagv6Ic7/wHK/uTb2/4B/L8P45aRFQP
ywRy8pn9DtFn8h5CsFQy2Xrl0H8e8s8BlgboA1h6bUhlos7yyIjCmsedk7Pw
7OTUMDnTO/qaZlxaOiGhV+JzMtPS4qKCo3FJxY1ChVy1YlwaekSpLkhLSz6f
dC7AJbawqZ+pf8pobePSyMNCX6N/esZWzv9eVkhgGj4cnfTa/tVnWzats0pC
vCRbZumDJ6xjU9uFsEoKcwtDv7Xz9CJU85ZZOt7x1S0n8rtoE3JYQm0hRO5f
Z5WKZtVXmxQQZOYYSZGKZuZkEOmy+wmb5ZYWiqHK+E9f3/zRZ59t37Vj8yef
bPzA5Sana1LYR8o8b7P9c9NvvrUvqqJNSNC0g7zaBFsrcwzmy8/e/eqbnaFE
SC5VooV0s0/EdzL5fZec13929vy9uuGu9qKE4+us0udr5O74T3vvWq5AroKF
NQQfL7un12osra8YzLq0s657DhrjaVyJutFWjngs0ldOvIBzCMFfobC4M8qR
Wz5xyXE+i0PebWnYxERMWhssF8B3fTH7HE1P4a6SSMXX8iPtv/DMKKkoJ5Ji
HH//oVsioegGiZR1zt3f67uAylHhSCcx0sbu4JadmENmJg7uR/5mHJoPLA3Q
B7D02lg2Xaj1kDMGPWm4de164S3STdKVbFzi+YSCu+NLLa1SwOOdlJryG8Ul
10lFJUWZ59wiiXpnHlHWbGmthxJI3FGMCw/zCg7xxZ4+ZWm25Q2T6CYuU7LM
0ovDttqjuMssfd75DRMcei2STPvhshDbOiNuI1kRfY3+2wxj7+CLRYiKxRXT
xJAEnqYVEM98/ps/vLk7pYsyooB5DMbdKyH+ge6hoQFYR8uv95ouL6S+Uukr
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
IzCYg+jRU6lZZKT6coV0kE5IDHOwOYTZdcTOKTiH0jmhPj+27fbNcC8bzD5T
zI6TQZcK61mjzPaBK3bv2+CJbaNiWDzaRrxo9e7OuAeNzzgQA3i5AJY2THSO
SyvGaT1FLn+3ulRC6W4piEp2t/a5K0DDs7IptWgUPR8/L6vNvzMLI1Jo0zot
PSuZZZZ6HPL3jkptE8OzEpiZ5bH9oJ1mXHpWhvTPiTlJWDRm4pGtb9pndvFG
FPoiDOrK6pCndxSpTbwQcNAjj9DBgyUDE40xu984pC6Vdm3YzVmnvb56d7Nt
iF+Qu+XmT+28EgkMiXSy7frRYx7uRywcQgJC785PU+quYIzjK38/Qeih9VcX
+B632WIX0zYtHr8RtcvJ37egdrViaDeOzmIIxFB1zD+2nzhXWKye45tvnFqq
ZspvnrY0rLfjpr1uCVhsGBbreMzSC5dd0jksHakvSL+QHBEZhfUNCfYKC8cV
d4ghTg/1zo2M6PhYbEgY1j0oICDjWi2lF+K3FboeO3jK090XGxXi6ex96KNt
sS3A0gBtgKUNE92zh7JR/pMrJ4wDCeXFl1JwUW7RpWOK6XF6a1FSgPvxnZhv
d+/858bf/MtNbyxX/bFaBkWyoQfk7CAHuyO70Pjjn3/whknkWuPAwvrDvsAr
YjUugmTlYP7axr/twOzZh56C6oEjlvfBSukkRLTa+bfX/2ziFVrNQwP7cn9c
BVcpxrJrVxZDJhPRqyOsv/MKCki5hfaldR6gjVja+cyX9vmaudS+fPuAsLOO
GRWs6kCM7RWSunsMPbpe4PjJgcwn96uzMnCJbtF1EKxUwlBr0tGg0MjQGqFC
wqPhbdGo7xg7a/Njfi5bMBc6W1ggAgDgKcDShomeNR5SCbcdf2BnIs7zO78U
18DKYblAifwStz/njm+FVBw+84rr+m+xq0msLsPM2v90ZtGQEp6TwfLbCXtt
fBGnddDY112MjJMuNg0KZunU4vgV0bhWWrox29wm0F0rK9PvAs7kVUJrtPSj
ivCzXt94pPYop57OyKlU0+OiYh+LHX/dYhuWUiuRywVzP6yCyyy9LTittmFc
Nadkc/vxrn/EnLvU/FCgfa3OYswDVYedNTv09f7z5FmVbOXsIS07KgFnhmvQ
zKUqmhNCcfG7zqZrDzUr2Q/7CSf+6Fl6KdohNjHWA20sGJ13bMAFx8WbZTx6
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
1A/ZtXdygj76MrJ8UMRTqg/2P7p3WzptfErTB0ASE9Ixr+wPyE0h5MWftnM7
6pTcNSNWPLhk6ervmUlUd9bVPKmOifQ19sPRueL5sTad16rECm5N6AH/s0HR
dTxYIYZp8fZfmhxebmmd1yrEClqxS2Cku6s3Gso8/f74FHr7+fmyYhIp8uRn
Dv4BNxpl861h6U281lzXkndm32sfuJVwuvqqCV4BJ/bEl0nl03PIn96OPTvd
XYr7ForhcGL+2kVLr7n6K/vSGhaDM0akeOFb2RJuf46Jc3LRRc1giiaeTshl
xPCkdMff7f7Oc5+pNQazfa+llXdyGUs6vTh/Jp8QMEjeRyKLW3qWxFsXDjLu
XkmOOXcworpLJGPe8olLjvNZbMrVvzvmmRRxKsI+MA/MqKqdn2qc7z26WTgH
pCXGnI4o7hGpJ85WBIX8y8JHpS8/ydFlz/c0rFw6SSu0etPOLTg4i5gTe/bU
v7Zia8d7ReinLsbB7EQpxJ9WqrOy3rbc0vqu7WtMTzln7hCYj7WZjyCPztrK
RqhkdNY2KdjSVfvttjkYFE1+NElNsFr3lmN0VXVne0tetNl659w+/phy9Rpp
LK2vGCs+/Cv60hJm48PkvXuTH87HFx6nsUvcjNxKSLTxVd+d7wFY2jDRb+m1
RFyFl/6twSv+9JYNCSKvhtn8z9+se+3NdevR6atPjW0jGpUi+XB1hIWltb15
0j0OJJpGByqh9oIgr8M7N5291cGAxDLFrO5r5SK5vti12tXReS0sksNQuZ/7
3rde/euOA/hhrkQJKyTijuKCkAPodJnRq//xmw8xy+PP/sBovMuvXWP1dTCn
nJnhMTkVgYddEoMK2iEYVkq4w/gDJxOvZTephyNlAiX5zH4sPjw5mRR+6tWN
wdfHhMgLzMqotLO792T0TSwEXFRxqIMFjht8yio6F8Yx51RKKW+yIQ0bEmUR
UT2MZA6jjRObHL8YjUvZej4sMXFJCEUdSKW8h/nHP9xqHxJS2MZFT9uTz6Gt
cXT/f/3Xt8f2nyErBbLFN0XfR2WNDYsGMvvL71977U20MTdu+ti1GKJz9WWl
bWl918KCVvzFk3/93/+x7vOolqZBKdLZlQ096Mix3/T+hvVGr7/yu3c/WS02
8Q+tkb5irPzwr2jlwSY06mVCS33/FPruQR3DRc5vnblV/nhi1XfnewCWNkx+
cksnOb32beitzgd96AwWxOUhqlTNKWWiyf6aC+edLDZ9HFGMTvorZ6TCMWpF
GdZ40zueODKdqftauWpujZbWeV/UPCGWH//XZ/vm7UHD48LDML4FLWzmMPt6
1E4r3+ds6TVWXwdSFuVhxpEPva4WNg0KpTPocPOiliv6YW1p5+FJOUHrXW8z
+TJE+LP04pvZfm/5140J538vczsrynw2OBYMUjnzXwiIoofzj1sEnccW0yZF
87MKy7S8TNp6mJtTzUh5nM5CX/eDx4zRk6vlcrQ1NiOW3mxxcv7bEF79o7L2
ht3mH1da1oU25hgH7TwrVGu0tM5rYRWjtDT4m39/xehI7nAHNAczyeTsoE2H
08u6+vvYlble7i7P2dI6i7Hyw7+ilZdqeZm0fzTA0obJ6iMe6G/8TrEMevSY
YP/JZ96plfRhxTItrzLiwaxL8/QxWfjticLpvZcR+ul7ltma0ZIlKPhdrQUJ
zlusLnROauZAlNKxsYe5XpvN4otb2sU6r0V+AHZdczJ2PbX6iIe+a2nlXlFx
Pl5+CVEexvh6rkSI/KiPjtkT3yhViOeeZrVGS6t/AtfxlDIBVO1x9ID7mcQa
+pIRjzVX/8mKEQ9xz+OGwjNB2UUPhhZWRMNofbuSncyxAUm1fbBsmv+k9IRx
FOFOTXdry434A594FDwWQOh7kpSDNd+a3DU+H46F3XPnatgnVjlPJoc1Ockg
YW9JQEjapQrqkhXRzGtpZ8Os7PNpsFIBQ3XRbom4DDQI5hqQQY03Ivx97EKJ
kFyqRBrnoJuFb0j2pUT/g35FXerF3stHPOz+Pv9R4bUmhZ92MXPEU6TymTl9
DSsSj99N3vqOfRj6EdW689JPne4RD33X9lFyshKt3YKJYU47UoobBtm9JFJ2
4Hrnsj4kr6dZrdHSq9RIc62+YqAs+fAzVsweinrH70Vs/Tg0504PGxaPtpGu
2GICq1l03v/P3ntAtXXmCd/nfHvOt/t+O7NvNjNpvDuTTTIpO5lNJpO2eVNm
nOYKThzbCbg7tuOGsY2RbYoBgw021RRTbQGiY4pFF0UUmSJAIAOiCxAIBOpC
vXC/eyXAQoCDIscI8/+dxId7dcvzPPfenx495f6X6CxeHmBp6+ThvYdYf5nH
FVenE8e3btjiW1rWL5CbVp6xHrEleg8lI7TkZJ/Zfhys93BU0F9W6rtlw9bj
J9CNZ3qXNJqZiIrzOlD0gQ5dXd2c7HacT6xkjMjli+2r0yDC7hxX72O7tj6s
93CRfXsVgl7Sgt5DWkqM37lNm47MP9QyLa3vTnL3u+R6wclu3Xe4W7H3RiTz
foYsmoXFsl9v2gIs7yXmBB98/eN9LhfcDfEM/SMT0pomZBNNJD8fd0fnI16u
Hh6njx71z6T0Y7EaaXfT9+z47qQbdk2cHZ18/NJahDJDlAI5nZoTtfs9/3KO
xNDVpJ6gd6cf+ts/dh886mI4+Ez0SVY7LTnq2pFT+7wuuXs5OTpevplxr3tO
J2wquaxiQb/kXIDFue5RpUo346XU1vbWLMczjljAXHJPg0nv4b5XP9vhds3N
09vZfuuuY96uOeiRlTpkqYJVq6b6W27aH959cM8hnNeDfmfJyL3YW7jv1tk5
XViy93DxfXupC3oP6wpq0j1nur8fHGqZln5Ijgz7LpWFBTc/3bT3EBvzw6xM
O37ayeWCoxfuwgWck/PNisEpC2dOgaWtk4e3eDjt/3H/iQO2tvbf7/ZJYxg6
fYwHUBk2NmcknoIjZqT57P7eHtvYMFJLrV5kMNLc4DoH2yByo6FbbZF9EX0M
2EZSjCc2em77dtugIM+DnoQYUqPJeLEF+zZL+c2LjMRrnj2v8aFmxyWWMLol
C8aPYflVKrDq4r6TX/3w03k0Id/a2p4JxzZGHoxpNCwuM/sLeg9nh2Y9wP6E
m08pNtoY2xgbBGZrGBI2MydRNMgnB+1z2G5rOmoROxaDctfbp7R3Nmg4lv20
M7sNo830PDgUm9qY6jl/XOIMojJPX0/3XSGNHH0j9tzqBUMNZ0fTYSWpUIgZ
pT67TwSkYoHcH5Qk9n13/L+2OPmc+fY7NBnHPGeu4EwTx2IFi435QzileDfs
BjUew4llsCT8jH5rW0/P06ev3Jp3Ty65b/MiI/GajW7guUOpFdq5HC11byyV
I+PSWCoLC27+hSPxsCNJETr+MjYe1OhmsAywtHWyvHZp4OFY4WyaX5VpNMt1
QduCg67Emj3JZVGWmnuyegvW2mbTLAuwtHUCln4UrF6Z/DLQ/FJit18M9s6u
ezSRx8HSVgFY2jpZwtKP7B1BawMrfMvTr4ohv90DPRzRz2+8HJZ6J9LqLVhr
e8vTsgBLWydP1ns8AAD45YClrROwNAAABsDS1glYGgAAA2Bp6wQsDQCAAbC0
dQKWBgDAAFjaOgFLAwBgACxtnYClAQAwAJa2TsDSAAAYAEtbJ2BpAAAMgKWt
E7A0AAAGwNI/h2Csp/1+XTtTimimFy7+ApRqxUg7idI1xOOrltzoZywt6aYV
ETMSSIYIg3r4nB5ytpfXFa9ZQuICSUyJwuhtBToVImwhJWQQi2hGL1HTv49x
wcY6lUzYkpYQGU+Yt/EvQKqQdJACCdXNw/pQfugigxRYTNPHTFzGvsvf2FzQ
zDKpqbkVZmQQLauy0nnFbgJ6FRoKA9LusWRmTuFHj1xHxt6Yivyi10vIjeIA
RphcMn4PmUxccDMseaSR4WZirJfX5ZnbyOQ9rjOvUPXyiiViF3Rhfk0uN/AI
AEv/HAM0YnpKUFrFBPYK2gWLvwCxTFifhruWU9XTu3QAh4dbWsHA3z67b8e3
br5UmVhl+LbA4h7u/+fn3vl4/RcbbW1t13/xzfaPDl9Pucecezv9tEoso/q6
fbtj39nbRi+NbyZ67Vr/zF+fd0in82Sz78mdiXz98Z/e32DpG3UWRuuuw++L
LZuJP/5wzNrYXH7BK4N+9l09pm/5XjZ91NS8lLmXvpqJlNNcl+V59rsvvrXd
YvQ2Tj0KTsNtp8PffjjvNchLIRrsqc6Muey8x9Z268zbUo0Djn+x8aW33//K
1nbTFtuPNuxxT09rrq0xzS+8EOzRs2YsrdOqlTKRRCaViMUisVQuU6hUUqFY
JBROKRTqOeFqlNIpiVAoFE+J5WrdtFop7azLSrx9LaFwQMyVaTQ6vaUDkstH
pJMCEbahVC5/sLtWrZBNoWuF6EcSmUpjVN+eO/Lo+Hhtiou/BZbWDmWdT7y0
c79b0Lbwbs6U4SQmfhAOUxODtr78gkNsThNbX/Gb1kxxusO3Bbnt33kp8XzW
0OxLb1Hz7N30Ty/9n5fPxPTz2IZ30OjEU+zy8B0v//X3/21rKjGNWiERsNlj
WKyhCZ5Ipn97LvbOTClfKOHxhUIeWw9PolBo0I2ZQ7ToE8/9HXc9r6hfJEbL
WisXc3ho6ah06KdS4RhXKOByOOMcnggtM7mAPT6G7ayv+OnmNlYqZTLhBHuO
SYH+pb6G83In9XGw0O8jrQ5dgyZQLORwBULeGHdKptIu8XU6a+njkZk9xmlG
5uJPTYxjK8cneHyZRjeNnqgi1fnkTx8fC6SODwlVKqysjEoDS3MXdhWe2RJY
OdA0xJndV58ok0uoEIt46Aac2YiKWJrFPLFUo9NI+TzDifXBnNgCuf7+NDmR
xvhYHTneQc62e1JY6LlMz9Obfctp8zt/+WwZltYqakO995/8Yjeeoi+dRcrK
cDMoRQjFY/tHR/d7Bd8GS//6rBlLT7AZ5DS34LSkYF9fj8sxuYTiemoSztMN
h4suJrUbIvyid353NT4sGIfD+Yb55HWI5R3V+JBrpxxPHnc84+YdUMQc4HZh
lvYKzC1IcvdAd8ahh8qjz72BbLidlBKNrsVdwOEC0usHZm9d4yP7uCbgYxx9
f6ml0ceQVezmR4jxjypPO7Uz6T5PKsPWm1hap1UNj3bEnnjpG398QwsW/EMm
5d1P2nkqrTzKP4bg51bMmnlLPGpplx//40OHg1s3RtIahvUH43bySpx3Bnlt
/6+tOFNLMxmkwJM2Nq9gcTs/2+WeVspBDO/MxO877b/r4LlzDjZ6HAJJJCa6
8fUTz/37M//0z7996vdv2btjQbA5RJ937EMJ1BYh+mk87hU73Em799//83u7
3E+HErJP2rz5CrYz+gsdTcfcxhUVaYRzn9nMseHkPjx99rybN+hjyr7jQ9H/
cKCTAq/i3rc7eXbnK9vCCdRh4eJlPGueLT+cPGucZmQuluu6P2Mr/7xux/6U
Pr6sGr/v63/89je/+effPPOntzYEN1GxsjIqDSzNJOwq/O9/BPo7ffqP92f3
XShPhFPq477rPTTRsxEVsTR77/BJ6uZ3J+3fYTixPjCqzclsEoO74ERM42MR
QoJPuaS2ybTqeV8H2K1S6h2UdP5H3I3zP2dp/caXnIKvRqUwpEr9998iZWW4
GaYViLIoaJP7NbD0Y2HNWHqcRSfGOZ4PSCOXlWVl4CODwxLzqppbqgjhQelZ
ZQwssIVyarg6LC+fVFzVWFNWQIhIrB/l9PXWFsdFhHmHJ1M629lSqbKPRsRH
XPS7mlHT2NxKJyUmRCWEplCHDcGdWzPz7xDw2ffotCZ6flxUcllRK3tq9siE
tNzs4kZ6c3VDcayXky/hl1laK0c4eX4+ibfv1N5vyYs/tC6gaqIf+5ZY+Ft7
JnzbhfCS0iH0l++ooCv18E/48pb7tXeuR7udiKQjU9iva+xXvNOH2z1zwvfs
TS5rHpWgP3y7G2qvfOtZkXDi490mDQJsalzy1e3bHOPTMvOIIeecXK78GNXI
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
hZN8hUanVfFFvLZ2uVpsWuudt6+28YZ3cPC3Ua2GzzgFF66FBpzJGTHZB/3q
YaXs37HuzzZ6Xnz9rY3BTdSf6z7UKOjN2a57f2fz8gvPPb3FwzunQ6E1FOy6
Hzd9+dlu5x0+hPvsjLMPFkuHdXKZODtk27rPfv+8zfOv/unVb8+XDHcJtTqs
rEKO/OsHB/dtePt7H/fL3vG3L9ngKtjCmQKY5rSxso6/ePZuwf1JdFE2eK8l
3O6roIaa/nnXXqsQi3gc9kBTZ+UNh12xROrwvMZkNbMq5pr/STd8F7crbttP
AWnRtRNaZFozNd4dvuFoUEZ8cVkDKeH7c3m9w6MVIReSEm4llLZkXfQqE4m5
Dy8LYDUAltaDWjov9pTL1Tv01kGhXKURsTua090Cs1tb+yeEvfca81PcoigD
U0rVz1ja76pPTGRJp5A7LmxMuOGfeLv4/jCqBbm4O88z/g6J1MoWjnaxqmIv
nvZNsNjSXEbJ3fOvbvbKz6/vY1MIKdec/7QnhcpHa6r0Er8Q763XMtljTLZA
olBrEGZncdL5Pzndbu2ms3nYqsdnaa6Yf8dnz+u4uFISUzhMJUbZ78ER+Z2m
+pi3r4mWTaT9gGkdKmrexDhbz9j4+KREpfq5pmkm6RrBZ5tzJqub2YA/4xgc
QijloDlKxtk8v+lgSFjZIE88zGMnuzxYVMjE4xSfNw9fCgnL72TTK1tjf/rT
d5EJjahL0bLyPvhvNp9fKs6njYvasvPmW9pEyybSnoNT6uO+6z2bNz79y67Y
0r5Jvko770uMHu/n7rHpXFaXVKggnf3mkN/ZxCYOIpPyGpN2/sfOi3HxdeNs
WlXC0fXfn7PdeCL4VkJSVW2WfVTH2JTa+pqAALMBS+tBLV14++zVlBbu6BR6
XwvGGOQsr6tpNP2icnCgkRjmFk8elvLVD7d0+K24wrJB9Ae9CpHU5YbGpmRS
6FMyhbi9wNcnvex+O0+DaHhTLFL0Ob8MSy3N7i6P8/jrp+cLBhl8LSKlNaT7
f/v64VttglEFszri/MmN323G07kzHVXjvZVx7u/+9e/XSLWD+i7BRVo85ni0
llaqVUwG9frVA7tP7dx9AnfpwOV8yoB8wWnn7Tt21+V66HWXu2OzH0Z4BQfb
RjQvWV5m0EcOOXLgtede+WjLhk1fvP/Kf2495n+rA81ROs7mwzPXistYan0G
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
ZXCKPN7xKHrQ8qyf1lcTsTMkIgBftrjDjZKxqKXppLSjZ45uO5fFGhhtSXE5
c8krBU9/2L5SJqUpdNOm0CaKoXK5xHfHL0KnEDCLTr5wLjghgdJZnxdz+auN
AfWT/VOopffuemv9ziQWT6pFEJNFNSPbM/jU7CI99spFt/Wns7q1Sg1m6Y+3
bznrVsyZaUsPSA9cOLtGJ5aw7wV/eyHrXvuCz4TDVELwRpvXX7SxsXnmL3ZO
Lqm9Mi3WVjbTpv3Gp39xiC3tHJvUd61yGVQizs4eZ2eHiyckpdRUJv+QMMAa
mRBwuXzhlHR+vyTwBLOqLT0tHxd13w0IKmns7aNXFxQlJJeyddjNO1xNSgnG
4c65nHN2PHo5saa3X7qopTVKXXdldHRGWkUDV4e1S2tai8Oj0gyWxkybhw/z
xeGcnc+g/4fe7ZdMqpay9GKHiojLyKhtFaGWrk/DXc0o62QIdci0UMqtTXIJ
yMVStWTWlmFpZnthxJkXN1whj/dJ0C8UBi03+OB/7Axr5A3JRu7Fnvlpwz/e
9KGMz1TYuf01sZ4f/+FFp6wSg5Z1aq1CxBEp5kZxGKb1nQtNjKthSUd/maXV
ChmtLtP10AsvfrPhq69xyTFkttT01/ljszRXNJbp8crv3njq6aefff653//7
88+/eCBt7P4kqmWX0/84Hd6tncLanEwW6cVXLuLWzy6q67I9L5xa75bEUkq1
qKV3nT8enTWknRmXIpFJFs5U53aOF1x4/UQ6sW18wWc6rUommTSM8SgmuJ53
tvVOYSGoqGfGhww0dZYGOfzlQpy+a1WnVsmFXJ6QyxVKO+7eLQ4JTK9rubV7
92E7u4MuN/Hz+yWBJ5hVbWlENyXn0XODostrCrNyC1NTqvtlSs1QdUE2MbOw
6h69nlqXFX7makZVT+/UopZWK3XG3YVGvYejk1JGKR6fl19V30ivKr+beMM5
mLigtcTI0ksfSmCw9LUcLBnoRyaLi7MMS/fSiTeOP2sXeM/QyGm8qBAMtzfm
xdy4dHj7thB9i4daxh/qqshMuH700B5frMXD9MiiqYnSyHV/ev/Nd9/+ZL3t
13//6r2X/uWl9z44g09dpHFhKUujjPdW3rjw2v/7h9+/94VH+Z3OhS2oFrV4
mAN6onSczYeHT1wLSMW6CgpLSLQRhViJavmC8+cucYOIdMbSy1lUSjWopfe5
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
acAswNKAuYClLQQsDZgFWBowF7C0hYClAbMASwPmApa2ELA0YBZgacBcwNIW
ghZgSkqKBgCWh0gkioyMRC290gkBVg2VlZVgaUtALR0fHz8AAMujv7+fTqej
ll7phACrhpycHLC0JaCWJhAIUgBYHlwuNzk5GbX0SicEWDWQSCSwtCVAuzRg
FtAuDZgLtEtbCFgaMAuwNGAuYGkLAUsDZgGWBswFLG0hYGnALMDSgLmApS0E
LA2YBVgaMBewtIWApQGzAEsD5gKWthCwNGAWYGnAXMDSFgKWBswCLA2YC1ja
QsDSgFmApQFzAUtbyEwBTusQGRfh9SDSiZVOEWDVgKUBcwFLW8hMAWqUyGAl
0hyDsO6tdIoAqwYsDZgLWNpCZgpQNYU0hCG5B5D29JVOEWDVgKUBcwFLW8hM
ASpFSIU7krIFod1e6RQBVg1YGjAXsLSFzBSgQoAUnkDiPkKokSudIsCqAUsD
5gKWtpCZApTxkIwdSPgbSF3wSqcIsGrA0oC5gKUtZKYApRPI7c+Qa79Haq6s
dIoAqwYsDZgLWNpCDFEAZBMD02FvTPv8L1Wpq1QiXOm3hgPWC0QBAMwFogBY
CBZRKy5u6D5Fe/0F7dWnBDmnBrtoKx2BB7BeIKIWYC4QUctCsOi0ifHakSYk
6q9I8B91FZc04rGVjmYJWC8QnRYwF4hOayFYk9Htm0g/CUn6Con9ACF7YTMQ
AWAJoF0aMBdol7YQrADjbiCMbCRnLzZeGrX0WMtKJwqwXsDSgLmApS1EX5eO
RIZqkKZoJP8oZulhykonCrBewNKAuYClLWS2AKcRrQqpD0XInljrBwAsAVga
MBewtIUYFeA0QidgloZXeQBLA5YGzAUsbSHzCrAjA7N0W9KKpgiwasDSgLmA
pS1kXgH25GPt0k3RK5oiwKoBSwPmApa2kHkFOFCOWbo+dEVTBFg1YGnAXMDS
FjKvAJmVmKXhhUvA0oClAXMBS1vIvAJkN2GWrvJe0RQBVg1YGjAXsLSFzCtA
Dh2zdIXbiqYIsGrA0oC5gKUtZF4BTtzHLF1+cUVTBFg1YGnAXMDSFjKvACcZ
mKVJuBVNEWDVgKUBcwFLW8i8AhQOYpYuclzRFAFWDVgaMBewtIXMK8CpcczS
dw+taIoAqwYsDZgLWNpC0AK8ffv2qJ7x/jYJ8aws1X4UAJZgeHi4pqYGtfRK
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
1vEqU/VdmJ4aiUdwWqfud5hlBhtMrpdYPOk3Lijbj5x79xfbP9x+5tzgsNi0
aPZduB5UWQIyoy+tJFObcNE1JnUMXznYBs2CGRomDKnt/Lihekjz8CddEIbB
Lw4s/XHF9PF2RdpfEIRGnzXL956XfnIuzbb73MJ7FXPbSmbTVh/wOuwD8dXh
ZtmbZ3jf2VoHVoFEH9vTs6dOfKJDCVshd7F2RJ9qKbrK1jVtAW+A9BQm/9U3
KC6zKwQ1Y8uY6t2iMaga9tYIFAaPypJ+fyhbvtIFRZQ23Y4pM2TvTJcqldtV
27E25SfnFkCnrxdPP3Vo+MIJ/mZ752tnBB9WYkvXqhI72CSHandVIUPEWzmo
g+/lwneU2toE5t7LgszRBfuk3MmT2p891Je6wX3X1rqqfgVPZl/1hyE1+NSZ
tz+kbpq4Vl98RZVGT/2QYnvZxJm2Od6CBaL6VZE/7KN3BK+jjUVp9sM3O3tJ
5t2TMjzBx946RpbOhlvC0iEnU3ax2gdwIcWB7biWonqQxcP4ls/Eps+yM9/C
+atNQpT2VXBrMCyPhXFQ5CpsC2ziSKz+cWfVUzNHHzBIxm5snJlM4rx/ZncY
QrsLm94erB2Qv1c8tvXY4ME64agEomUnBMyXb3yFE2IkkFUr33T51jxprBzS
XfOyGqqAbUWTt79YDaE7WOX3u7v31UuuI8Zb+3aqU/Hk/t67Xqn72vNVP9zW
8EnNzImO9NXQDdkKO5XvlvC/+VJN6gQf/bT7aPNCzbAOgtJVJdY7Yx1buom8
chOp3XKjz+AIrfyOYAPvXWk23aVqaOkG97HBw+enDTZfrm/nxeIJpy88s2g3
2P15uBRKneCeE1Vk6Wy4JSwdjzKvkYnK2EITG9nL6h7C5RR9Zhx4bpxig7tY
1b2s7Edsqgg9nNrfNI2N2Cujbth5/jwum2uaSiNzMH/jU6h6yTlW+HW22Juf
M1u+PTpvtrlztaZYIpm0e7FJBxTEFehfPNz7gy1lD25vOdEinl50pkJZiPcm
ZM5rxtKdQnOqlTVtTLtyK2hT7m2Qvl4k/NE72KRz21KDwEvHx/afX0i7/8nO
xcpBLfgzfQwvskD25vXetHH4otkPJwh6hAKcWbSBMO//uO2xT7mVvVKXL5yL
Il1JHr7B9QVOsK2zmyydDbeEpVfit6CNT3yFGfnY5UPWyrq2MV4BrtjFfRM1
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
J+o=
    "], {{0, 567}, {482, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{482, 567},
  PlotRange->{{0, 482}, {0, 567}}]], "Input",ExpressionUUID->"1ba648b6-e09b-\
4145-9959-6eede2f26591"],

Cell["", "Text",
 CellChangeTimes->{{3.7712558307126646`*^9, 3.771255842970681*^9}, {
   3.7712562268437834`*^9, 3.771256233640244*^9}, {3.771270816807063*^9, 
   3.7712708242301702`*^9}, {3.7712715372466917`*^9, 3.771271539871973*^9}, 
   3.771272339741582*^9, {3.771496064075738*^9, 3.771496065106739*^9}, 
   3.771933202933072*^9},ExpressionUUID->"2e811f54-5083-4588-9785-\
ad4b1269d071"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Creating and Training Augmented Dataset", "Section",
 CellChangeTimes->{{3.7715030094361486`*^9, 3.7715030108979225`*^9}, {
  3.7719332331576023`*^9, 3.7719332536087837`*^9}, {3.7719332971285048`*^9, 
  3.771933303700573*^9}, {3.771934205094285*^9, 
  3.771934226461215*^9}},ExpressionUUID->"d6e80e80-686e-4d38-8ef9-\
a700c5c69ef6"],

Cell["\<\
After training with the regular dataset , I needed to train with new data to \
prevent overfitting and strengthen my network. However, I did not have \
another dataset with different  blood cell images. So, I created an augmented \
dataset, which takes the images in the first dataset and makes slight changes \
to make them appear as different images to the neural network. I trained the \
neural network using the new augmented data. I used the random crop \
augmentation to change the images slightly. First I increased the dimensions \
of each image by 4 pixels and set the end dimensions to 135 by 135, so that \
the random crop would be able to have freedom in cropping each image but \
still adhere to the dimensions of the other images. Once again, I used the \
NetChain function with the same layers as before to narrow down the features \
detected.\
\>", "Text",
 CellChangeTimes->{{3.771934244812313*^9, 3.7719345707971487`*^9}, {
  3.771934614932356*^9, 
  3.7719347170490236`*^9}},ExpressionUUID->"027e860f-7f2f-4800-8889-\
beabe4f1b660"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"augment", "=", 
  RowBox[{"ImageAugmentationLayer", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"135", ",", "135"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", " ", 
     RowBox[{"NetEncoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Image\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"139", ",", "139"}], "}"}]}], "}"}], "]"}]}], ",", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", " ", 
     RowBox[{"NetDecoder", "[", "\"\<Image\>\"", "]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7712562353385854`*^9, 3.771256364708371*^9}},
 CellLabel->"In[68]:=",ExpressionUUID->"cc7d1f53-1959-4706-b13e-835169623fc9"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["ImageAugmentationLayer", "SummaryHead"], 
       "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014705882352941176`], {
                 RGBColor[0.557, 0.557, 0.557], 
                 RGBColor[0.33, 0.33, 0.33], 
                 Thickness[0.015029411764705883`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 18.5}, {14., 18.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.557, 0.557, 0.557], 
                 Thickness[0.015029411764705883`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{52.5, 18.5}, {44., 18.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.85, 0.85, 0.85], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{22.23,
                   18.5}, {33.5, 29.77}, {44.77, 18.5}, {33.5, 7.23}}}]}, {
                 FaceForm[{
                   RGBColor[0.56, 0.56, 0.56], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{33.5, 30.29}, {21.71, 
                  18.5}, {33.5, 6.71}, {45.29, 18.5}}, {{33.5, 29.25}, {44.25,
                   18.5}, {33.5, 7.75}, {22.75, 18.5}}}]}, {
                 FaceForm[{
                   RGBColor[
                   0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}}, {{{53.56, 15.4}, {51.88, 15.4}, {50.52, 16.76}, {
                  50.52, 18.44}, {50.52, 20.12}, {51.88, 21.48}, {53.56, 
                  21.48}, {55.24, 21.48}, {56.6, 20.12}, {56.6, 18.44}, {56.6,
                   16.76}, {55.24, 15.4}, {53.56, 15.4}}}]}, {
                 FaceForm[{
                   RGBColor[
                   0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}, {0, 1, 0}}}, {{{53.56, 21.83}, {51.69, 21.83}, {50.17, 
                   20.31}, {50.17, 18.44}, {50.17, 16.57}, {51.69, 15.05}, {
                   53.56, 15.05}, {55.43, 15.05}, {56.95, 16.57}, {56.95, 
                   18.44}, {56.95, 20.31}, {55.43, 21.83}, {53.56, 21.83}}, {{
                   53.56, 21.83}, {53.56, 21.13}, {55.04, 21.13}, {56.25, 
                   19.92}, {56.25, 18.44}, {56.25, 16.96}, {55.04, 15.75}, {
                   53.56, 15.75}, {52.08, 15.75}, {50.87, 16.96}, {50.87, 
                   18.44}, {50.87, 19.92}, {52.08, 21.13}, {53.56, 21.13}, {
                   53.56, 21.83}}}]}, {
                 FaceForm[{
                   RGBColor[
                   0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}}, {{{13.56, 15.5}, {11.94, 15.5}, {10.62, 16.82}, {
                  10.62, 18.44}, {10.62, 20.06}, {11.94, 21.38}, {13.56, 
                  21.38}, {15.18, 21.38}, {16.5, 20.06}, {16.5, 18.44}, {16.5,
                   16.82}, {15.18, 15.5}, {13.56, 15.5}}}]}, {
                 FaceForm[{
                   RGBColor[
                   0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}, {1, 3, 3}}}, {{{13.56, 21.73}, {11.74, 21.73}, {10.27, 
                   20.26}, {10.27, 18.44}, {10.27, 16.62}, {11.74, 15.15}, {
                   13.56, 15.15}, {15.38, 15.15}, {16.85, 16.62}, {16.85, 
                   18.44}, {16.85, 20.26}, {15.38, 21.73}, {13.56, 
                   21.73}}, CompressedData["
1:eJxTTMoPSmViYGAQBmIQLd/6OnCHnLaDx8MqkXXspg4MINCgA+efPQMCug6H
v2rE9B8ygYgf13MAa3M1gYrrQ8WNHdJAQM3AAcR1V0TwC225ri8uMILzwfqY
DB2qgcoe/tJ1MAaBzfoOMPfA+GBtezXhfIg5GlB1Bg7fQNaXqjsAya8acwwg
5lWpOcyaCQSShhD1H1Qh/jqA4MPcA+ODzbtnDHGXkwbc/+jhAwASgHiO
                   "]}]}}, ImageSize -> {40, Automatic}], 
              GridBox[{{
                 StyleBox[
                  
                  TemplateBox[{"\"Output dimensions\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox[
                  
                  TemplateBox[{
                   "\[Cross]", "\"\[Cross]\"", "\"135\"", "\"135\""}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Reflection probabilities\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox[
                  RowBox[{"{", 
                    RowBox[{"0.`", ",", "0.`"}], "}"}], "SummaryItem"]}}, 
               BaselinePosition -> Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014705882352941176`], {
                 RGBColor[0.557, 0.557, 0.557], 
                 RGBColor[0.33, 0.33, 0.33], 
                 Thickness[0.015029411764705883`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 18.5}, {14., 18.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.557, 0.557, 0.557], 
                 Thickness[0.015029411764705883`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{52.5, 18.5}, {44., 18.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.85, 0.85, 0.85], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{22.23,
                   18.5}, {33.5, 29.77}, {44.77, 18.5}, {33.5, 7.23}}}]}, {
                 FaceForm[{
                   RGBColor[0.56, 0.56, 0.56], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{33.5, 30.29}, {21.71, 
                  18.5}, {33.5, 6.71}, {45.29, 18.5}}, {{33.5, 29.25}, {44.25,
                   18.5}, {33.5, 7.75}, {22.75, 18.5}}}]}, {
                 FaceForm[{
                   RGBColor[
                   0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}}, {{{53.56, 15.4}, {51.88, 15.4}, {50.52, 16.76}, {
                  50.52, 18.44}, {50.52, 20.12}, {51.88, 21.48}, {53.56, 
                  21.48}, {55.24, 21.48}, {56.6, 20.12}, {56.6, 18.44}, {56.6,
                   16.76}, {55.24, 15.4}, {53.56, 15.4}}}]}, {
                 FaceForm[{
                   RGBColor[
                   0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}, {{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}, {0, 1, 0}}}, {{{53.56, 21.83}, {51.69, 21.83}, {50.17, 
                   20.31}, {50.17, 18.44}, {50.17, 16.57}, {51.69, 15.05}, {
                   53.56, 15.05}, {55.43, 15.05}, {56.95, 16.57}, {56.95, 
                   18.44}, {56.95, 20.31}, {55.43, 21.83}, {53.56, 21.83}}, {{
                   53.56, 21.83}, {53.56, 21.13}, {55.04, 21.13}, {56.25, 
                   19.92}, {56.25, 18.44}, {56.25, 16.96}, {55.04, 15.75}, {
                   53.56, 15.75}, {52.08, 15.75}, {50.87, 16.96}, {50.87, 
                   18.44}, {50.87, 19.92}, {52.08, 21.13}, {53.56, 21.13}, {
                   53.56, 21.83}}}]}, {
                 FaceForm[{
                   RGBColor[
                   0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                  3}}}, {{{13.56, 15.5}, {11.94, 15.5}, {10.62, 16.82}, {
                  10.62, 18.44}, {10.62, 20.06}, {11.94, 21.38}, {13.56, 
                  21.38}, {15.18, 21.38}, {16.5, 20.06}, {16.5, 18.44}, {16.5,
                   16.82}, {15.18, 15.5}, {13.56, 15.5}}}]}, {
                 FaceForm[{
                   RGBColor[
                   0.43900000000000006`, 0.43900000000000006`, 
                    0.43900000000000006`], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                   3}, {1, 3, 3}}}, {{{13.56, 21.73}, {11.74, 21.73}, {10.27, 
                   20.26}, {10.27, 18.44}, {10.27, 16.62}, {11.74, 15.15}, {
                   13.56, 15.15}, {15.38, 15.15}, {16.85, 16.62}, {16.85, 
                   18.44}, {16.85, 20.26}, {15.38, 21.73}, {13.56, 
                   21.73}}, CompressedData["
1:eJxTTMoPSmViYGAQBmIQLd/6OnCHnLaDx8MqkXXspg4MINCgA+efPQMCug6H
v2rE9B8ygYgf13MAa3M1gYrrQ8WNHdJAQM3AAcR1V0TwC225ri8uMILzwfqY
DB2qgcoe/tJ1MAaBzfoOMPfA+GBtezXhfIg5GlB1Bg7fQNaXqjsAya8acwwg
5lWpOcyaCQSShhD1H1Qh/jqA4MPcA+ODzbtnDHGXkwbc/+jhAwASgHiO
                   "]}]}}, ImageSize -> {40, Automatic}], 
              GridBox[{{
                 ItemBox[
                  StyleBox["Parameters", Bold]], 
                 ItemBox[""]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Output dimensions\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox[
                  
                  TemplateBox[{
                   "\[Cross]", "\"\[Cross]\"", "\"135\"", "\"135\""}, 
                   "RowWithSeparators"], "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Reflection probabilities\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox[
                  RowBox[{"{", 
                    RowBox[{"0.`", ",", "0.`"}], "}"}], "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["Ports", Bold], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]], 
                 ItemBox[
                  StyleBox[
                   
                   GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                   "CacheGraphics" -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85]]}, {
                 StyleBox[
                  TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}}, 
               BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 3}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("ImageAugmentationLayer[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.771256989766178*^9, 3.7712569902035756`*^9}, 
   3.771500718336629*^9, 3.771502930295836*^9},
 CellLabel->"Out[68]=",ExpressionUUID->"36dd40ba-93f8-4787-97ff-9093f4865d12"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"augment", "[", 
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJztfWlwXNl5nSv5k5/5kVT5R+yyKlVxuWyr7HjPr9ipSiwvkS1LjuPYSWRL
sSXLcknyJmuLLMlxFI+kGY00KxcAjW70vm/Yd5AASZDYuYEgSHAHsXCfkayc
e897B18/UCNxxBEo2V2Xrx4azUb3ud8933q/+6bf+5O3/a9/8j3f8z0f+me4
vO2df/HzH/zgOz/8G/8cP7zj/R96zx+8/93vesv7//Tdf/DuD/7s7/1TPPki
/n0C/9z9d8fjwVTPXn+Ef7iPOxP1vf4I/3Aft8dre/0Rvjsfr0wP3DvSe2ey
+9ahxq1D9e2J2uZEdetQbftw/dZk4/bhBp7ZHq1g3B6tYWyPVt34x7XwOB7b
402M24d67k71bI5VMLbGa5tj1fWR8s1Rd49BwG+N1TC2RvBjfWussdcf/Lvh
ARgxNkfrN4erwHl9uHRtII9xfagI8G+OlK8PFjaGShibeMFIbWOogpuNkX8k
okd+QKSBJ67gmbuTfbcmuiH2AB/IX+nNX+svXh8oYVztK1zqzmLgBuO6Hzf6
yuv9lWv9ZY6rfaUrve56faCyPlTZGK3s9Zd70h8gdtA1BsAH1UCAHW7+CuQx
LvfkCDsG7teamdVaeq2WwbjcyF1p5i91u3G5B7NTxAD+mAjiv9df7kl/AHBI
+6YnbQo85ByYU9SBLRBea+YuNrLnqymOlUp6OZ/AWCkmz5fcj6u17Go9h7HW
LFzuwTLBO5RvDJb3+ss9oY9bh5vbhxpbE3XROwQVA4gBOoj3hbobQP5iNX2u
nDpbjJ8tdi2XkriezseB/Nmcu54rdOEZvGClmsO44PDPXel1c4cZvAE1MVLC
2Ouv+2Q9wDbgFowQ/DqIAqCBQADgSiV5vgrwcxDpM4XE6ZxDGFd3U0hhLBfT
uJ7JJzFwc66UWSlnz1dy+F8AHxQE8DGPAP/GSBGW6l5/3SfrATMGyEPgQ54p
e+SLFxt5AA4JxwCSAPlU1oGPG94vpTsXUzE8g3sOTgp+C/Dxf0FQmEEH/lAR
dhHAh4Ow1193Dx6vnBjAoLsEG4ZyTsBxD8kEMwBzUjrUKNjbM4wjFgzcQLAJ
OHEG7PNd7bjiGYyTmbimAK+E/Pv1kgH4mFDYqJT8f5jg3z3ac3+6D76S5FyY
QzJhulxspD3mSQywOgA/mY1xnMp1knAA7EKyA5hjzMYP4gqcceWMUOxJPhB+
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
0jMzbfsg/ACf0zcf5p0BPpB3wxj/lu0p7cFK8TeRbbzOWUi3u8BOLrZS6ggD
a0FUk01IaORHcrju0ISgpXbOBdZKKRjVFnwlngijFV3r89p4viwfwqso2aLZ
ubMYbjzU/50J+zYQcIWIFz13qcxbWU4v81nQCKS659OfPPiu33/ht34z8c53
lt73vt6//HD/Rz828IlPDH36UxNP/d3UF5+ZfO7ZqRe/PNO+HwBa69HzSdts
Yj/BNzFP/gouWCfAB/nQj6a2FfjSvEuZDjDPajl5wdv5Ah8KFwIPxwqwM7AG
O//WoTpPxrkxVLw2WGEa8Uwxha98wvtT3GNua2JtWMAmsBh+V429ImYq7ZPT
tGQ6tdric+sdyy+WOnBzlEmey2fZhN/VV3jb3jXdKuTOphKTzzydfN8fPfWW
X/rbf//zX3rLL7/wq7+679d/o/ye9zY/9KHKhz5Q+6sPD/ztZyae/cLUy1+G
ca7mAM6qwWcDbviLIPzEftGOjTzQraAvoP1cPn0ZFP8E7cWyMcbzYWpe6kkz
e07w2WyQdSMMMtw+7BrzurNKh4puv209aGBOx1+2pU3q2WJ7m0YX/jbmII5S
MF9xY1MtvJNVse6bcu583vVnTiZOp5PUszDsYd5jrDXKp5Ndc/v3933yk8++
7e0f+uE3/9kP/fDf/PTPffonf6r9bb9R+8M/jP/O737ul97ywu/819JH/nzo
c589uv/5owdfxIqmwXMafwI3iXawlmhn91YghXrkFPuNom1L2cAPCk4p8iX6
/tSPpD8Ks8A9ieAcEo41cljMxhZtrmdgI8OmLjQthEakrmCmdY/JXNj+QvV7
kYiltICGIsOK5NigqBRKENLxEwHwl3OZMxnH9ou+69FpV5VdutbdWIx1nPjy
8z1/9fEv/sqv/eH3veld//J7P/JDP/o3P/mzbvz0z/3Fj775g2/+0ad+7a3l
j34Ykn9k33MAfykdbO0PuuEl2k6HHpYFnzLfGoKWtelORhD4S/5ATO5JhORf
bKT9aYyuRNlVTIWEb7cFMZLPU5KvDvgzLFyJbIbe4u6YpI0k2xrCebNtM5Jp
ldOkm6Vgd9uO2GumtGqWwuYAkn83MsnFVGisZhNgnsvd9fWe7pVUavJzX8j/
8Qeef+tvfuzHfvo93/v9H/hX//qTP/LjH/+RH/vj73/Te3/gTX/5kz/xzDve
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
     "], {{0, 154}, {127, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->Automatic,
   ImageSizeRaw->{127, 154},
   PlotRange->{{0, 127}, {0, 154}}], "]"}]], "Input",
 CellChangeTimes->{{3.7712563689510765`*^9, 3.7712563710518136`*^9}, {
  3.771256462831691*^9, 3.771256464467479*^9}},
 CellLabel->"In[67]:=",ExpressionUUID->"85f9ae13-3290-43f8-83d4-e963e25098ed"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJztnQm4bldZ3yOiooKiouLQVjvX2kk72MrZn3YebGvVtnYWq9a2trZqq7bW
J3NukpvkBpJwE0IIAUKYQkAIYRAxYAgYQhICJkwGCCFggBAChil0//bJ/+Z/
Xte7v3fdfW4u9/Lt5zn3vmedtddee+213v96x/XtP/6zP/RTDzvmmGN+/hHj
Pz/0+F/8/p/7ucf/8g9/Kb/85ON/5ru/62e+eCRPeeAHenNtriPl+vi9vzC8
/tq/P7zsqu8ZTt2zZ/jAnT893HrLjw4nHH/89P9vvfZvT/Rbbv6RJq06xx17
7IFy0b/56u+baG/H6Xe+499Oz+a5777tx4Y3XvcDO9q/7Xf/w+rKl/yV1bMu
/ZOrU/c8YvXOd7xj+O03vGGqc+MNPzi1f8bevdO9/K5y9UF1aJ9n0T7vR9kL
r/iLw+Ee+821uTbX5jqc18gLH8fPccce87h333bbSL/6wM/TLr54+qHcaf0t
0qrziY//r9Vvv+Efrl75iu9dHXPMsavf++B/Wb3t1n810e94+7+Z/gb9u+/6
96vr3/iPJ3rkz6s3vP4fTPTb3/avV9e+7u8dqD9ixCxN/ayO2lQ5faPtq176
16byESNWr/6N1USP2HTgubf8zr/cQavNt77ln6+u+a2/M9G3v/c/rt580w+t
PvLh/74aMWfCKh+3Xnrn+D/4XQ73HNlcm2tzba7Ded3wpn+6es6z/8zqqRf9
4dWnPvnLq+t++x+tfuNVw2rcz0//v+iFf2n1obt+ZvWaq//m6iUv/ssH6F97
0XetPviB/zzx+Cte8BcO1H/B5X9+def7/9PqVb++tbr8+X9u9f47fqpJU1/3
qp1RdtjRzt0f+dnpWS/+te9effhD/23EgO+b+nPX7/3XqQ716U8sh6YP4CTt
8F5g46+/8nETLul9D/fYb67Ntbk210NxHXfssY/Tj5efdOKJk+4IfdH5+x+7
OuH4h60+evfdw2mnfvlq3DcPb7r++uHsfY8e+exdw9vf9rbhiU/42unv/O2c
J37d6mP33DO89z3vGZ5w9teM+/UPD7/7rncNjh2//4n/fYD3sp+Hn7OfF68G
R6Dh/9SHzwtrVE4dZB3VAS/AEeEONHyecuEC9woXuNfxQljDs/y50GANuANN
P+kz7ajPqvOxe35ukk1edtX3rN77nh+f/gfX9p7+lSvG4y033zxAM06/89a3
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
StxiJlPM9c3Lne+5XuhgMSX6DsW+qc8t/+EK1kR5x7+X+9aq3HVcjk2OF9nZ
Ll7HzxTz82K8PPNJy2JtsrymFdkh88vKchT05EbIbDFxf5LFSLZsK8IU5UyD
L0mXgsyiuHt0YspFCdb4mcjuMyZ/Y/FA+RW3cr/I95j23c7iOjHFudAu/mMe
/0K7vDd263FvP50h5rz6SMkzxndkDFgjyCDwRMZUdnZht4+/ztVVzgTKMxyp
2OCy/BWaY9oLyV5Puc9D0Rl28D3FB5z2Opn+J/ONdOzIMKUip1Rkomp85Tpf
nYw/V2JzKv5j8V1cbmphQU9+qgrWaF/t9l/njS27RsXmUpFBMj7v2OSY4tiU
YZzjiN/rdaINqMXPWz66mY4xjueS+NMKvrRyi835Ezpvaem+HFOkP/G8Lo4p
whHndeJv0oPJ5uK+Ye5vLPlFvseeo5K9eUs/JvmFdiTjwHt5NryEOEDOGCTP
vvPqIwVTmNuMMXzAMcXPcZDPsOLfwVXK3ZdPmBL3Dy2/rLjnz/bG2ne5D6fs
+4rDZe5pvrlsMocjLdyp2NYzG8oSTFmiK+v1/6zEo2XfKHvfTFcW5Sbnty2e
4LTX8X1phjXOr+RL7L5M4kstO4XLC5lOqRePMtzJ5JRMVsrkpsweNJcroJWv
pmJPr+QoyOpX8mdmmFKRl30+xFyaLUxxf1SPu2/lqJT9hTo8W7mkqOO+Ycgp
Ov/LZRPHFC93mz73eu5KnsGau/WWW4aXvPjFw9MvueTzAlOyHMKRVt4AeALj
B39ARgNPwWnJg5JNlHdaOq5oH2l936jv6skp4fte7dnkSyw+5vHpLXnEeaDz
eZc7WnjRy/N7fcAy2aeCFxXd15LY+V5/5swunz0rs7dmsq3Xd9rrZzHyrvvK
/Kmy+I6Kb1Wm73KeH/14WzjSi3Fzsfw9ONKbk7m3ffcl9jpZfrYWxs3lk5mz
xym3Oc+KZ9YoB7JyhTmmaM8cfY8VF+mxeDp/k/027SieJeIL9hf5GM9hCnYF
+BD+tUeynMJ78z0520x5g8EUxlz5P5VHxXEkm8NzfjuV3CaeawIs4O/Ks8ff
oemj+2jRHjR1WrqpSnxKxRerV+7oxaOKbb0Sv1yJg67ErFXs/tm9WU6Plr7C
Y5ciXmR0C3dcrhHtOYp9HrZsJZndPLOPL8GUTAZZEoMZ5Qjf/1Pu8yTiSIYp
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
/b0ZN5dfWAv6pp5ra7d4eyUPVbYXXaLXOhQyRa+vb8X+kumgMv9tf1ZvzvkM
Ryqyj+cMzGwlPbk7Mr8jpyNGVPA3e991+r0os/eOVZbHYC7GpMWHJSPM6aac
94IpLbt/L6Zkck0F+yqyTMWfrSK7RT2Y5onjjmQW2VnkYyx84XnuD6bYPcky
klla/mBRZvH8xrLdgynKaSx8Ubyk/I1Vjzh14gxn5IsDei3JGtt2/gfxhVzz
nHX8gssvH5THkveGhneAX9DohsBCndEsW4nyccn+Lnnc48Jc59nKu5L5BXme
kww7eu3jmT68179rSfxIhe7Fst7+ZPcu8QGu6K967f6iM149F8vgGBHj11o6
sSxPVEZXdIOVe1v+DI7L3s6cf13lTBnXg8UzYlpjGP24/B1b9pooJ6pN98fO
YiQrMkWGNZk9qOL/FnWA7r/hc9txKrbpOML9rhNr6cHky6H8+dKJ8Qz3MXZM
UTwL38wxRbYVz5nv53zBr4UptCuZhTrwdrCN3yuYUrleeuWVw5POO284Y+/e
gTNf+Ab0w88xUe4axsLz2yhPRfTVjPlztO9atzeLmJLxvV4em+3/l9hEluRU
qdhTditPS6+ur9e/LvsuFTmr4nu8Lj4x6rWcN2b51Ss+opkPWC++ZFiT4UgF
UzJ5pyInZvWz8czs45HO8tVLJ1mNMWnJGpkdp4JBvTKL+5W1/JbjXshx2THF
aflduF8xdEtmUYwkNHUyfHGZxeWUeB6x/I39HEnFtkhO4XnCnvP3P5aziFNM
IW58lFFWH7jzzoF3kf8AeEW/sE2DoZKz5NtMvxWr6PHv8hMGXyjP8mBU9mkZ
nfHADGt6bSIVvVDFTrEkb0mvPJXJCJU8ML2Y2+tDW8nH1WtDafG9uFdxXrQk
l1SGQUvm8JzeaY7/R+xr9Sdrf24PkGF3him9sRsVP6uKH29mr4lYQ52INdm9
lbie6Ns25yfWGtsWTrldSTgSdV+iJdcoRlL1aVM6MepH270wJfMxdnxxWnxe
tnt0bfJFFqZ43mDHFHg/uUnOPONRB+5lj6zngn/CLOoq9zLPBR8p8zwqHsPo
uejnMKXXLlDZh7uPlvtuVXyoDoW+qPfeJfaRCuZmcl/FT7jXRl8Z293KG5b5
NVUwJauTYUrFNlHxPejxl275x7bia3r8iufko5Z+MvL/Cv5Wz9Vah+8VTKnY
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
e31xe+0OFZ7va7+ST7Ly7pVxczlF+3ntex2PWnVc95Jhjfc52wNU7CaxThbr
4b4fnjdpzq4dfX7i/ln9dz+0mI9I9hHtqYQdbhNxOvqqOZ+UXV6Y4now15XJ
3zXeG203rkOb25O4b17ElwxTMnkh0yNlGFGxpzvtbUqGcj1VlE0cr32sXMbM
7m3Vj7jpcpzT3s/MJ8Exxe0pmqsZplAezxGGV/MMxxFhjWOK7PJgSvT7cttK
lpvF8QVfYuYK7SoXJXWQj8AU5WNBpuGd1R/6APbRtuf1ko1DOOI6h5asHcuz
WICKbJLpwTK+mvkSV/h2Re6o+BpV9FcVPVhFb1bBX5dBHDscL5w3Oq29hNuI
qzib6W2y8clwx2UExxTZF1wWk5+MfDXjOdeuX5qLMxVPcD8utUN94Y7LgD4+
bgOSvyjvQ3+cpg7PQ2/gdhbZYmjHMYX2hH3U5Xfqq50oT/m+PdMb+Nps6YLm
/KBamJLhUUVGyOqrfe+n2+tdt+Y6OseF2I5jjeORY00mi2U6tHX6Ls0lz+cm
THEbfab7cl9il1OENbSj+BSeLRxhzulcFfZGmS9xFl+vfCx7TvmyqT/0gfGl
fXRi1JENJdpTJGdp7SgPM7xda1Y6E4/XmPP7aukh52zimT4/2w9n+pZMJ1M5
M32Jnb0qO6zT81QwqIJNjJX352B1XL16uUruhQqmROx2HZHsfeL/Ubcmmme4
3694SPQTi/YXt4N4niKPqXFcjnoz0c5bxLuEKTyXdUcf+Bt1KNMc4FtpD8w4
Meepw/vJL0gYxLOEQY5NLtcwN1rYIX4+5yuV+V95my3f2jk/q4rM4hjhMkuG
NRm+ZHJKa25oL6T6mU9a9l6ZDtBj5zNfYu0NeC/pi2J8SiuOXvou+DxzVDYU
5q7bU1z35TiS2Vk8NwvvTL773//EJ6YzHFtx9LLXs/ak+4p+X4xhtNE734g+
8y6bxDwJLb7hvKXX18vLM//byr0V20fFRyvrw27kjD0Ym47zYed7lZyf2bOy
bzRn6/Fx82e5bqT1Lt5n0c7npf+RHDEX89LSjXidLM6Xda2zs5Ufj3p+/qnr
uOi/74eZX+jhqQPNWuBZPFN7Wv5nDGmTcu1ReW/1DVp7Wt3Le4lmbPk77dAm
YyA7kfzTlH9Aa1B79UxnFW3fUY/k8k7Lt5b6c/v8it3cebvjiNOONZmuLJNf
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
xyV5RD5dfBv5cUnfpXzCjA2x7w/ovR5STMniWPBPFt687Kqrtp528cVb5+/f
v3X2vn1b4ztvYYfhnLlxrg3n738svgPTOIC17g8WdbaSr1v5jX1P699xbk/e
G8dd0Yn16vOX2Boq9Ss29yW8vWKbqOjKeuWXSn7RijzS2+cKhs7pslqYEuns
3h5Myfb/zicrOd4zPVtF3qno3DI8qtjZM4zI8oBVMKilB3N/5ujrUsk9m2FK
a88sTJENRXGLEVNkf4cPyqfL8UV5VIQdfAvK6D+8eOTdEx8WDV+GT5+6Z8/0
+6GwlRzqC7kKvOG8OnzYdHaxy3dRZyscaeU39v1n5EVOV2ISK7yuVx6p2Osr
dCXepOJP25vzeYmcsoRXL9GbZXMg04/1Yl+2F3UsaOlp5/RmFUyp+MFW+Hxm
Q6lgVvbcLN7Ty6NvcEvuyOSjDFNc1sh0XOvsJt6m53WJMTLy54m5Zyu5m/xb
uzwi32CnGSPPCel5IN1PmD058gh6LXgpfSJ2w+UOsAkZhWcfbt6/9MpkJXwK
kKtuvOGGLXJYClMcl6VLZBxatPDd45qjrntOLujVq1R4Vy8uVHRTvbq7DFMy
O0XvufAVrDwUmFKJna98r3U297l+9tjsIl5U7CaUu47d8cjnQAtTMrtGVifT
cWXyQmb77rXdZHEflXyPmcySYUoms2T8v6IP781Nl8kpztPge8KOlm+wztLV
2fGKWwRH2HvTDs8DW3hH8oXyLrRDOX/nHB3iTFy/lNGfz1fmJxAxBZsRGCzf
BsbTsdvlQafdniX/bfnMr+OlFZmlcn5KJgt7+5mOyOtUzmfJdDtZHyo+Br32
lyXnNvbqqSq5eio+DJUY/F5d5bp39DHP5Nyop40Y1JJTsr19tofv5fmZPJJh
SuVZlTbX6aAU39HCJpcvHFOIYXCZxfVjrbW2W7lMW2vfMYW/SQaRP5LydHl+
FccRfIbl64UMAu/j/chLzfk4b7r++kW5HI+Uq4Ip6P3wPVAuF+UNc7/rTGaR
TR86+uHL37iiP8/4vMu2mZy7xJ5SkTsqvLFyPnKml+u13VT8FnrllEru0Mxn
IPMn77Uf7ZYtLPMVaY1t9Ct2f2P3cZKvbPSnqtidM/5csYlXcKdXV5ZhU4aP
lbNOvI7GIeZ9zXKZVnLQrTvXbw5TXCZ1u4nneBSOUO7nxQtT0MXofHblB+Ye
+o78wZls5Erx+EGPWzwUse2H61qHKa+/9toJU/j2jB0yHb5wyg8mm5TGWX7a
0o/Jpq94Frd5Rd/jyHOyc5oyPlCxWVf2zL2xLZksk50j1ospFXtQ5oNd0e+1
fPKjDiob/4pOL4slyWJmM7k1e9/dojN5xMs9jk9nJs6dOZXpjiox4Jmd5VDY
YjJ9V4YpmczSws258fH5n+0PM3t6j40v7ge4V3U8x4Lvhz3GxG0lnl9FmEI5
tnj8s7gfTOEenuOY4jy2N5fjkXJlmMIZLfg+gynkn8Sewvh6zI7Leo4pouEL
mf1F+jHhi2SZSo7Kis68YqfotadnfDvLq9ybezl7VmXtZHy+In+ti/mKuFzR
s1V8gDPZpFcPtsTu1pJ35nyMHVOUM0p8EnrO1lDBl4puqiJfZHlXKnm3Mkxx
2Up0tIk4jqDb4D5y2krfxb3R11dzKTvPoqL78u/o+5PWOQi+n4FGl6Icue6D
5P7AwhT5CbfO89V5ItSBZ0pOIfcWeRjHPfoXNKbgQ/yg//O2HMf8kr80tiZo
xgw/OR9/xUvqTEmdU+zfS75hMc6llQ8wi2uLepheOpMvKjqoLPd+RTbp8T+Z
w5SKL0GGyxV7zRJbT2885hKf7YpfR4+/QYxniflbFCOpeO05vdDByimRz7sP
QObrW8lhUtFrtfRUmb7OfYPdv4ty4i0oI48tei2eCQYpPtH3VFGPnenB1uls
oy+fY0c8e1p+qpJH4EGKSYRPEUuC3IF+P569CI5Ix8XzdCYv/VCuYOIV2VMz
7pwxjaziPHY7f8rRhyn4EujHyz2HDGdOEqty7jmPGcaxnv4njnP8JtO5k+jJ
mLd8X+YWGI1NH5lQ+M73k8zIt5CtH5zw2JaYSyeWMx+y/W3vfth5e3YWVSab
V3CkIgdFPpzR3s46G02v32+lbxW8WGIDquBmb16Fg7WzRHzxWHuXU5yu4MUS
OWKJHaQ3ZmTO71eyxrr23RZPfccU6QyjnF45zyKTTz1/gvJ7yLarXIXKowKt
co8r8Th35XKU75bOyaIO51IJR2684YYplzxnlMAb2YvDG8fvOIxtTmfzsi8n
LuPZl10W4hO3z8I6Uvy5HuqLecI8Z66C0fwOloPpyInIJKL5Xi7LuE5M88Ex
ZU5+yXAk089X7HoZpmTzvGJHiHzSn6X+MGaOX453rjdzP7cW3StHZPy8ct59
rz5QtNteXU/o7Uefq4znZ/Uzn+G5Oq329b3E89fhReVsXNEuXzguuEwRsSbD
l8x3t+LHG20l+i7aL/n53S47ZHg0J7847mhsNfd4l7g/yWTMubyO4hs6Z9B1
8q6rp110KdLbe1wJcobybpEvBV2e8m7pLMVP3vdLw/ieE34cbh58JF1+vqRj
q9PMSb4n88QxBfmR//mu4L7OLJZdBiyR7MmckP0lnpHqsmrrzPE5W38WU9mb
G7+Si77XJs4acZ6s9cL4qZ+sZdczu37bMa6ls1oSX7PO9/Jg9HLRHuG6o9b+
P8OLXkzJ5I4My1r+XcIO2U16475bMSMRR1Qn7vlbsX5ZPGBVBvHy2GZLLsvy
Q0ru8JxdLdlE+KJnuTzumD7nEyiabxPPCfVYBsU4eF5H9ylymr2uzu3187Dg
S+hahEHUoR3q01fybnFeCOeTjHgzOD/0vFiZLmhzzV/MVb4585NYUTCdb4Dd
SnIl34JvBE6wH5BOTD7JYIMwhe9IOfMB/FA5393zIWfxcZX464z3LsknVrHR
aO2I14l2XGA9ap2ilxYf8HL65vvVVixMxX+s8l69uqzMxp3xdufhWX2vE314
1vlrRZtIC78ijsxhypwNohdfKvKOY4r4s9NRFnDenvF5L/f2I6612p+TQSJO
aS3QvtYR48nvmW9ndqaD7zOlvxIt+6zrPeRH5LkcHVN4nnJPwWvgS7KV+L75
cPPXL8RL345vipzCd2V+yY6PrUv+Y+AKekv+Z07o/GJo2fT5puwNhCNOa14x
H1xmqZ4Lti5WvcI/e2NS5s55cTkowzjXKTlmue5rnV4u8w3rjbWp+JVlObUy
WcPLsxwpFfmi1yaS4Vqko+6rau/O8CLGj0sf6HnaW/dGWaZCZ1jgdVxuat3r
2CF8FK4Jj9wXzvvsuKx5yHeJcU/ZeUBuH5Eui3riOR5v6HhBueeZJ2cjsoXO
t6JP/O7xiW5n59wpnUfissZ2HMmRlWvrSLxOP+0rVvjKYbNi/fH75+6/f2AP
xP8fuuuugfnG3GEekocTXSVYonOZkT3AFM0TZBOdWeyYInmWOhm+ZDqxin9y
JndUYrozm0Jsp8dOnfWn4sPc629W0fVlvHeJHcTpiqzRK6fM2dYdm3p8ayu5
EOcwBdpjMdzfQ/xfdTK8cCxQHIrenfGRj65wpCWP+Ptq7olWnzUfVN9p11+p
z9SX/cXj66P+yteOY4rWuO8hFZsg3x6d8SQ/XvEQ7VGhsYPgo8o+VTELGtMR
E1bwJcaPWHfOVaf8hOMfNvn++jmGzus2uqzPn4tvCOa85uqrB/K9MHfZD7gu
VDouzRnwRf7JOsvbz/VWfKuf7eL2lznacafXRlCJ96/EHvbkYKnITXPxwhnW
VPyH12HNOl7dwgvXAVboDJuynF1enum+KpiS+VZlmJL5d8VcJS07+Bym+JhH
mSXqrDK5pqU3834Kl8X/oRk3aMaf/7Xv4n/Z4Ch3e5zoaHOP66Ulp7hNRHHT
bmeXnhz+IF2W0zpbkHvhM7Lt0q72uoebF26u9ZcwHbmQvMw6s9jPmmS+nnzS
l0z7AWRMZFHwAZp5r5gX1hUyqTAF7ECWYU8CfridJebeF164/CK9q3zMRPu+
qPccq4O1Tc/ZaNbF9GXxm87nD0YGyXyDM11Zdj5sxY8r88WKedehJT+24tx7
5aOqXd75fwsLMruJl2c+wLEdj8eX7ivzi4t57dy/SzJIlEeiXCN9qXDEy9VP
8XnGXDHI/K9zKxhP6Zn5X2tHGKT56fYR/iZflIj7rtdy27qfpeix1ZJBWNui
qUeuD94NH6AYQ4cdl/0jNl6ef/7+x66cL5EjZTs/yrdtZWfjbq7Dez3oJ7ZT
34i/Hf7bxLQ89znPGc4955zhjL17x7L9nNEyfODOnx7/v3d43TXXDL/+ylcO
n7zvlyb7NHsM9KLCF5dfok6sRTuOuJySnQNVyQ9TicuoxEpUZIcWH56zTVR8
p708w9Mem0tLD+a45noqx81WjpFIr7OPZBhRqR/7vy5msGKL93efy/frPgDq
T5RfeFaMgfJci27jUN+8n4ol5P8om2SYEuUUxwvqaJ44PYcp2TqivGUriefM
sp8UdkgeoVy6DrDjSed9w+qT9903vP+OOyZ+go8v/AQ+88QnPGE45eSTp98V
M/IH+dVGl3W0XsQK8c3H+TbJMqw9cAVMke1eeSyZf5l+zGn5okuuEdZkOawq
cd+9+VKW5Old5xsQ9+r+rHV+AlVZJuPD0b/Ufaike/E9f2++EcejSuxhhnGZ
XOC6Ju3tJReIh2f6q8xGn+FjxKZW/6OPrnRfmV+xxw+qPMoj8vVyG7332cfc
40RizAh7LenBJEsqDsv9ez0vSpRB/Hwl6bX8vF3hBbEGikFQHi2td+m4PE/j
b732tdO5tU8677yNXusL6HL5BTlT5036GS5nnXnmMGLAMM7NCVNYk8isinNh
/uH7xxxjbuE/xh6G+Sb9mOcik3+yx88yt6GVcyzG7687pyliSiU3yMHGes/5
32Z2gXV6uTl/2mw/n+m1pBuRLs7b9zgaxcpVbBBRRoi+DRqHFt71+oBF/ZI/
txWrWMmFkuWrr9ho1vkht86i0t4g891yvyzV8b4JL/Qdndb5j4orlC5L+WCV
B56143liJXdI/6x9nfy13Cbi8ogwxePZ0ZFjd+Ue5ddSnkba4p3Iz4hu4wWX
Xz44P0H/jt/Wdh6UI+9sxM21/PLvLl8+/YBB/HCeJjYbfpBH5AfisTB+totj
SktXJp2Y/N7Xxe/P6cQq54kcbG6rSGdySuVcrUz30ktXckn1+kS1MMX9ruf2
+RWZZe5dWtiR5fWt6Moqdv91eRpj/EiGKR6b735fWblsWBFTMhzRWRXy9ZU8
4jgS48vAAWiPa/Z4Qz/TymNGiGEn7oDfyQFFPihyQDkfYP1jC9nmE0dPrvjN
9dBf7g9AzAt7GJ3Fif8idjp8CIljYh4Tx6RYS8ky0pXJb9l1ucIj941nHbby
xni+U9ZaFreV5Xtv2S+yOMQ5G3TmQ1vx3a3w22yfn50DUsGOCr+NmLKOrsR9
V2JJMpvInI6uh878x7LY9iyXS+brlckvjimei5I5GXGEeo4dfla4zqqgTis/
vOOFfGyQQTwHI/s8naPB76LJ38Ra5nn8jv31wXy2m2tzHfyV2c48RzT4wDmc
47ybZGXWIucVILtQftaZX3Xg7E7WAvNZeUdjfkuP6/dcMcrtINxxnfBc3hjX
p1XiYlp6s0hHvHD+1pJZKrEkc7q1Vpym13e+lOl5emM6Io60bBC9Oq5IV+Qj
92do2egzfVdG+1hlbWb+Yy27jN6xhSOZPCLbB+26fOFn57lOWPNcubOUd1E0
dTyPVhZvePdHfnba67F+lCueZ7DmiOln/Yred9ZXT/tE3oU8+eAJZ26Qh9H5
QJZTfXNtrkN9sYbOPONRq5NOfPgBP0Pkarf3uV+i2wrdH97XlNZa9IGMejNh
Su+5HhmmRHkk7l3nfJ8q8o5sFh77PMeHe/PoVs6BivaFVm7DTLaqyClZXizl
XYlyivPtDAezd8zOzOqt77jgsY1e7jort5uLlu+uZA3JF57bRHYQzXPPvycZ
hLUgvRblLf0Vz6Ad1cFHC18B9nOMIc9hnA83b9hcmyteHuvKOZzbeRS25Rjp
x1gf5zzx66ZY2c/d/6sTPyL+RbKJ+71rfyWskczi51f6GlQOIjBFumX51Tvt
/vaSX6L9pZXPxH2bI9YodsN9biO+RBtB9NEVf2vZ8TN9S4YjLd3+On/aVj/j
Ht6xzOWUmDtFfmgt3wDRns8wlgs7XEbw/b/kNfliterPxeBndRw7snNSDtbe
ofnJ3FMuLPnS+3x224efeeQ5shSr7rqseO6h4tZpS/lP8KfRuYfMBWzu5NCg
jq/fjN7ErW+uw3UJQ6IsDKZw1tqeU75smtusZ+a58lrr3E/ljvMzprW+fJ/m
69Htkq09nuiWLCN9tc6ek53FfQAUAwitvSh1XFemPa3Or/F9vuIItAdetzee
s+229sa+Z1b9aHfI8rFnudaXyEHRTwBa531A8yxhkOvZhAvKHSTa/QQ89lB9
jvjierCIp44dGaYIL2SD83MTJHc4XkjukO2vRTMn5euY2dDdPu7zX/5X3K81
onMPlbOXPEtgMxjD+kBfdcbeR47jdvPkh8XZIh+9++7h9ddeO7z0yiun/591
6aVTHMnh4hWba3NVrsz3gzWEnAKmkDOZPR9yis7ZUY5rnSUtf3jhi3DH11Er
x6nrBKjjOuco40Ssge/It9/1XR5H7/kVY7nTLrOIv8nHeE4/H+0XXsd5nfPA
zO7gfD7jpRX7RatOlKHmdGjuA9aScVrxmLG8JbO4bKX3bdmYMozwMfHyaAeX
fdzt5i6bSAbRPkexvZp7sgPK7zHzv/IcsBFfsH0oJzw2EdkftS44o4q+Inuw
xt77nvcMb7r++g1ebK4j/sowBdsJax3bPXIK8gk8QDKL8jnAg6DBFzCHtaPz
Q7VP4+/yXdH6Aptkc3Tdsp/7E20xklmcdvkFviTZxHHEyzNMgUepjngdfM/5
mPOozJ7e0udDr/ObivYF57HejuSmKNdkujK3a7g8te7cwzl7kNtHWjioMdSz
vM/ez3U44jqrSEcbh3RTXu71+XbCIM/x3tJZMSdlE2dPo7nKXJTcoVgPxoI9
lq8F2R+Vv9fPxgVTpddC58VcZixOO/XLp/xLvh7x+UU3vR0XsPH73VxHxpXp
XW+95ZZxPl/BXN4iRl++7vgofuDOO7f4+/HHfdEkq//mq189sO9i3bJ2pB9j
DStXtuKwROv8ykxXxnp3+aWFNTrnVDYanacM3xDWiJ/wHPEuniO+TXvwUtGs
b5d9nBaPcn2LMEu09uqya2T5TOZi+V2echys5u+Kvm2STbLYCqddL9fK2Rsx
KLNrZNjRki+izy209FQtWQNasYE+T+L5dLLNSTbRPsRxRPGAzCf3s1I5c07y
uPyvZEP0GBDOvtW6oEx+vL5eYh3u++R9903rjPixU/fs2aqszc21uY7Wa1wb
w7gehqdedNEgeyJ7NWL2sTmyhuU/j15A8S+sTdYv+zvl3GadRr200643c7lG
/MSxxv1z4CdOC3fgb8IL6VIkp6iO580Q7xXuCJscU9xXOfriOhY4RmT+aRmd
+f1G/zT3K1DOkAxHMrrlB+V2ihiXUanjtm+PGXfa5Q733XU/K48ll/0C/u8y
heupqEO5crmz92HvQqwWeYyYZ/hZ6Vw8nYHL/fK/gmZucy9zeBNjvrk2V/3a
eZ7Og7EtXk7eyqdfcskou+wb4O2sQdY8PA3egE1WObThUVqnrEfJLNRnHyj9
mPLJQAt34AnwCta9x/7LXuMyDs+Cdyt3mfgP5YoL0H4VPqbYTNlr5AskuUY0
/Rct3b7s+26bjn5lrX1+xnszPY/wTvo9zyfQsr8o94vkAj9rw3VB3n5LB5XF
8bVi+mTjlk+4yx0x94js3a2zzt0m7nYNl0c0BxSTK/mC+z02UOXcA5Zpv8H3
om3JWbQnrKefGk/6D837cq/kL+qD49n5U4414VyqtT+He91vrs31+X7deMMN
W8++7LJJtme/h/4ZeUP6BNYtax8+wHpWObz+Y/f83AG6hS+SZYQvouE/ouUb
IL9N4Q78ED4mvZlstdoPgzvwUvFD5QQQpojfuj5Ndhn5MLsOP+7bXf/Tirn2
cufJzueVRz3abhwj4IceryddEzzWz91o9cH9veUH1fIJj3F/rmtyeWTOF1c6
z2gT93LXWUUfXdHKr0h/8C0BP5CN8ZsiX+LGb2pzba7P38v3VzpDYfvnwX3a
yKsmG8xJJz580o/BC7AzQMP7ZMeEZu1Lt+CYAm9y2vHF7TJOK08mvFIYBF9C
Hw6mwdNEa58s/Ri8zn3PhC/wUsksKnd5Rz4DwhTR8Hnxbel/xLd1r/yoxbe9
3OvD84UpooVNKtezKNe9sk0LH4URtKl3lxwnWv1hTODt8omChyuOT3jhmMKz
lCPO5QudDyWe775/slN4HIfrPHk36bXok+wd0LJ9M5eIpdJ5UpQzb+gXOd3f
eN11wyte/vIhzM9mvsQKfbjX3+baXEfzlZ3/Qm4I2R851we7/gfuvBPbJvkj
Bmwy+CxDv/1tbxvEQ+B1nAWjOC/pyiK+SG8W6ZYODX5KeaTl/yy5Bl4nHtjC
l5aMI/4sfi5dmeQX8XzK4cOSO6SL07M8J63H2QlfIv+XLKB7RYv/ez+FL+Cd
4wv14f/SGSpuqIWz1IH/y04hGVB+trJz6WwFP6NWMqZwn+/Cd6Rdvh17CvBG
OivHDtrxWA/0qNg+eB46rFNO/tIJN8j9wPxiXhHzofNtx/k3jO8/4soP7JBT
Nv5Um2tzHd0XujH2uRec/02T/RTbKHtieBH7WHhmJqe4bEIdlcOvxJdcZvH6
whHnyTovT5ji5Y4v0im5bCI9vDBF+i7hi2z04vOSHRTLKZnI5RqnwSaXQeiD
dHGUy+dN9gjdS589bxX1RSNPSZdFueOs6xud1rfQmeaSKSSbaKz4hsImcIBy
xlw2Mp39QT/ALGjpuPiO0mHqm6JHRd7ld+XcHvu+yZe4uTbXUX619GPsDTNa
sgZ8Bt0FOnRwBhr7gXz70ZXJ5x9aZ55i21A598Gz8PORjKPYAY8jUJvQ7JUV
gyOacrXpdeBp0t2BfcoNC62cz7G8Rfv5rfRZNHHW0uF4ffbn8HrR8HFsB4wB
vBv9D/IdtNfH35u4I3g9tNfBN099pj/ghPACjNF3QW6RzIg8g6xHv8AC9Rmc
9twL0k3pXXzM+Xb0STl18cGCBufo91w5z+b+sb/TmXRPu/jbhlbeIem1pLc6
3Gtic22uzfXQXeN+dTqrdNxL79BXnHD88QPnWfK3k048cbj1lh9FLz6do8x5
ZNShnDqUn3zSl6zQf7zm6qsH+RqxD6cdeBDtcDYq7Yz87cC90KrTKo91eNaI
l9PzadPpkW+vpVVf7ajNrD7nu47YMbzsqu9Jaep7Of2FHnnwgXNgVZ8YC6/P
mX+cSc2Yus4QO5f8wOVHAUaDZYrv+9g99wycHUguEX8XfUd+1xhSru+oceZM
OfpRoWmTuUJbjh0+lzb+VJvrobz+P817nIU=
    "], {{0, 135}, {135, 0}}, {0., 1.},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Real32", ColorSpace -> "RGB", Interleaving -> False],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{135, 135},
  PlotRange->{{0, 135}, {0, 135}}]], "Output",
 CellChangeTimes->{3.7712569907190485`*^9, 3.7715007184143925`*^9, 
  3.771502901220339*^9},
 CellLabel->"Out[67]=",ExpressionUUID->"c003c106-3515-4d97-b959-ea01a41d967d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dims2", "=", 
  RowBox[{"{", 
   RowBox[{"139", ",", "139"}], "}"}]}]], "Input",
 CellChangeTimes->{{3.771256005384669*^9, 3.7712560063670487`*^9}, {
  3.7712560761607795`*^9, 3.7712560774501214`*^9}, {3.7712570385282435`*^9, 
  3.7712570464983397`*^9}, {3.7712571059959803`*^9, 3.7712571090587444`*^9}},
 CellLabel->"In[21]:=",ExpressionUUID->"fdaed4e1-dfcc-4d5b-8f29-6a1fbbb57f29"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"139", ",", "139"}], "}"}]], "Output",
 CellChangeTimes->{3.7712571108965044`*^9, 3.7715007184483004`*^9},
 CellLabel->"Out[21]=",ExpressionUUID->"2e1f43c2-c715-4fdd-9784-60723c008415"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lenet2", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ResizeLayer", "[", "dims2", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"ImageAugmentationLayer", "[", 
       RowBox[{"{", 
        RowBox[{"135", ",", "135"}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"20", ",", "5"}], "]"}], ",", "\[IndentingNewLine]", "Ramp", 
      ",", "\[IndentingNewLine]", 
      RowBox[{"PoolingLayer", "[", 
       RowBox[{"2", ",", "2"}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"50", ",", "5"}], "]"}], ",", "\[IndentingNewLine]", "Ramp", 
      ",", "\[IndentingNewLine]", 
      RowBox[{"PoolingLayer", "[", 
       RowBox[{"2", ",", "2"}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"FlattenLayer", "[", "]"}], ",", "500", ",", 
      "\[IndentingNewLine]", "Ramp", ",", "2", ",", "\[IndentingNewLine]", 
      RowBox[{"SoftmaxLayer", "[", "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", 
     RowBox[{"NetDecoder", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Class\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"True", ",", "False"}], "}"}]}], "}"}], "]"}]}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", 
     RowBox[{"NetEncoder", "[", "\"\<Image\>\"", "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.771257031901863*^9, 3.7712570991987*^9}},
 CellLabel->"In[69]:=",ExpressionUUID->"a0f3d9fc-7ebf-4d92-b510-4379691cba43"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["13", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              OverlayBox[{
                GraphicsBox[{
                  Thickness[0.014925373134328358`], {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}},
                     CurveClosed -> {0}]}, {
                   GrayLevel[0.6], 
                   Thickness[0.018686567164179105`], 
                   Opacity[1.], 
                   JoinForm[{"Miter", 10.}], 
                   
                   JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}},
                     CurveClosed -> {0}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.9], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                   FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                 ImageSize -> {36, Automatic}, PlotRangePadding -> 0, 
                 BaseStyle -> GrayLevel[0.6]], 
                StyleBox["uninitialized", 
                 RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto", 
                 Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                 Scaled[0.0001]}], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Resize", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{139, 139}], 
                    "Resampling" -> "Linear", "Dimensionality" -> 2, 
                    "$Channels" -> 3, "$InputSize" -> {128, 128}, 
                    "$OutputSize" -> {139, 139}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 139, 139}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "ImageAugmentation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {135, 135}, 
                    "ReflectionProbabilities" -> {0., 0.}, "$Channels" -> 3, 
                    "$InputDimensions" -> {139, 139}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 139, 139}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 135, 135}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{20, 3, 5, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{20}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 20, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {135, 135}, 
                    "$OutputSize" -> {131, 131}, "$WeightsInputChannels" -> 
                    3], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 135, 135}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 131, 131}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {20, 131, 131}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 131, 131}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 131, 131}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 20, "$InputSize" -> {131, 131}, 
                    "$OutputSize" -> {65, 65}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 131, 131}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 65, 65}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{50, 20, 5, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{50}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 50, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 20, "$InputSize" -> {65, 65}, 
                    "$OutputSize" -> {61, 61}, "$WeightsInputChannels" -> 20],
                     "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 65, 65}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 61, 61}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {50, 61, 61}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 61, 61}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 61, 61}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 50, "$InputSize" -> {61, 61}, 
                    "$OutputSize" -> {30, 30}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 61, 61}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 30, 30}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{45000}, NeuralNetworks`RealT]]], 
                    "10" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{500, 45000}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {500}, "$OutputSize" -> 500, 
                    "$InputSize" -> 45000, "$InputDimensions" -> {45000}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{45000}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
                    "11" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {500}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
                    "12" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`TensorT[{2, 500}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 500, "$InputDimensions" -> {500}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{3, 128, 128}, 
                    NeuralNetworks`RealT], "Type" -> "Image", 
                    "ImageSize" -> {128, 128}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "Interleaving" -> False, 
                    "MeanImage" -> None, "VarianceImage" -> None, "$Version" -> 
                    "12.0.10"]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "Type" -> "Class", 
                    "Labels" -> {True, False}, "InputDepth" -> 1, 
                    "Dimensions" -> 2, "$Rank" -> 0, "$Version" -> 
                    "12.0.10"]]], NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"128\"", "\"128\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ResizeLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"139\"", "\"139\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ImageAugmentationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"135\"", "\"135\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"131\"", "\"131\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"131\"", "\"131\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"65\"", "\"65\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"61\"", "\"61\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"61\"", "\"61\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"30\"", "\"30\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"45000\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"12\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"13\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.771257113433747*^9, 3.7715007185320764`*^9, 
  3.7715029377595873`*^9},
 CellLabel->"Out[69]=",ExpressionUUID->"6b877cb2-99ab-44c5-901b-197c9d4f94fe"]
}, Open  ]],

Cell["\<\
Training the Augmented Dataset
\tFor this training set, I used CPU and went through 7 rounds. The error rate \
for the round training was 3.72% while the validation training error was \
5.84%. The gap between the orange and blue lines shows that there was limited \
overfitting the augmented dataset. Furthermore, the downward trend of the \
round training shows the error rate going down as the neural network goes \
through more rounds.\
\>", "Text",
 CellChangeTimes->{{3.7719347309671383`*^9, 3.7719347999922366`*^9}, {
  3.771934886534153*^9, 3.7719349006955366`*^9}, {3.771935782240913*^9, 
  3.7719358304801345`*^9}, {3.7719358985628457`*^9, 
  3.7719359020299406`*^9}},ExpressionUUID->"6b71f2cb-c4d2-4cb0-98f5-\
e03b44d4224f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"results2", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"lenet2", ",", 
    RowBox[{"Normal", "[", "trainingdata", "]"}], ",", "All", ",", 
    RowBox[{"ValidationSet", "\[Rule]", 
     RowBox[{"Normal", "[", "validationdata", "]"}]}], ",", 
    RowBox[{"MaxTrainingRounds", "\[Rule]", "7"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7712571606135807`*^9, 3.771257173382328*^9}, {
  3.7714361185893717`*^9, 3.77143614456744*^9}},
 CellLabel->"In[70]:=",ExpressionUUID->"a3045bd6-070e-4227-800b-d5386ddc1b19"],

Cell[BoxData[
 FrameBox[GridBox[{
    {
     ItemBox[
      FrameBox[
       StyleBox["\<\"NetTrain Results\"\>", "SuggestionsBarText",
        StripOnInput->False,
        FontSize->12],
       FrameMargins->{{10, 5}, {-4, 2}},
       FrameStyle->None,
       StripOnInput->False],
      Alignment->{Left, Bottom},
      Background->RGBColor[0.96, 0.96, 0.96],
      Frame->{{False, False}, {True, False}},
      FrameStyle->Opacity[0.1],
      ItemSize->{Automatic, 1},
      StripOnInput->False]},
    {
     ItemBox[
      TagBox[
       FrameBox[
        TagBox[GridBox[{
           {
            TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"summary\"", 
               GrayLevel[0.4], StripOnInput -> False]},
             "RowDefault"], 
            
            TemplateBox[{
             ",","\",\"",
              TemplateBox[{"\[ThinSpace]", "\" \"", "\"batches:\"", "2261"}, 
               "RowWithSeparators"],
              TemplateBox[{"\[ThinSpace]", "\" \"", "\"rounds:\"", "7"}, 
               "RowWithSeparators"],
              TemplateBox[{"\[ThinSpace]", "\" \"", "\"time:\"", "\"1.1h\""}, 
               "RowWithSeparators"],
              TemplateBox[{"\[ThinSpace]", "\" \"", "\"examples/s:\"", 
                TagBox[
                 InterpretationBox[
                 "\"37.\"", 36.83917963100229, AutoDelete -> True], 
                 NumberForm[#, 2]& ]}, "RowWithSeparators"]},
             "RowWithSeparators"]},
           {
            TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"data\"", 
               GrayLevel[0.4], StripOnInput -> False]},
             "RowDefault"], 
            
            TemplateBox[{
             ",","\",\"",
              TemplateBox[{
               "\[ThinSpace]", "\" \"", "\"training examples:\"", "20669"}, 
               "RowWithSeparators"],
              TemplateBox[{
               "\[ThinSpace]", "\" \"", "\"validation examples:\"", "6889"}, 
               "RowWithSeparators"],
              TemplateBox[{
               "\[ThinSpace]", "\" \"", "\"processed examples:\"", "144704"}, 
               "RowWithSeparators"],
              TemplateBox[{
               "\[ThinSpace]", "\" \"", "\"skipped examples:\"", "0"}, 
               "RowWithSeparators"]},
             "RowWithSeparators"]},
           {
            TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"method\"", 
               GrayLevel[0.4], StripOnInput -> False]},
             "RowDefault"], 
            
            TemplateBox[{
             ",","\",\"",
              TemplateBox[{
               "\[ThinSpace]", "\" \"", "\"ADAM\"", "\"optimizer\""}, 
               "RowWithSeparators"],
              TemplateBox[{"\[ThinSpace]", "\" \"", "\"batch size\"", "64"}, 
               "RowWithSeparators"],"\"CPU\""},
             "RowWithSeparators"]},
           {
            TemplateBox[{TemplateBox[{5}, "Spacer1"],StyleBox["\"round\"", 
               GrayLevel[0.4], StripOnInput -> False]},
             "RowDefault"], 
            TemplateBox[{",","\",\"",TemplateBox[{"\[ThinSpace]", "\" \"", 
                TagBox[
                 TooltipBox["\"loss:\"", 
                  TagBox[
                   GridBox[{{
                    
                    TemplateBox[{"\"Measurement: \"", "\"loss\""}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Column"]], Annotation[#, 
                  Column[{
                    Row[{"Measurement: ", "loss"}]}], "Tooltip"]& ], 
                TagBox[
                 InterpretationBox[
                  RowBox[{"\"1.05\"", "\[Times]", 
                    SuperscriptBox["10", "\"-1\""]}], 0.10506304989279786`, 
                  AutoDelete -> True], ScientificForm[#, 3]& ]}, 
               "RowWithSeparators"],TemplateBox[{"\[ThinSpace]", "\" \"", 
                TagBox[
                 TooltipBox["\"error:\"", 
                  TagBox[
                   GridBox[{{
                    
                    TemplateBox[{"\"Measurement: \"", "\"ErrorRate\""}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Column"]], Annotation[#, 
                  Column[{
                    Row[{"Measurement: ", "ErrorRate"}]}], "Tooltip"]& ], 
                "\"3.72%\""}, "RowWithSeparators"]},
             "RowWithSeparators"]},
           {
            
            TemplateBox[{
             TemplateBox[{5}, "Spacer1"],StyleBox["\"validation\"", 
               GrayLevel[0.4], StripOnInput -> False]},
             "RowDefault"], 
            TemplateBox[{",","\",\"",TemplateBox[{"\[ThinSpace]", "\" \"", 
                TagBox[
                 TooltipBox["\"loss:\"", 
                  TagBox[
                   GridBox[{{
                    
                    TemplateBox[{"\"Measurement: \"", "\"loss\""}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Column"]], Annotation[#, 
                  Column[{
                    Row[{"Measurement: ", "loss"}]}], "Tooltip"]& ], 
                TagBox[
                 InterpretationBox[
                  RowBox[{"\"1.87\"", "\[Times]", 
                    SuperscriptBox["10", "\"-1\""]}], 0.18729584156649726`, 
                  AutoDelete -> True], ScientificForm[#, 3]& ]}, 
               "RowWithSeparators"],TemplateBox[{"\[ThinSpace]", "\" \"", 
                TagBox[
                 TooltipBox["\"error:\"", 
                  TagBox[
                   GridBox[{{
                    
                    TemplateBox[{"\"Measurement: \"", "\"ErrorRate\""}, 
                    "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                   "Column"]], Annotation[#, 
                  Column[{
                    Row[{"Measurement: ", "ErrorRate"}]}], "Tooltip"]& ], 
                "\"5.84%\""}, "RowWithSeparators"]},
             "RowWithSeparators"]},
           {
            ItemBox[
             
             DynamicModuleBox[{NeuralNetworks`Private`NetTrain`index$$ = 2, 
              NeuralNetworks`Private`NetTrain`plotList$$ = {
               GeneralUtilities`TightLabeled[
                Graphics[{
                  AbsoluteThickness[1.25], {{
                    Hue[0.083, 1., 1.], 
                    Line[CompressedData["
1:eJw1l3k8lHsbxsdOlgYzjKWF9k0qlVL9bklplxaVKPV22nEolVNRB6mTaBFt
0ooopEP7TTK0kWRLxdhmzGJGEZXqfZ7f6/394/N8zPI8131d3+sem/X+HhvV
ORyOlRqHw/69vbtR/+Gas8RvB8lTxXeQ/12nkkHDmvwvvYjBp2elbse0ssm1
bYGt66Lz8H//v0/UnXzmehkV4rnlH0pas5EkXhlQk9FciAX09QVk5k6rK+Y2
Qryvu+nmoHFCctTYfGqPXRFm0Pc/J5rNy02XcwvxesvaHR5Rr0ie87c5+S1C
PE8/r5SMGddYMmFQIbqtH52Q519Gxn5d9XxXhbD388vJsylyt4pIIc4oS/nm
ef4dka0y0tDs+v/3VZKv81cahScK0QGGeCmFVWSHy+6UG0X///4aYrfQVfMP
WRGOzLj8KPLze5K+MeH57HRh7/18IEYfMm+98SvCgf3Z84nszHD4Nml9ce/9
1ZFX1VOEdVnP8Z/Zr/H9tXry1V205XX3i977FZENs6uW5Zm+RK0D/wTcmNpA
rvGz+idXv+7Vs5ForqsrrjpWiqH/zrUJfNNIVn86XCrMK8Vp9HmaiM2I0N/n
xr3Gb3Kdt9P/aCZiM499RaNLMIc+Xwtx77DNSb5RhkGDhYf0elqIRr8i4UTX
t2hPn1dMFiq7OovmlqPCK3xCxQkJOTdPx+Xnmrd4kz5/Kzn75PGMFlKGm07N
bEoaJiW6B2dV3XtZjoOpHlJC3vsMKOt4h6IXnLjtj2Vkpo13S9rkCkyk+shJ
4alBdYlra9BLHV0dlyrIMlGxw1LrShRQvdrIQv/qmbOsKrFiyv6vGq1tpPuk
D6yZUY0nqX5KwqnpNNjuXYEp9y6WbyIqYjfcZq2HohoPUz1VRLlmqfHLiE/4
x7uetIV92kkJd/VALe1adKX6tpP0Er3p2bfrcLCKfcB2smb3hlzNaR9Rg+r9
mXDSDLSvPviEDczTWiR9Js57vEWb7tZjPtX/CzFxMxB1bajHpGGWE39v/ULc
11c6PHOo653HF+b5VvhULa9HH5e9hs0TO8jrkQEZCeYNOJ3Op4MsKb02/+wc
EVqvrW5+wekkDjzJu+2Tm/AHnVcn+bLCtEmrQYTvQyY/yXzZSabm5Oul6ol6
/fmVdG/kGS7+XocJZ9jzlUwav0zWvqQJd9N5MtebVtcnp9fjijudfvt8u8jI
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
                    "]]}, {}}, {{
                    Hue[0.59, 0.7, 0.75], 
                    
                    Line[{{0.983277591973244, -0.39473109717893173`}, {
                    1.9899665551839463`, -0.570416965450358}, {
                    2.9966555183946486`, -0.6646978443116014}, {
                    3.9799331103678925`, -0.6926678391560946}, {
                    4.986622073578595, -0.7210515618703556}, {
                    5.993311036789297, -0.7121200397396436}, {
                    6.999999999999999, -0.7274718649353453}}]}, {
                    AbsolutePointSize[4.], 
                    Hue[0.59, 0.7, 0.65], 
                    
                    Point[{{0.983277591973244, -0.39473109717893173`}, {
                    1.9899665551839463`, -0.570416965450358}, {
                    2.9966555183946486`, -0.6646978443116014}, {
                    3.9799331103678925`, -0.6926678391560946}, {
                    4.986622073578595, -0.7210515618703556}, {
                    5.993311036789297, -0.7121200397396436}, {
                    6.999999999999999, -0.7274718649353453}}]}}}, Prolog -> {{
                    Text[2, 
                    Offset[{-2, -2}, {2., 2.242}], {1., 1.}], 
                    Text[4, 
                    Offset[{-2, -2}, {4., 2.242}], {1., 1.}], 
                    Text[6, 
                    Offset[{-2, -2}, {6., 2.242}], {1., 1.}], 
                    Text[8, 
                    Offset[{-2, -2}, {8., 2.242}], {1., 1.}], 
                    Text[10, 
                    Offset[{-2, -2}, {10., 2.242}], {1., 1.}]}, {
                    Text[
                    Superscript[10, "-1"], 
                    Offset[{3, 0}, {0, -1.}], {-1, -1.}], 
                    Text["1", 
                    Offset[{3, 0}, {0, 0.}], {-1, -1.}], 
                    Text["10", 
                    Offset[{3, 0}, {0, 1.}], {-1, -1.}], 
                    Text[
                    Superscript[10, "2"], 
                    Offset[{3, 0}, {0, 2.}], {-1, -1.}]}}, 
                 PlotRange -> {{0, 7.010835913312717}, {-2.042, 2.242}}, 
                 ImageSize -> {302, 182.}, 
                 GridLines -> {{2., 4., 6., 8., 10.}, {{-2., 
                    GrayLevel[0.3001]}, {-1., 
                    GrayLevel[0.3001]}, {0., 
                    GrayLevel[0.3001]}, {1., 
                    GrayLevel[0.3001]}, {2., 
                    GrayLevel[0.3001]}}}, Frame -> True, Axes -> None, 
                 AspectRatio -> Full, 
                 BaseStyle -> {
                  FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
                   GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, 
                   ScriptMinSize -> 6}, PlotRangePadding -> None, 
                 PlotRangeClipping -> True, Background -> GrayLevel[1], 
                 FrameStyle -> GrayLevel[0.5], ImagePadding -> 1, FrameTicks -> 
                 None], {None, "loss", "rounds"}], 
               GeneralUtilities`TightLabeled[
                Graphics[{
                  AbsoluteThickness[1.25], {{
                    Hue[0.083, 1., 1.], 
                    Line[CompressedData["
1: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
                    "]]}, {}}, {{
                    Hue[0.59, 0.7, 0.75], 
                    
                    Line[{{0.983277591973244, 0.14443315430396284`}, {
                    1.9899665551839463`, 0.10103062853824937`}, {
                    2.9966555183946486`, 0.07577297140368704}, {
                    3.9799331103678925`, 0.06924081869647263}, {
                    4.986622073578595, 0.06198287124401219}, {
                    5.993311036789297, 0.05980548700827405}, {
                    6.999999999999999, 0.058353897517781965`}}]}, {
                    AbsolutePointSize[4.], 
                    Hue[0.59, 0.7, 0.65], 
                    
                    Point[{{0.983277591973244, 0.14443315430396284`}, {
                    1.9899665551839463`, 0.10103062853824937`}, {
                    2.9966555183946486`, 0.07577297140368704}, {
                    3.9799331103678925`, 0.06924081869647263}, {
                    4.986622073578595, 0.06198287124401219}, {
                    5.993311036789297, 0.05980548700827405}, {
                    6.999999999999999, 0.058353897517781965`}}]}}}, 
                 Prolog -> {{
                    Text[2, 
                    Offset[{-2, -2}, {2., 0.6060000000000001}], {1., 1.}], 
                    Text[4, 
                    Offset[{-2, -2}, {4., 0.6060000000000001}], {1., 1.}], 
                    Text[6, 
                    Offset[{-2, -2}, {6., 0.6060000000000001}], {1., 1.}], 
                    Text[8, 
                    Offset[{-2, -2}, {8., 0.6060000000000001}], {1., 1.}], 
                    Text[10, 
                    Offset[{-2, -2}, {10., 0.6060000000000001}], {1., 1.}]}, {
                    Text[
                    PercentForm[0.], 
                    Offset[{3, 0}, {0, 0.}], {-1, -1.}], 
                    Text[
                    PercentForm[0.2], 
                    Offset[{3, 0}, {0, 0.2}], {-1, -1.}], 
                    Text[
                    PercentForm[0.4], 
                    Offset[{3, 0}, {0, 0.4}], {-1, -1.}]}}, 
                 PlotRange -> {{0, 7.010835913312717}, {-0.006000000000000001,
                    0.6060000000000001}}, ImageSize -> {302, 182.}, 
                 GridLines -> {{2., 4., 6., 8., 10.}, {{0., 
                    GrayLevel[0.8501]}, {0.05, 
                    GrayLevel[0.8501]}, {0.1, 
                    GrayLevel[0.8501]}, {0.15, 
                    GrayLevel[0.8501]}, {0.2, 
                    GrayLevel[0.8501]}, {0.2, 
                    GrayLevel[0.8501]}, {0.25, 
                    GrayLevel[0.8501]}, {0.3, 
                    GrayLevel[0.8501]}, {0.35, 
                    GrayLevel[0.8501]}, {0.4, 
                    GrayLevel[0.8501]}, {0.4, 
                    GrayLevel[0.8501]}, {0.45, 
                    GrayLevel[0.8501]}, {0.5, 
                    GrayLevel[0.8501]}, {0.55, 
                    GrayLevel[0.8501]}, {0.6, 
                    GrayLevel[0.8501]}, {0.6, 
                    GrayLevel[0.8501]}, {0.65, 
                    GrayLevel[0.8501]}, {0.7, 
                    GrayLevel[0.8501]}, {0.75, 
                    GrayLevel[0.8501]}, {0.8, 
                    GrayLevel[0.8501]}, {0., 
                    GrayLevel[0.3001]}, {0.2, 
                    GrayLevel[0.3001]}, {0.4, 
                    GrayLevel[0.3001]}, {0.6, 
                    GrayLevel[0.3001]}, {0.8, 
                    GrayLevel[0.3001]}}}, Frame -> True, Axes -> None, 
                 AspectRatio -> Full, 
                 BaseStyle -> {
                  FontFamily -> "Verdana", FontSize -> 8, FontColor -> 
                   GrayLevel[0.5], ScriptSizeMultipliers -> 0.2, 
                   ScriptMinSize -> 6}, PlotRangePadding -> None, 
                 PlotRangeClipping -> True, Background -> GrayLevel[1], 
                 FrameStyle -> GrayLevel[0.5], ImagePadding -> 1, FrameTicks -> 
                 None], {None, "error rate", "rounds"}]}}, 
              TagBox[GridBox[{
                 {
                  DynamicBox[ToBoxes[
                    Grid[{{
                    Button[
                    MouseAppearance[
                    Style["\:2039", FontColor :> If[
                    CurrentValue["MouseOver"], 
                    RGBColor[0.27, 0.54, 0.79], 
                    GrayLevel[0.25]], FontFamily -> "MS Gothic", FontSize -> 
                    14, FontWeight -> "Thin"], "LinkHand"], 
                    NeuralNetworks`Private`NetTrain`index$$ = 
                    Mod[NeuralNetworks`Private`NetTrain`index$$ - 1, 2, 1], 
                    Appearance -> None], 
                    Dynamic[
                    Part[{
                    Tooltip["loss", 
                    Column[{
                    Row[{"Measurement: ", "loss"}]}]], 
                    Tooltip["error rate", 
                    Column[{
                    Row[{"Measurement: ", "ErrorRate"}]}]]}, 
                    NeuralNetworks`Private`NetTrain`index$$], 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetTrain`index$$}], 
                    Button[
                    MouseAppearance[
                    Style["\:203a", FontColor :> If[
                    CurrentValue["MouseOver"], 
                    RGBColor[0.27, 0.54, 0.79], 
                    GrayLevel[0.25]], FontFamily -> "MS Gothic", FontSize -> 
                    14, FontWeight -> "Thin"], "LinkHand"], 
                    NeuralNetworks`Private`NetTrain`index$$ = 
                    Mod[NeuralNetworks`Private`NetTrain`index$$ + 1, 2, 1], 
                    Appearance -> None]}}, ItemSize -> {{3, 20, 3}, {2}}], 
                    StandardForm],
                   ImageSizeCache->{276., {7., 13.}},
                   TrackedSymbols:>{NeuralNetworks`Private`NetTrain`index$$}]},
                 {
                  DynamicBox[ToBoxes[
                    Part[
                    NeuralNetworks`Private`NetTrain`plotList$$, 
                    NeuralNetworks`Private`NetTrain`index$$], StandardForm],
                   ImageSizeCache->{314., {94., 99.}},
                   TrackedSymbols:>{NeuralNetworks`Private`NetTrain`index$$}]}
                },
                DefaultBaseStyle->"Column",
                GridBoxAlignment->{"Columns" -> {{Center}}},
                GridBoxItemSize->{
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
               "Column"],
              DynamicModuleValues:>{}],
             Alignment->Center,
             StripOnInput->False], "\[SpanFromLeft]"},
           {
            ItemBox[
             StyleBox[
              RowBox[{
               GraphicsBox[{},
                Axes->None,
                Background->Hue[0.083, 1., 1.],
                ImagePadding->{{0, 0}, {5, 2}},
                ImageSize->{13, 1}], "  ", "\<\"training set\"\>", "\t", 
               GraphicsBox[{},
                Axes->None,
                Background->Hue[0.59, 0.7, 0.75],
                ImagePadding->{{0, 0}, {5, 2}},
                ImageSize->{13, 1}], "  ", "\<\"validation set\"\>"}],
              FontFamily->"Verdana",
              FontSize->8,
              FontColor->GrayLevel[0.4]],
             Alignment->Center,
             StripOnInput->False], "\[SpanFromLeft]"}
          },
          AutoDelete->False,
          ColumnsEqual->False,
          
          GridBoxAlignment->{
           "Columns" -> {Right, {Left}}, "Rows" -> {{Baseline}}},
          GridBoxDividers->{"Columns" -> {False, {
               Opacity[0.15]}, False}},
          GridBoxItemSize->{"Columns" -> {8, {26}}, "Rows" -> {{1.}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], 
              Offset[1.1199999999999999`], {
               Offset[1.75]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.8]}, 
              Offset[0.2]}}],
         "Grid"],
        FrameMargins->{{10, 10}, {10, 5}},
        FrameStyle->None,
        StripOnInput->False],
       Deploy,
       DefaultBaseStyle->"Deploy"],
      Alignment->Center,
      BaseStyle->{
       FontWeight -> "Light", FontSize -> 11, FontFamily -> "Segoe UI", 
        NumberMarks -> False, Deployed -> False},
      StripOnInput->False]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.5599999999999999]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], 
       Offset[0.8], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  Background->GrayLevel[1],
  FrameMargins->{{0, 0}, {0, 0}},
  FrameStyle->GrayLevel[0.85],
  RoundingRadius->5,
  StripOnInput->False]], "Output",
 CellChangeTimes->{3.771500719146845*^9, 3.7715068747589765`*^9},
 CellLabel->"Out[70]=",ExpressionUUID->"54c264c0-4395-4182-b203-8db43acf429a"]
}, Open  ]],

Cell[TextData[StyleBox["Extracting the Training Net from Training Results", \
"Section"]], "Section",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.7714147711323805`*^9, 3.7714147887818108`*^9}, 
   3.771929851481415*^9, 3.7719314623912077`*^9, 3.771934876069929*^9, {
   3.7719349531084695`*^9, 
   3.7719349706396475`*^9}},ExpressionUUID->"25d3c5a1-0a37-4833-9f3f-\
a737ce07e40e"],

Cell["\<\
Taking the trained neural network and preparing it for testing.\
\>", "Text",
 CellChangeTimes->{{3.771935048295987*^9, 
  3.7719351114678993`*^9}},ExpressionUUID->"d7afbf41-5040-4c73-94a9-\
fc05d5a20f2e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trained", "=", 
  RowBox[{"results2", "[", "\"\<TrainedNet\>\"", "]"}]}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.7714149146871033`*^9, 3.7714149693041935`*^9}, 
   3.7714361743575*^9, 3.7719314623912077`*^9},
 CellLabel->"In[71]:=",ExpressionUUID->"0f4f3ff1-70db-4149-a53a-e96ecc0e4f7d"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {20., {0., 20.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["13", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {20., {0., 20.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Resize", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{139, 139}], 
                    "Resampling" -> "Linear", "Dimensionality" -> 2, 
                    "$Channels" -> 3, "$InputSize" -> {128, 128}, 
                    "$OutputSize" -> {139, 139}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 139, 139}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "ImageAugmentation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {135, 135}, 
                    "ReflectionProbabilities" -> {0., 0.}, "$Channels" -> 3, 
                    "$InputDimensions" -> {139, 139}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 139, 139}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 135, 135}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{20, 3, 5, 5}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{20}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 20, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {135, 135}, 
                    "$OutputSize" -> {131, 131}, "$WeightsInputChannels" -> 
                    3], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 135, 135}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 131, 131}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {20, 131, 131}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 131, 131}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 131, 131}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 20, "$InputSize" -> {131, 131}, 
                    "$OutputSize" -> {65, 65}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 131, 131}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 65, 65}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{50, 20, 5, 5}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{50}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 50, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 20, "$InputSize" -> {65, 65}, 
                    "$OutputSize" -> {61, 61}, "$WeightsInputChannels" -> 20],
                     "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 65, 65}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 61, 61}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {50, 61, 61}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 61, 61}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 61, 61}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 50, "$InputSize" -> {61, 61}, 
                    "$OutputSize" -> {30, 30}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 61, 61}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 30, 30}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{45000}, NeuralNetworks`RealT]]], 
                    "10" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{500, 45000}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{500}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {500}, "$OutputSize" -> 500, 
                    "$InputSize" -> 45000, "$InputDimensions" -> {45000}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{45000}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
                    "11" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {500}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
                    "12" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{2, 500}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{2}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 500, "$InputDimensions" -> {500}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{3, 128, 128}, 
                    NeuralNetworks`RealT], "Type" -> "Image", 
                    "ImageSize" -> {128, 128}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "Interleaving" -> False, 
                    "MeanImage" -> None, "VarianceImage" -> None, "$Version" -> 
                    "12.0.10"]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "Type" -> "Class", 
                    "Labels" -> {True, False}, "InputDepth" -> 1, 
                    "Dimensions" -> 2, "$Rank" -> 0, "$Version" -> 
                    "12.0.10"]]], NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part = Null, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"128\"", "\"128\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ResizeLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"139\"", "\"139\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ImageAugmentationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"135\"", "\"135\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"131\"", "\"131\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"131\"", "\"131\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"65\"", "\"65\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"61\"", "\"61\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"61\"", "\"61\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"30\"", "\"30\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"45000\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"12\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"13\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {60., {8., 15.}}, 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{3.771415611472901*^9, 3.7715007192093096`*^9, 
  3.771510017227006*^9, 3.7719314623922043`*^9},
 CellLabel->"Out[71]=",ExpressionUUID->"17335084-fbca-4c61-a41c-3fbf3e35050a"],

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{"\"\<augmentnet.wlnet\>\"", ",", "trained"}], "]"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.771436699938341*^9, 3.7714367397764187`*^9}, 
   3.771931462393202*^9},
 CellLabel->"In[72]:=",ExpressionUUID->"23063470-1c0a-4c27-a35c-60b1ddfb6d74"],

Cell[BoxData["\<\"augmentnet.wlnet\"\>"], "Output",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{3.771495590408188*^9, 3.77150071927182*^9, 
  3.771510023681159*^9, 3.771931462393202*^9},
 CellLabel->"Out[72]=",ExpressionUUID->"f012b678-ad8a-4fd2-adaa-06fd3e0fb0d3"],

Cell[BoxData[
 RowBox[{"trained2", "=", 
  RowBox[{"results", "[", "\"\<TrainedNet\>\"", "]"}]}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.771510052649283*^9, 3.771510077536652*^9}, 
   3.771931462393202*^9},
 CellLabel->"In[73]:=",ExpressionUUID->"21a32f02-04c0-4747-b795-b741a1fa962d"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["12", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Resize", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{135, 135}], 
                    "Resampling" -> "Linear", "Dimensionality" -> 2, 
                    "$Channels" -> 3, "$InputSize" -> {128, 128}, 
                    "$OutputSize" -> {135, 135}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 135, 135}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{20, 3, 5, 5}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{20}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 20, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {135, 135}, 
                    "$OutputSize" -> {131, 131}, "$WeightsInputChannels" -> 
                    3], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 135, 135}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 131, 131}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {20, 131, 131}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 131, 131}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 131, 131}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 20, "$InputSize" -> {131, 131}, 
                    "$OutputSize" -> {65, 65}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 131, 131}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 65, 65}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{50, 20, 5, 5}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{50}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 50, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 20, "$InputSize" -> {65, 65}, 
                    "$OutputSize" -> {61, 61}, "$WeightsInputChannels" -> 20],
                     "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 65, 65}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 61, 61}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {50, 61, 61}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 61, 61}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 61, 61}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 50, "$InputSize" -> {61, 61}, 
                    "$OutputSize" -> {30, 30}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 61, 61}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 30, 30}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{45000}, NeuralNetworks`RealT]]], 
                    "9" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{500, 45000}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{500}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {500}, "$OutputSize" -> 500, 
                    "$InputSize" -> 45000, "$InputDimensions" -> {45000}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{45000}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
                    "10" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {500}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
                    "11" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{2, 500}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{2}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 500, "$InputDimensions" -> {500}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "12" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{3, 128, 128}, 
                    NeuralNetworks`RealT], "Type" -> "Image", 
                    "ImageSize" -> {128, 128}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "Interleaving" -> False, 
                    "MeanImage" -> None, "VarianceImage" -> None, "$Version" -> 
                    "12.0.10"]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "Type" -> "Class", 
                    "Labels" -> {True, False}, "InputDepth" -> 1, 
                    "Dimensions" -> 2, "$Rank" -> 0, "$Version" -> 
                    "12.0.10"]]], NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"128\"", "\"128\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ResizeLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"135\"", "\"135\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"131\"", "\"131\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"131\"", "\"131\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"65\"", "\"65\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"61\"", "\"61\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"61\"", "\"61\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"30\"", "\"30\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"45000\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"12\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{3.77151007843795*^9, 3.7719314623941965`*^9},
 CellLabel->"Out[73]=",ExpressionUUID->"e1124c12-3ae4-457e-8b24-9df4cd9d0e32"],

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{"\"\<nonaugmentnet.wlnet\>\"", ",", "trained2"}], "]"}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{{3.771510083046057*^9, 3.771510117246075*^9}, 
   3.7719314623941965`*^9},
 CellLabel->"In[74]:=",ExpressionUUID->"87192415-c5ef-4d04-b969-361da7e1908b"],

Cell[BoxData["\<\"nonaugmentnet.wlnet\"\>"], "Output",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellChangeTimes->{3.771510118740918*^9, 3.771931462395197*^9},
 CellLabel->"Out[74]=",ExpressionUUID->"0b372e11-111b-488b-9df5-a5056d50aeb1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trained", "=", 
  RowBox[{
  "Import", "[", 
   "\"\<C:\\\\Users\\\\Shruti Panse\\\\Desktop\\\\Shruti Panse- Wolfram \
Summer Camp\\\\WSS-Template\\\\Final Project\\\\augmentnet.wlnet\>\"", 
   "]"}]}]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellChangeTimes->{{3.7715801843760366`*^9, 3.7715801925272436`*^9}, {
   3.771580263445693*^9, 3.771580273168664*^9}, 3.771931462396195*^9, {
   3.7719408833016095`*^9, 
   3.7719409052429514`*^9}},ExpressionUUID->"8c5611a9-8571-4994-a8fc-\
d42a666fb61c"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {20., {0., 20.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"image\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\" \"", 
                    "\"port\""}, "RowDefault"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"class\"", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of layers\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["13", "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {20., {0., 20.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GraphicsBox[{
                Thickness[0.014925373134328358`], {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 RGBColor[0.729, 0.729, 0.729], 
                 Thickness[0.018686567164179105`], 
                 Opacity[1.], 
                 JoinForm[{"Miter", 10.}], 
                 
                 JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                  CurveClosed -> {0}]}, {
                 FaceForm[{
                   RGBColor[0.631, 0.8160000000000001, 0.498], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5, 
                  103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.40800000000000003`, 0.627, 0.196], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                  15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                  103.}, {23., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.38, 0.753, 0.89], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5, 
                  103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.24300000000000002`, 0.608, 0.71], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                  29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                  103.}, {37., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.584, 0.51, 0.8390000000000001], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5, 
                  103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                 FaceForm[{
                   RGBColor[0.4, 0.396, 0.659], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                  43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                  103.}, {51., 103.}}}]}, {
                 FaceForm[{
                   RGBColor[0.549, 0.549, 0.549], 
                   Opacity[1.]}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {25.,
                   95.}, {25., 88.}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {39.,
                   95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
               ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Resize", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> 
                    NeuralNetworks`ValidatedParameter[{139, 139}], 
                    "Resampling" -> "Linear", "Dimensionality" -> 2, 
                    "$Channels" -> 3, "$InputSize" -> {128, 128}, 
                    "$OutputSize" -> {139, 139}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 128, 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 139, 139}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "ImageAugmentation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {135, 135}, 
                    "ReflectionProbabilities" -> {0., 0.}, "$Channels" -> 3, 
                    "$InputDimensions" -> {139, 139}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 139, 139}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{3, 135, 135}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{20, 3, 5, 5}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{20}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 20, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 3, "$InputSize" -> {135, 135}, 
                    "$OutputSize" -> {131, 131}, "$WeightsInputChannels" -> 
                    3], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{3, 135, 135}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 131, 131}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {20, 131, 131}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 131, 131}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 131, 131}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 20, "$InputSize" -> {131, 131}, 
                    "$OutputSize" -> {65, 65}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 131, 131}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{20, 65, 65}, 
                    NeuralNetworks`RealT]]], "6" -> 
                    Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{50, 20, 5, 5}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{50}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 50, "KernelSize" -> {5, 5}, 
                    "Stride" -> {1, 1}, "PaddingSize" -> {{0, 0}, {0, 0}}, 
                    "Dilation" -> {1, 1}, "ChannelGroups" -> 1, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$InputChannels" -> 20, "$InputSize" -> {65, 65}, 
                    "$OutputSize" -> {61, 61}, "$WeightsInputChannels" -> 20],
                     "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{20, 65, 65}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 61, 61}, 
                    NeuralNetworks`RealT]]], "7" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {50, 61, 61}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 61, 61}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 61, 61}, 
                    NeuralNetworks`RealT]]], "8" -> 
                    Association[
                    "Type" -> "Pooling", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "KernelSize" -> {2, 2}, "Stride" -> {2, 2}, 
                    "PaddingSize" -> {{0, 0}, {0, 0}}, "Function" -> Max, 
                    "Dimensionality" -> 2, "Interleaving" -> False, 
                    "$Channels" -> 50, "$InputSize" -> {61, 61}, 
                    "$OutputSize" -> {30, 30}, "$MXPoolingConvention" -> 
                    "valid", "$MXGlobalPool" -> False], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 61, 61}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{50, 30, 30}, 
                    NeuralNetworks`RealT]]], "9" -> 
                    Association[
                    "Type" -> "Flatten", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Level" -> DirectedInfinity[1]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{50, 30, 30}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{45000}, NeuralNetworks`RealT]]], 
                    "10" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> 
                    NeuralNetworks`Private`DummyArray[{500, 45000}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{500}]], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {500}, "$OutputSize" -> 500, 
                    "$InputSize" -> 45000, "$InputDimensions" -> {45000}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{45000}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
                    "11" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[Ramp], 
                    "$Dimensions" -> {500}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]]], 
                    "12" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{2, 500}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{2}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {2}, "$OutputSize" -> 2, 
                    "$InputSize" -> 500, "$InputDimensions" -> {500}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{500}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]], "13" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{2}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "6", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "5", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "7", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "6", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "8", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "7", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "9", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "8", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "10", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "9", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "11", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "10", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "12", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "11", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "13", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "12", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "13", "Outputs", "Output"]}, "Inputs" -> 
                    Association[
                    "Input" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{3, 128, 128}, 
                    NeuralNetworks`RealT], "Type" -> "Image", 
                    "ImageSize" -> {128, 128}, "ColorSpace" -> "RGB", 
                    "ColorChannels" -> 3, "Interleaving" -> False, 
                    "MeanImage" -> None, "VarianceImage" -> None, "$Version" -> 
                    "12.0.10"]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    Association[
                    "Form" -> NeuralNetworks`TensorT[{2}, 
                    NeuralNetworks`RealT], "Type" -> "Class", 
                    "Labels" -> {True, False}, "InputDepth" -> 1, 
                    "Dimensions" -> 2, "$Rank" -> 0, "$Version" -> 
                    "12.0.10"]]], NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part = Null, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    NeuralNetworks`Private`NetChain`MouseClickBoxes[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TagBox[
                    GridBox[{{"\"image\""}, {
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{"\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", 
                    "\":\"", "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"128\"", "\"128\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    BaselinePosition -> 2, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ResizeLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"139\"", "\"139\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ImageAugmentationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"3\"", 
                    "\"135\"", "\"135\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"131\"", "\"131\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"4\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"131\"", "\"131\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "4"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"5\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"20\"", 
                    "\"65\"", "\"65\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "5"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"6\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["ConvolutionLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"61\"", "\"61\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "6"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"7\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"61\"", "\"61\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "7"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"8\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["PoolingLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"array\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"50\"", 
                    "\"30\"", "\"30\""}, "RowWithSeparators"], 
                    "\"\[VeryThinSpace]\"", "\")\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "8"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"9\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["FlattenLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"45000\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "9"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"10\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "10"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"11\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["Ramp", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"500\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "11"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"12\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "12"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"13\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\"vector\"", "\" \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"2\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                    Annotation[#, {"Nodes", "13"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"class\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null]]}, 
                    NeuralNetworks`Private`NetChain`fmtSelected[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`GetSharedArrays[
                    NeuralNetworks`Private`NetChain`assoc3]]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {60., {8., 15.}}, 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Input",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellChangeTimes->{{3.771940905243952*^9, 
  3.771940910023176*^9}},ExpressionUUID->"f4ac6b77-0749-4278-93c8-\
3dacf870aa13"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Creating Visualizations ", "Section",
 CellChangeTimes->{{3.7719316458956985`*^9, 
  3.771931655351432*^9}},ExpressionUUID->"567ea8cd-bcfc-498d-9424-\
906599773998"],

Cell["\<\
To display the results of training and testing, I created a \
ConfusionMatrixPlot to visually represent the success of the neural net. I \
used the function ClassifierMeasurements to make the matrix. The orange \
colored boxes represent the times that the actual answer and the machine \
prediction were the same. There were 3336 times that the actual and machine \
predicted answer were true and 3344 times that the predicted and actual \
answer were false. So, because they are close, this means that the neural \
network did not prefer true over false. I also added in extra information \
such as the  Accuracy, Precision, and WorstClassifiedExamples to provide more \
information about the neural network. In conclusion, the neural network had \
97% accuracy for both detecting malaria infected and uninfected cells.\
\>", "Text",
 CellChangeTimes->{{3.7719351397044373`*^9, 3.771935216423526*^9}, {
   3.771935262036627*^9, 3.771935381256252*^9}, {3.771935921188162*^9, 
   3.771936000210844*^9}, 3.771939502475153*^9, {3.771939709338222*^9, 
   3.7719397460700226`*^9}, {3.7719410046672397`*^9, 
   3.7719410423999453`*^9}, {3.771941178330551*^9, 
   3.771941181361449*^9}},ExpressionUUID->"7ab6a12f-5771-42dd-abf9-\
d49e82217586"],

Cell[BoxData[
 RowBox[{
  RowBox[{"testset", "=", " ", 
   RowBox[{"Import", "/@", 
    RowBox[{"Keys", "[", "validationdata", "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.7714151073159227`*^9, 3.771415122118481*^9}, {
  3.771415214566142*^9, 3.7714152580983458`*^9}, {3.7714956167963324`*^9, 
  3.771495632986802*^9}, {3.771580180354824*^9, 3.771580180674968*^9}, {
  3.7715804456027822`*^9, 3.7715804573842893`*^9}},
 CellLabel->"In[35]:=",ExpressionUUID->"b2b8db7a-8894-46f3-828e-7d63c29bb43e"],

Cell[BoxData[
 RowBox[{"visual", "=", " ", 
  RowBox[{"ClassifierMeasurements", "[", 
   RowBox[{"trained", ",", " ", 
    RowBox[{"Normal", "[", 
     RowBox[{"RandomSample", "[", 
      RowBox[{"AssociationThread", "[", 
       RowBox[{"testset", "\[Rule]", " ", 
        RowBox[{"Values", "[", "validationdata", "]"}]}], "]"}], "]"}], 
     "]"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.771414893502867*^9, 3.7714149081190643`*^9}, {
  3.7714150040216055`*^9, 3.7714150173421407`*^9}, {3.7714150544133034`*^9, 
  3.7714150694562254`*^9}, {3.7714152764603157`*^9, 3.7714152780075674`*^9}, {
  3.7714153386914797`*^9, 3.7714153468642373`*^9}, {3.7714951899503593`*^9, 
  3.7714952791555347`*^9}, {3.771580492672943*^9, 3.7715805284662523`*^9}, {
  3.771580570954665*^9, 3.7715805724307194`*^9}, {3.7715822670632296`*^9, 
  3.7715822815843725`*^9}, {3.771582346219145*^9, 3.771582354251669*^9}},
 CellLabel->"In[38]:=",ExpressionUUID->"74f7f6ee-a0a8-4485-95e3-76a3abe1fe8c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"visual", "/@", 
   RowBox[{"{", 
    RowBox[{
    "\"\<Accuracy\>\"", ",", "\"\<FScore\>\"", ",", 
     "\"\<ConfusionMatrixPlot\>\"", ",", "\"\<Precision\>\"", ",", 
     "\"\<Recall\>\"", ",", "\"\<Sensitivity\>\"", ",", 
     "\"\<FalsePositiveRate\>\"", ",", "\"\<WorstClassifiedExamples\>\""}], 
    "}"}]}], "//", "TableForm"}]], "Input",
 CellChangeTimes->{
  3.77158341601538*^9, {3.7715839578258886`*^9, 3.7715839915766573`*^9}, {
   3.7715840264514294`*^9, 3.771584060988098*^9}, {3.771584151946967*^9, 
   3.7715841904310827`*^9}, 3.771873289410981*^9, 
   3.7718734620543947`*^9},ExpressionUUID->"2bf3b826-3d03-46be-b729-\
0cee05d804e0"],

Cell[BoxData[
 InterpretationBox[GridBox[{
    {"0.9696617796487152`", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\
\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>"},
    {
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"True", "\[Rule]", "0.9696265077750326`"}], ",", 
       RowBox[{"False", "\[Rule]", "0.9696969696969697`"}]}], 
      "\[RightAssociation]"}], "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", \
"\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>"},
    {
     GraphicsBox[
      RasterBox[{{{0.9389342647886956, 0.8876926731612381, 
       0.7152637629346882}, {1., 0.42, 0.}}, {{0.9470897104856508, 
       0.47255971724898654`, 0.0026342552757478224`}, {0.9220216119108112, 
       0.823784107867886, 0.5490320752806648}}}, {{0, 0}, {2, 2}}, {0, 1}],
      Epilog->{{
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["3336", TraditionalForm], {0.5, 0.5}], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "3336", "\" examples of \"", "True", 
                 "\" correctly classified\""}, "RowDefault"]}, {
               
               TemplateBox[{"\"Precision = \"", "0.9723112795103468`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Recall = \"", "0.9669565217391304`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"FScore = \"", "0.9696265077750327`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{3336, " examples of ", True, " correctly classified"}], 
             Row[{"Precision = ", 0.9723112795103468}], 
             Row[{"Recall = ", 0.9669565217391304}], 
             Row[{"FScore = ", 0.9696265077750327}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["95", TraditionalForm], {0.5, 0.5}], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "95", "\" examples of \"", "False", "\" misclassified as \"", 
                 "True"}, "RowDefault"]}, {
               
               TemplateBox[{
                "\"Column fraction = \"", "0.027688720489653162`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.027624309392265192`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{95, " examples of ", False, " misclassified as ", True}], 
             Row[{"Column fraction = ", 0.027688720489653162`}], 
             Row[{"Row fraction = ", 0.027624309392265192`}]}], 
           "Tooltip"]& ]}, {
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["114", TraditionalForm], {0.5, 0.5}], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "114", "\" examples of \"", "True", "\" misclassified as \"", 
                 "False"}, "RowDefault"]}, {
               
               TemplateBox[{"\"Column fraction = \"", "0.03296703296703297`"},
                 "RowDefault"]}, {
               
               TemplateBox[{"\"Row fraction = \"", "0.03304347826086956`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{114, " examples of ", True, " misclassified as ", False}], 
             Row[{"Column fraction = ", 0.03296703296703297}], 
             Row[{"Row fraction = ", 0.03304347826086956}]}], "Tooltip"]& ], 
         TagBox[
          TooltipBox[
           InsetBox[
            GraphicsBox[{
              Opacity[1.], 
              InsetBox[
               FormBox["3344", TraditionalForm], {0.5, 0.5}], 
              Opacity[0.], 
              RectangleBox[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 
            1.}], 
           TagBox[
            GridBox[{{
               
               TemplateBox[{
                "3344", "\" examples of \"", "False", 
                 "\" correctly classified\""}, "RowDefault"]}, {
               
               TemplateBox[{"\"Precision = \"", "0.967032967032967`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"Recall = \"", "0.9723756906077348`"}, 
                "RowDefault"]}, {
               
               TemplateBox[{"\"FScore = \"", "0.9696969696969697`"}, 
                "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
             DefaultBaseStyle -> "Column", 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
            "Column"]], Annotation[#, 
           Column[{
             Row[{3344, " examples of ", False, " correctly classified"}], 
             Row[{"Precision = ", 0.967032967032967}], 
             Row[{"Recall = ", 0.9723756906077348}], 
             Row[{"FScore = ", 0.9696969696969697}]}], "Tooltip"]& ]}, 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {10., 
           1.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "3450", "\" example\"", "\"s\"", "\" of class \"", "True"}, 
               "RowDefault"]}, {
              
              TemplateBox[{"\"Recall = \"", "0.9669565217391304`"}, 
               "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            Row[{3450, " example", "s", " of class ", True}], 
            Row[{"Recall = ", 0.9669565217391304}]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {10., 
           1.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "3439", "\" example\"", "\"s\"", "\" of class \"", "False"}, 
               "RowDefault"]}, {
              
              TemplateBox[{"\"Recall = \"", "0.9723756906077348`"}, 
               "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            Row[{3439, " example", "s", " of class ", False}], 
            Row[{"Recall = ", 0.9723756906077348}]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 
           10.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "3431", "\" example\"", "\"s\"", "\" classified as \"", 
                "True"}, "RowDefault"]}, {
              
              TemplateBox[{"\"Precision = \"", "0.9723112795103468`"}, 
               "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            Row[{3431, " example", "s", " classified as ", True}], 
            Row[{"Precision = ", 0.9723112795103468}]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          InsetBox[
           GraphicsBox[{
             Opacity[0.], 
             RectangleBox[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 
           10.}], 
          TagBox[
           GridBox[{{
              
              TemplateBox[{
               "3458", "\" example\"", "\"s\"", "\" classified as \"", 
                "False"}, "RowDefault"]}, {
              
              TemplateBox[{"\"Precision = \"", "0.967032967032967`"}, 
               "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
           "Column"]], Annotation[#, 
          Column[{
            Row[{3458, " example", "s", " classified as ", False}], 
            Row[{"Precision = ", 0.967032967032967}]}], "Tooltip"]& ]},
      Frame->True,
      FrameLabel->{
        FormBox["\"predicted class\"", TraditionalForm], 
        FormBox["\"actual class\"", TraditionalForm]},
      FrameTicks->{{{{1.5, 
           FormBox[
            RotationBox["True", BoxRotation -> 0.], TraditionalForm]}, {0.5, 
           FormBox[
            RotationBox["False", BoxRotation -> 0.], TraditionalForm]}}, {{
          1.5, 
           FormBox["3450", TraditionalForm]}, {0.5, 
           FormBox["3439", TraditionalForm]}}}, {{{0.5, 
           FormBox[
            RotationBox["3431", BoxRotation -> 1.5707963267948966`], 
            TraditionalForm]}, {1.5, 
           FormBox[
            RotationBox["3458", BoxRotation -> 1.5707963267948966`], 
            TraditionalForm]}}, {{0.5, 
           FormBox[
            RotationBox["True", BoxRotation -> 1.5707963267948966`], 
            TraditionalForm]}, {1.5, 
           FormBox[
            RotationBox["False", BoxRotation -> 1.5707963267948966`], 
            TraditionalForm]}}}},
      FrameTicksStyle->12,
      GridLinesStyle->Directive[
        GrayLevel[0.5, 0.4]],
      ImageSize->300,
      Method->{
       "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
        "DefaultGraphicsInteraction" -> {
         "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
          "Effects" -> {
           "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
            "Droplines" -> {
             "freeformCursorMode" -> True, 
              "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
        "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
        "RangePadding" -> Scaled[0.05]},
      PlotRangePadding->
       None], "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\
\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>"},
    {
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"True", "\[Rule]", "0.9723112795103468`"}], ",", 
       RowBox[{"False", "\[Rule]", "0.9670329670329669`"}]}], 
      "\[RightAssociation]"}], "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", \
"\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>"},
    {
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"True", "\[Rule]", "0.9669565217391304`"}], ",", 
       RowBox[{"False", "\[Rule]", "0.9723756906077348`"}]}], 
      "\[RightAssociation]"}], "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", \
"\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>"},
    {
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"True", "\[Rule]", "0.9669565217391304`"}], ",", 
       RowBox[{"False", "\[Rule]", "0.9723756906077348`"}]}], 
      "\[RightAssociation]"}], "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", \
"\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>"},
    {
     RowBox[{"\[LeftAssociation]", 
      RowBox[{
       RowBox[{"True", "\[Rule]", "0.027624309392265192`"}], ",", 
       RowBox[{"False", "\[Rule]", "0.03304347826086956`"}]}], 
      "\[RightAssociation]"}], "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", \
"\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>", "\<\"\"\>"},
    {
     RowBox[{
      GraphicsBox[
       TagBox[RasterBox[CompressedData["
1:eJztnWd7HNeV5+fZfbMv9yvsB9jxeGYcxmGksWXJCrYlywq2LFsSFSzZ6zzj
HY1lWxKJ1KGqOiMHkmAmJTopUswBQANodCMDpDzPfpA95/7vPXXqVoMGCFKk
NKrnsJ9Cs4Hurl+dc0+69/6vp37yzWf/29/8zd/84n/Qwzef/NW//PznT/77
g/+Tfnjox794/rkfP/P03T/+5TPPPfPzzz713+nJEfuPz7d5XHq2MPVsefKZ
8qUdxYtPFS4+USSZeKo8uaNCT049W5n+YW/9hVr9R+XJF4pT/6e8/Xfc/rF+
tO/ysX6SK68NkNCPJJv/dfoV/PpVfov+d+1I7+rhGj3i7ejkenz2D/qY+F7h
wncLl75XOv9YRCcXHytd+E5x8nvViccrk09Upp6sTj/bO/V0tf5cZeLp4uQP
Kjf78/IBOlq2xBc3xtWR4X8heP2W3uLWOS4+XLjwSOHio8ULD0XnHgzOfjMk
ofPz3wrpycnHKgS6/kTvxPfLhJtU+2Z/Xj40Vlx/ki39On7xKnxxA8AyXH6t
98rr/Hg9PvsHdJx5ODj/cHTqG7mTX8+e+lr+5H05ejxxT+a9e7Onvx7QOT2e
vj9/7kEGPfFo6cIj0cR3SqTdpOlEmYz5dt595WBl9VB17XCNHul8+UB5aX8J
wud7C4t7InpcHi8u7ivSM/Qa/Aq/nn7RMQUCbau1bPTu+C2yvSvm3elN6V0W
xgt4d3qLdaezVl7v+8vv+XE7X/kDPk4+mD37YPTe1zLv3t3z9p09b9/R9e6d
Pe98pfvEXZnT9wan7smfuS8kyiRn7w9Ofz139pt5EtJ0st5nvxttky/gCl8P
McGFEGJQFsR45apDjOsvJ++/Pqhlo3fHr9AfIazyXvNjAd5xZV9p7UCFEF8R
xB9CvqceyJ76ekAKy1jvyLzz5Z53vtz17h3d792ZOXlXliiTnP1aQHLmG0Q5
S7pMQrp8/uHw4mOFqSe35WhBRwCXLibJ6v4yXVhCSY9LewlxkR7jE6faEP6t
w7XLTnOtFU1p8Ubv/j4Npkd66e/M741ao/nmSK45lCeZHwkXRpk1f4yDDjH9
/WM1Ms4fCvs89VxU31G88DBpZY7YEc03b+/88z/vIvnTF3e+/SXmy4jvzoHv
ua+HrLz3B2TJaVymAfrCQzQuhxOPhRNPhJNPR7M/3QJo2FioIevvgYqIx5dk
ebxM4s6LJEIZhjoWsgNGMKRq1lBk4P7L8aH//P0wCSFjs2yMw+JYYW4w1xjI
El86aQ0H9MzSbv4Y6wfZyBBl8KXHtaNVPN44QNs8pl6ILj4RXXy0QMhO3NX9
5u1E9tU3buv44xdeJdAnvpIlLT7xlZ4z9wRn7w3P3EdWmodmGouhxTRYsw/2
SHjhO9HFx6OJp4rTz2+B7+r+6sqBGmT1YO/y/urSPiJbhazsq5AQzfnR4uLu
MgmdLIwWl3aXV/aWl/eU8EjQ5VdI1g7UlumGMZRjj/doH0FkBTcnEPxIwr8y
Xp4fi5ojwdxg0BjIz/XmG7Vcsy+gk1Z/uDhUXBwrrY7X1g/0r9PnPFBcPVRa
O1y5fLQGX+vGAdrmMfFCOLGDvOXwxD3df7595xu37STL/O4dGdJcgnvyrjzx
JSETffruvNPfwHhfWUJ85gFysPPnHo0s3yeiiWeizb874SOmEEIMvsC6vLdK
srSnQlhbI4WFsRJhpYu8aE5wTmpFIqZb1HzJ/FncNvLH6f4RWTvUR4Jz+i/6
Cwx3KCS4YEpwZ6vZmXLPdKl7ppIhxPPDxcVRuq+qa/uqZkSI+d7KhvriD/Ln
v58//3D+vXuNT8UDbk74nvpqAPsM/SW4JGe+EZ57oECONME1HnVw9lv8F85/
J3/h8fzEjnDz704cV/f1kizvp+vctzJeA1YhS0Jk54mv0VwI/ShCPwI6ASJZ
2F0god+iX8cfwd/BiYi8i/x9gguyVqpBo5KfLedmSll6pB/pSXpBa4jf1A4Q
B8rWXBuLfWtGTBMvBOefIAObf/de6yqfvbdAiKHFxPfUV3OkueQ8k5z/RkR8
z94fXXiwdOGhouMbnXuIYquQ+F56PCBrsPl3J6Dgu7a/j0wf/SgIAHdxd2Vh
rEyKQ+oDoSvcHGRdo+vcGo6AWFiTAYeyi9hn1O2h7xPo7PxAZOCGjVrAKGO4
eSPZeqGHpFkLFwZL9GL+m6Mh3UhsalxkR3aeKN84Utd21H9SvPBkeObh3In7
egjuua8XztwTmWGX/Ocess8El/neE7AKfy24cH+BlJcQ03h97gFOfZz/VoHg
QoUvPR5NPrkV+zxegwDx6r6+5b2EmPSuSlhZRkowjCDL6jMQkbVkg0nXeSBa
GGTKhAmsAd3TdPkvEfwKhtrZPoy2lulsOSBplILZYn6mkMPjVNAzGfbQ863e
YrPGN1ijn0dqshsY/eEfXtlKUuU6Huv7azRqrI5X1vZUV8bKS/2VpVJ5KVtr
vFSa/mnh0tPhuUeDMw/kzn+jePZrDPfdf+kmee/LmVNfydHIixAJfEl/SYuJ
8vlvRsSXlJcUmfT3zIO5Mw9mLn47f/F7+c1/MMKq+a7t79d8WyNWYReHyvMD
RRKoD8EldWNr6Sjzk4Y+tJvdoSF6cWEjkT9irHFIZBuVENpKQCGEmITgQuqF
PMlMKZwtR1bTe/P0dxjxHnYY2LtDiuZIBQLv+sZhlWONrh6ZwfEKfxLiO1he
LFcW89XJX+VnfsYe78TjJR5GvxZxHETKe3vXiS/1gO+pr2Te+3I3jcuE+Nx9
ZL3ZhSa+F79VZL4PhHRC7veFR6ILjwSXvhNceDy3+Q8G4ywmGvoLxKS5gozI
tvoLEJw3+8iiJhSZjbYT3AzyW3JvyB+h3yVGwGQ0N4Taar7Q3HqYmY7oPCSZ
KdBromatRK9nYcQhv92w9fEW9xVNvEbedRl8P5gRmbw+8u0plODIYqy8PFQh
vvPZMukv8SWPl7xf4ksj7Ik7c2/d3v3mF3eRvH1bJyE+fWeWhCif/Wqe4JKc
uid7+t4cOc+kwiQXHmS4hPjStyOKgreqvxh5DdxeeERALHzZRCumBmshKaHo
I5vNATxZavYVIXROMj9QnustkDRqkchsNWQxcAUxi1NbI6TFQT3MgW+jUiAt
pkf6Rf4LZN4HQhqOybtDME6uNfGF8t5Qvs7o9a3u7SUhyhxZjBSXyHxVSs2e
aPqlsP7zaOK5Itnn0/dnyUMmPX3z8zv/+JmX//yZV97+Yue7t3W/czvZ6h5S
5LNfDc/fm7/4NXrMnr27B7HwqftCEhqFzzyYP//tkOKjC09t2T6LtwzNpdEW
wy7rhbG0oonQOyCG9oE4lNH7X/otUVK8bL6v0OolBQzhRBmJSNxoG5CqapkK
soRVCz1pKEPlI7bVtdJ8f5VGkOUR9tIplCa4V45x0PT+8f7Lr/etm0zIjTDU
dPU4HifZ17823mdUuLI8WgLf+Wyx+Up54if58zuCi48VLjwU0QhL8e/bX+x4
8/O73vynnW98budbX+ggyidu7zn5pQzJmTt7zt+dO3dPRvOlcIm86JP395CT
Nv10eUv5DTnoypCvS3zJYU7zJdMKarC0wlROrKmk1/QyRDyJ+8HCrYX4L+Fr
XCnrTYn59fiCKVGGCF/nV4cw163eMr0FDetIvLDyHq5AeRE03SC+pBrO+vXT
0GaG4NrKaGVxoLRQLhLfuZcLkz/LXXiGQ9fz3+Kx9e3bdr3zz51vf77jrc/t
evNznZC3v9D97m1dJCdu7zx9R+b0XT0kJ++mYCpHfMmdvvhImWtJj0ezz1Zm
f3gtyTrCOj+a4AvEdNGgv1YBU3ydd5QnagJR1JkQz1bz/LJqQP8Lvgh/HCP4
VCGMsAcXj5ovnsTr4W6xoSZFNu+CGG1lX4lLEocrnAAx2Y8blAMRvxQ+KvG9
PN5LfBfoDi+Ec93hzG+C2X8rTD5PoWv2zAPZ03dnya1655+73vjsrrc+1/nO
F7pJiO9bn+965wudRjreu62bKJPY0sO9wflvFuuP1+ae6pt6stx4rjrzQmn2
R4Xpn0T1n+bmXymthX1rtd6VoQrfV2OljT4qm+XdFeErKgx31/OLMLzS2Get
a4XTEaKYTNDwpRMS+l8w1a9RsS1G20BEa67mKyaazi1fvKYYsJTz/HkG2N3i
BMsedrQoaLp8tAZbfSP4yvir+dIw0aqFjTA/25mffSWce7E4+UMuDVCMc+Iu
jolO3p7782d2vvWZzjf/qePtz3eJ0I+k1KzaX9hFNvztL3We+EoP+VrkQs88
XpvZUZ18sjD7fKXxo0r9+eDSC9nJH2davy2tBwNr1T6KyOh96d7e+FbstYOv
4oto1yQfotT4W2JnqRpxNOo0V/giSl3oL+K/IFBhEnjLHl9togHRG3kF7mQ+
g3M6mcj10DN8SxTZ1Nt7jwK6Ma5zre5nQw2+NyJHnQw92DhT/EuD73wlaAb5
Rlcw90ow92Jh6seFiR2Fcw/lTt7dffrO/Hu3Zf/06Vff+NSuP3+6443PdBJr
kjc/zfLGp1596zO7WLs/bwKoO3PgO/tEbfbp2qWnoqlnCtPPF6eeC84+03nu
B53gu1rpXegtsZkd2TC1JWGRHn8lMhK1NTEOkyWC830leTQSQcgI05OGb5lu
AHk+9qYcX4IC0XzTBtmDS0xJ6ATn8KsxFpMK88cbKPBXGC1ywuFA6f0jtRsU
KJFfajV3PztX5D+vjJQX+6MF8goM3/pvs9P/Hs78snxxR/DeN7tPfz1HfElV
//iPO//4yZ1/+odX//yP/PiHT778x79/hc7xSPTJehNfcqppCKYQqf54eWZH
mfheeCI38Uxu+vno/HPdF17oBt+Vcm2+VgRfAre8m4M176Mip2Epj1Xi4Nd4
wkBM4EglBas+MVLA8GoQM1+ba6pZ3F4EZOEaa6w11/OpIEITUs/lSEBZnK5G
iUOnuSpHZJyHGeFS48p4tH6wLOESPVJcfN1Brxi47DwPlxb6wvlSOJfPzXTk
Zl7OE9+F/xigEPjEA10U0hI1Us8/fWrX8b99+fW//Q2RFcTHP/Hb33/iFeL+
h394lWw1giZyoS89VJr+fqn+ZPHSUwEJ8SU5vWPXpR9l5l4qrOb6loqVVrUA
vmy7TBXG+4Tk/pGJJuGTPQh+WRDjgB07xmxm2fySbtIjnQtfQk8CPRWyeA0U
WSus0Vkb24JO2ixrbSW5lO02kiGZCQLiO5npnsr2OE0nvsWZYoHERNkhZ9KG
8ku7o5V9BY6Ij1RuHF8OMynGHKssDfLg2ypGNP42evLTu7LLXdX/F4w3fl46
+e2ud+/tOPbZF//w2ZfJYSYV/sM/7HrzU11vf6rnjb/vfOMTLH/421f/+Hev
kt1mj/pfuk/elT//jYgTWd8JJ54qTz1VqO+Ipp6Lzu3oPvN0x7kfdjZeKi1n
+pcLfUuV2mJfeWEgcne1r7+IgjlI38P6ywlnFfM6q1sw42xR8IGgpqkfcSI2
WfjWC1nmWwpjSbpVBi4Fv3lCOZEjyjk84klzAo3O4b/M/2ZsAqTIxp8/gKka
k9exMlbmgfhAiRT58qHK+pHr3wywYiJfumjEd76X7TMhbuYCQtzYFa33DC3/
ZnDy+cLb33j16Bd+9e4dnSfuyNEI+8Y/db39uZ63Pt1NOvvHT+z809/t+sMn
Xnn9f/+OFJwj4rvy5F+dvT+YeLR05tHsxSeiyaeLF58Mp54Jafw993Tn+ec7
Gr8urnT3Wb6kXANBazgg93J53I+RkeigIJ2sN31OvvlVqsp5Tdb2OoUtp+HC
43Ijcvy/QCx5SCORiHjOmi+AkmKSgKzwTQu8LNhqc/NwwYI+OSMeLZmesWh1
f5Eok8d13fmS58zGmQbfQdaCxVo0X4laYTCTyU6+0j3zcjD3Uqn+8+jEd1/9
/X3/QYb64sOFE3dl/vDFl0mXj3/6t69/8jfHP/kyWenf//0rZJlP3pGztf4H
wguPROceDc59P3/2ydzkswWS2edLNP6efarr/PNdc78uL3X2LQTVxXJ1aaA0
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
CBxaZ0VtSa4cvw4bXt+yx/8HhqLmmw==
         "], {{0, 160}, {160, 0}}, {0, 255},
         ColorFunction->RGBColor],
        BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
        Selectable->False],
       DefaultBaseStyle->"ImageGraphics",
       ImageSize->{46., Automatic},
       ImageSizeRaw->{160, 160},
       PlotRange->{{0, 160}, {0, 160}}], "\[Rule]", "False"}], 
     RowBox[{
      GraphicsBox[
       TagBox[RasterBox[CompressedData["
1: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
         "], {{0, 115}, {103, 0}}, {0, 255},
         ColorFunction->RGBColor],
        BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
        Selectable->False],
       DefaultBaseStyle->"ImageGraphics",
       ImageSize->{38., Automatic},
       ImageSizeRaw->{103, 115},
       PlotRange->{{0, 103}, {0, 115}}], "\[Rule]", "True"}], 
     RowBox[{
      GraphicsBox[
       TagBox[RasterBox[CompressedData["
1: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
Lmeyw7XUSj0Y1LqhAEFhUqWeuKScvKzinBnNH2ScanEAOBeGs3UG/DwIc0eT
1JXX5iz1ZIZW2gjKDOXERv4ZqRVuNuNb3CwmRbcJXVY0u1dMSD8WLlENTp0e
l6ypyzYYCGwEtSF1MVVROwjIG0hmBOeshhbXSOML1h/Qq6XeDA6hZzBHsKo3
Nf51lTclOK92eVJt7uUm+3ytabpKP1dlmK7U/v5ky71yxWwN5Rtk17U6IWPJ
h5kJG0KpY5SmGcyQa0NGyv+7rOHlYp/qcyfpcCy3Sdk4krTVVif5Rr1t+Srp
GTAXBWdqGS9ZFypMKA9RyCDHowax1srugcwnq/JvKd3sHj8cYfm1gUJbpq2T
WkBpXgdaQLUPWSs+F3S41uFdbXUnGx1zV0xTF3UzlwwT5aqvz3ZOVKoBn1rA
RtIwXAJYwGGh0ViqRpmb7AayA8sYS3+m9EoxVTmIc5uk7VVRIaKNQ8A60CCC
MwoTtIkk7EoLUC+WU/GYrCLO+DH8PJJ5qHpTQQFJo0F8yaipNdS4OICaikHR
54DbX/TI2ZfqrfO1ZnC+X6aartTfO999v0wxdVk7L9I56Hm+wZRsdzIoVixz
YyUzxmKLxo7tFO5tl4vE7/5w6QXi38m3Cec/SaSRSB1rzZA0cUaqTGmzARrG
CbeGKFug8NUrMGpxUZqsQL3VTaOZFDpfzvBqZugRapWTBlBU1OcAP6Q0uN66
WGdZuGpZqLE8uKD+/cn2u+cUDy4oJ8qVaBl5Xg1i4Zp1peN5MiZnbvJ5CT0b
pyVsOKVWXIpa1rZ8jgaRvwRqFE24yrBo4lxjXBIuDcgIrrtLUadqLEhOGDXu
BaqAup3kHqYQ4pWgXtO4V5Q06k3Ded2ezW7f6jXXUq1l9rIe5jxVrr17pvvL
050APnNJRxPzrhqgeUl1HQ6a+1EsqEszBIlPMX/glJtrSRCjzj3kD01W/Cr6
bdyVLS4fXw55yAY2xTkk5xvz1QZwRp7MFg3I1JVHnXg4MVCCVw5tG4V1G+Ew
sHQYCFBTydPlQGmfFqPArwT1qprmcqyI4TyqiDs8y1etgDxdoZm5qJ28oLl3
VvHVmS5IGvAnL1H+jLaJnLbdTm7T4SgtpWUlUy9fCWqZM5Xt9Xoa8xIZOHPm
HhIZNXOW7wJkOC+gXmtwQtJwDIgZnOfOa9AUMm0ZNbwFqNEmEuc26lTBB6Rx
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
CcWJtf+0M5e/ANSc/q0=
         "], {{0, 154}, {121, 0}}, {0, 255},
         ColorFunction->RGBColor],
        BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
        Selectable->False],
       DefaultBaseStyle->"ImageGraphics",
       ImageSize->{38., Automatic},
       ImageSizeRaw->{121, 154},
       PlotRange->{{0, 121}, {0, 154}}], "\[Rule]", "False"}], 
     RowBox[{
      GraphicsBox[
       TagBox[RasterBox[CompressedData["
1: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
p9szDgLqU4Ljl1P6uTDJvwCojjQj
         "], {{0, 115}, {124, 0}}, {0, 255},
         ColorFunction->RGBColor],
        BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
        Selectable->False],
       DefaultBaseStyle->"ImageGraphics",
       ImageSize->{54., Automatic},
       ImageSizeRaw->{124, 115},
       PlotRange->{{0, 124}, {0, 115}}], "\[Rule]", "True"}], 
     RowBox[{
      GraphicsBox[
       TagBox[RasterBox[CompressedData["
1:eJztnVmvHEeangX7xpf+C/4PY8Cw4QtfGgYG9hgGfNvjkRs9M5C6tTRJUdzP
Xvu+nYWktpZaCyUu4naWqjobSWk041/kN+KNePOryKLQrT48RVEV+E4iK09m
VlU+8a0RmfXv/vbNv/m//+q11157+99g8Te/OvNf3nrrV+f+57/Fi//1xtu/
+fUbr//df33jndd//fpb/+Fv/zU2Xsffx/hz62q/fX3xnV8vXnijcPGNwpXf
lS++sXr5t4Xldytrv68t/m5t6c3VtbfWVn67Unx7FVJ7t/javP3M27nfLFz4
h2vX3ly5+g+LV/5+4cpvrqz+brX0zhr4lt9aqb692j5X6p0rD96rdM8U+2dK
s/688/aXtitvLi+8cW3hH68W3lpZ/e1S6XfLAF15a6n2zkrjnaXWO8ud36+u
nysN3l3bOFPcOjsn/nNtS28sLb+5XHi7ANDNd1ZBtv32cu/3a923lgF3/d2V
DYB+a2nznZXNt5c/OFv85L3yR2eLkI/PFCB/ODM37z+z5hT57dX6u4XmOwWA
BuUb75UgN8+Xt84Wbp4tbr27evNMAfLB79cA+tP3yp+dr2A56w8+bz+xDc7C
KRfWz6xunnGsgfjj85UPz5U+gi6/V/70/eofzlc+Plf68EwBlD85W/zsXPnz
89VP51b9Z9s+vlD58Hzp5rnCR8B9xmkx+NJ0gzXVGdb7E6/dkD++V4J8erYw
6w8+bz+xfXqx8sn7pU/OFz+9UP74vcIf3i9hCbn5++WPzq19cnbt4zOrkM/O
lz59r4ilVmb9weftJ7Y/XqqCNeSzi5XPL9ewxPqHZ1chH5xZAVzKFxerlvjn
Fyqz/uDz9hMbiAP0F1fqWPnsYgny1eXqFxfLkD++X9TSrZwvfPbe2ud4eaH0
5cXyV5cqX12sfX4ebr385YXqrUt1CFYgs/5O8/Zj7fPLlS+v1m4vNAGa8uWl
ytdX61i6l5cqty5Xv75SA2KABvGv3i/dvly7daH8zaXqF+876FiCMlYg2Bkd
Y9bfad5+rH292ARxiEPvWQs6Vj6HOl+qfHO1DtxACQWnBB2P/QFLdgmq/6y/
07z9WLu93L610ABx2vNbV2q04VgBa5p0ECdQUsY6ROad/0J/gHAfbeQOWHLn
Ly6k6n/7Wu3rK+6c6DZ4lzsLTchMrsMvp0HHKV9ccbip1yL+p5+HxMGX+s6+
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
KvSlhm73jsOCMOadjUP3o5N9OxI68xvHXvmmcXaNxylnz9+/YJkm8ysO4tOA
bYWcP4OrsbCxB00B7uPe1vFgEwLWXvqvds38JWlBx7326SfpNYAlU5xYY/1u
NXfjsYAbZqPFn7vlQxLczlDt9jqWhI51EMcyznBwMusr8Utp1ERmSeFXL81Y
Rny6zsD+gCn56ufLZavVSdhzwi8qUqnD+JdbGbd7B1jvre93+vuD3sF6/2hz
/XhrTvyUmv1tWVY4k18JtKJfmNKe7Bjabs921N106uzddCDeW6ccIQvzcrgx
AO4n1zef3bw+6yvxS2nUzWjP2yJOrJTwmxST0NklslEeXyM9hnfubJAva+Px
Odgu/4LLfrpxHQacjvvJxuZctU+/MTnaq7e44qxuq5utT/5GJISTUjg7JT7/
dsCdabcVfh9EpcYKDDhWOAcVoCHPtja/v3H953Vj4KvRiExC4nGwcmBVmMaZ
/UG9gruF9Aqu2aOnAHQw3eDu6yoe9HXOOgbuHz64+f2HP+97SX7Wzf/eRBjI
MDIIpbBuHK32vzfE+/S1Ub9H44KxKIfejDvT7UNx3lMw6285b1njjXtP1zef
bWxhiZehCOYlQe8exOErogc9N4qtJCtm1uuxnLIFpebdBE7m4dnL1Nzz0AYb
4TFZEXReSJNWWitef7e4pHD9u+s3YMCdfHDj+w9v/vDxzZl8tf8PNBqCUQ==

         "], {{0, 160}, {166, 0}}, {0, 255},
         ColorFunction->RGBColor],
        BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
        Selectable->False],
       DefaultBaseStyle->"ImageGraphics",
       ImageSize->{50., Automatic},
       ImageSizeRaw->{166, 160},
       PlotRange->{{0, 166}, {0, 160}}], "\[Rule]", "True"}], 
     RowBox[{
      GraphicsBox[
       TagBox[RasterBox[CompressedData["
1:eJztffmTZFeVHmH/4h/9L/hHOyYc4ZgwMeEYxwz22AFmIhwzbBPjCTyAQSYs
CySGbQCBpFZv1d21576vtbeEYCAMAoG6u7bMWrIqq6oXCey/xN+9373fO/my
ummNVCoJyLj94mV21svM+91zzneWe96/+OyX/vIL/+QDH/jAV/4ZDn/5ma9/
6JlnPvPNj/1zPPnEU1/54hNPff5/fOSpv/v8E59/5o8++0/x4mX8u4F/7vz9
+DhoNh/2X4eNNsZBvYXx0D+vt/ZrTYxhq3vY7By2WsN2G9fEEU/P5iv/jj4G
D0dhUGty7FcbD3sP/muvUscR19E4aDiYcDybr/w7+ngEUph/DmDxsPfslmv4
X0jWHt7phWsXTxtt4nU2X/m3+QFddNRe4Dp3OsqfHLcXjlpdiIyb50qdskMh
wlNCwJOdUhXHg1p7UG3tV5p75cZuqY4jznmCI/5rp1jjizjHm3k1XHzY7GA4
ReoH9eR5T8l79MEFz6XO80M/dcQFKGBWAQehoRDhRQ68zkGMUkjxCIzwSr9Q
1euH9Y5Eknhh0PD9XjE+4gGNxCEsHBOoNig4xKhfrBARooOnHO7FYo0oEBE+
ta/08hU+tSImuIMh83gRLJyf95S8Jx4gYIGDNdqQoB1M16ikYDLd8KhZmMKx
EAbmH0Po8EiYLDR6PzHi23DONxN6gkW8+BQnllsOfyf1Ic2BUzLeAFF2MIE0
K9u5MuYZ59RdnHAignMciQKOfCcnn+/Zypb4It8TsIi46DqSLL2BQxqVQh2U
ISxXswOLed7Tdg4PR5Uju6YEadIwz5htzr+WPV7EtPPIEw7iIkTwdDNT5J9z
2KvpUroOF4ZkkBDjKb8VZc1Cdt7T9u49pEyIkXSdFBenmtMlDiCMLFIChWBx
kvu5Si9bxnEnX+U534ah92DwI/BUK0TXlOS6UawQKX5VAEdD9giv4bfmIYwS
mKLgaElLa0kK+IpgshMryeL51nxxc66AI082ZvM4ulf8G4gXrrYxX7CKkR9k
ZUq2zFoxWi6O857IM39A2zgvxuscWQraDhEAWSLJkaySJIJSA5HZzpSC7MwX
+ZQArc/kCBNe54tCEE8x8GYMgSXKYRHUV+Va4n/RFzvviTyrx4Gskv+ZFinZ
CLE4q3+0zpP3eFA42zwBZESNGk+4CB0iKEEbgSzauxQDGVe//EpkpPzyZIbn
PbXv8EMOJumcBEdqx+JlyZtYAV9xJx4jgUKZwhEShEFELEwSOuHF/wpiFa9v
P86Ks9iLlKF8aiy/3z42KOZA1k04tG61dDlF5Al2tXN6NdtSd5tzEB9MfhnH
9ZnCnek8X9mYDf+lN/SyVY3tDJDFFYB1LSXR4orB6pmvISUAnRBiHeXaIwL4
79OHfiYHfqYEx1olzZJoNlc+TU/UeG7aBQ2OwIUD5/hfAke88AYOixeRingF
9MkYOWTv7NqAFO8Vk0Aiab8LHnqn+LeGDTqYim6M2yZqGKkg4RVe8XPL+ecg
KJhkISWwhBTBehhSuqB/MRgscXsOIiXgqGx3CzXRQgzwjcN6RzHJ857jd+ax
X2rgZ7qpiL/UOrCGhNe3c0ANXhVgqm5mMHs1gGIlhdKEp8IIR7zYmytvz5as
0uN/URPi/dR4Eite074YR5AjiZJkzYFogorUhByPyLm8Lx60SkGaDFJWoKI1
rwGacaR2Cw3OKgHCtPMcU5oYo+nC1kwRSOGY0n4EUYYpZapS2PGD4n+ViBdZ
JeSOJymvXJaL0cL3bxxjv9TayQOmJiYcAwKCOcErGDjnoGVPTLz/XwzqKM2z
lB7n02owIgWB0pGDsApofoolG3iKF3lOsCR9VuKinnQCLmrKEKWCXYonv0+d
YqADmAiW0MGLBGLcBgkvKSi+wjm008hXgEsQpShTO5lqf75CTRiAi/JoBZMS
p+sQNSGi9ZA6d9/EqGsbrpeThZPznvW38PALDO5tm0gRnZTa4RIlKFJlFjUL
nxiCBlBIiZKVJiAFyIgaLVoKC+FuR2olWInWNwnMcBQv+YYUtDDeDxzDfeFS
ixrPKregQKIc6b8sWxifvRRDCMx8Ko9BjICLhMgpvak8QExe91NtryzQCYRE
W9pV1tCKmLVrPCFvVx5ZqWSN88bhNz+cx+GtEoZsCpUSoRFnttTu1DGOFEXJ
wpFSdyIYfJFHywCtnbJICTjZspRoSxVQk9Pmki8plaYc5Xs5NsgaksNqFwJl
YaIu4pTyx3IqZJIsbU4t/jClUblJ4/FEMsVX9CJe2c3WgvabKa5P5qw/ZZVq
SsGmKMS4DeV35gIjIaHqkJMlWkjsOCfnjUz6wYV0UOnQNlmMeHRj1Jex8pVS
OOO8TljwaUqOAAcGMZXqA1JuecyOCJFQoP0aN0bjJHCc7eiphqOsESYFct+b
gXd8K6exCw3KFH6LYEqEwtijlAsjWZOOck+NEKUMEC8u+kekJFMWKX2uzA3n
VvaIr/ALaNlY+CyCKchG8QreseJmtFznjUz6Ab63U2zYVdefr/XmMJ/VzenS
+iSmGnOOFV7hixx4z06mHt42h5nBLLmTjVms+RL+d2umzD/Bn+Oc18Sf4MRe
jecYer/+F0d8Af4V36A/wQfxQ3vZOj8U59uZWlCAM0UZQa43ERLZLLkbFCvS
XedClrBuE5XohOs942rhu6WQwmxgWjAwyUAK08VptMOiFibQTVTAi3PL13ER
Tri9CLEmfKlrWuyEFN/Jo3vdo8OBhYFjwCtqVyEl2ZQPvmUCiVYNyn/3sXq4
xi538J4SLn4rfsmgZ/xixsAkc54Jlh12bjnnmE8HUAb6sybB0aU48/rbx0FK
f2gFOfyJWRVGoKqUJlk9DZtGkUoUUqkQIv4Lq9cLV/C5zhcgKD1KU2BBDBxp
0Xpo3FxNFjFSkKXkghjtZhsYWv9WNKi4xgWKgFr4pOX0XymVyI8jTESHAqUP
9Tq5LEMpkkkTCW5pneWUZIk4uWkJajBQQRZynwtShInSlEJKiDixulFwYyoB
izMpaOxIqalxbZZWmBEmK7PUeERKK0FA8KNhnpyRim+zawBfgxpPGFHKiBTP
k/8djVsmIc1CvZev4XhYXxg2ui6W6yu6zwsphvLiaGLwh9M8bU05gdq4AbBK
OHdPo0Bx9oSOhp1PYZHiIePw2aFFYuUIV97LNT0EDjic7OdbFkrpAX03/4dl
YcRL6et5hlPRsJLFdQuYqAD3K+3gbzY755V2JFICq59rYKFKphxhm6psTpbX
rzuwtqfLGADLnYwZjlMlyOqulKCNY6Q30zwJNbERrgp9KM/tp/APIwpEpCSb
xTdbAeQas04BQ45ECtIEjMiKmXwcthYG9fORqUBKI1iACWp/RBZmaimk7OA0
jqOTotP2fFzpaaTIuZUvgZUsIY8FpZjSRLnjU/kU8bIJUryCkDL+QogM05Dt
52EUWn40BtUOhqzVuSDlBNzn+2JeqU7OxqlwP8ELkVd9FZgqaMLejHsRJ/3Z
wL3F0MTDx0XGGhHNZ+o9Akhkj/oWH8RPxDk+3X2f+LlSaFCMGMqbeBkZsW4S
bcqjhE7OCPkqB8zfbqEVfMxCfTPjSg60zeHdBChEI+k1GBtKNmUZF+0UxYrn
nC7KlJZu8v5REp6SspQmFEApE8M3O0N5Pc/lwUHFS1tpNR41oVeGiR6TTtZn
WTaij8Nf6SLb3psmWECKMCmj7W2WDwnWmq4yv/FuZEZCNJJ2M0Y+fQSpTuUv
p5UzAx3okar44aaLaxtHd2ImQTReQKQskSZNOCpkoZl3b/ar4tbVzO2JLPHi
CFZyugxBsyzFymnKaKY0sHUfUgpZK8ctV2eyncECUoAMBssDV2VV58G7hZR3
vWsMntgEHHVIIAmz1Z25GsWnP1sntdieruoER7xHK3wcKcvzrQObIhhCShPo
LuIIZwFIYRAjLBWuFiwbfg35YprtcRG26FvZETrgt3pqZdx9sbxL1cXawgYk
i1HBw3rH1TWdJQk028eazlPwYf8tU9igZYlZBQpu3XqpwcwQGh6j2SqRb6T4
AG1cioRbf1lKKWWwgmqaq3nLCGjytyfyd64FjHCCgQ/lF3An0xU/kqWS4vnG
Q6/54X9XlDiFyKyJHME9U5HOoRqknQIJdEXvZxkJ9DA1GZfARxMpFZNgaGW6
leZVHI8ODq/6cKKhFW7Zr5hVKuCQMuiW3pspcvNJ+eUANLeu5u5cyW1MFIiU
BpDikcsm6OGphKCSjeDr4YIYOMEacMvP+FP6Slowls8wDTdSu+ttVsiMnGXt
GaWJcQlqP1I+pQxClMZbc+gfwuRVXAW4cDETNYKFk525Buchpe0t30tF+awR
see4FK7Di3OGAdDty1kgtX41j4GnVrjoO/ArUepHnQj3SgopguXWXhSu7SSm
McI9HEvxCoemgVU3WN4+pOPTWGePlPgMg7E4KodLk8F5pvmmtcIcQhERLNoI
nOPn43x3vskJ2ZrBr2sQFEUYxmXKQmbJgLeMddogionTtNeKAIhHStb2jfLW
9YARVwshiysnsB0/ahy8rL9g+C/8osAnPV5yCYEXzTRPQCrWZ0q0VmRfjLyp
KsZtH263j7vv/E4EIsUon8++OZLD7ya/g6yPsT5aKP5SHDUhnChOpl+xVTJA
2YWUckvFw2XZU4uZ0BMpLAB+IrQfFZ1Tg9FmcQgsnNOi8RUBREXKF3lxKlUs
PC45vg0qlyavN5cExBRXJFKgXjiy3wL3kbHbDJDCOAuk6CPEtGmZfi6/GyFL
dHhQfXVxLek96UCCRXMm05zkPk6jZDLZelsQqHlHTggQp3E/28b1hVRqndBx
GCEYcfL5hTmElM4TgOIiDGMOXyMJVbkYYwHEz4nSoNwOefBYb+bKpD1Sh63W
IxpDvdXHsNHlBj0XDCm3WSTmzZPLltKj0dwmEQNvoPmLqD00NCecDcpUyhK5
mY+ebMq7kQjLd+MfQh1R0/KyQIpUE/BhhiE1Eg1CJkskdCRNxEULjOuqN+nG
znQNA9e06pGS5fiMSd/sFds7eYcXTkLyMe7mc3hV6nuxm9M7hZTdRwmkMEj5
8DWIFJeQuG5QVpGWCxQrR/hpJACUKTfGwrPWWvVMGsserZTRld6dr9ODw/X5
ETja5SHplkTwnRyUytTSCl/7RhkYCSwMUReLFMMd7tsyXu2PodLbM7Gwm5jb
h31Dm3cKKW7v2slXdws1IeXJZ51IUawUCgvuarTXUu9WoMKvCxomia5b/jBO
zoVR3xRgpKKCe5mGp52Oq+xlWpIXfrqVILNUEo1nKYQD9HoJAGEAIJzzSFqC
c2pRYh0gjmrZRZl8AJDxpWCtyi1P/wL3c+0UcDwDpDDwcUTK1+pUsGBshEcB
N88ogljRvZV5iv5LMjkhrDTG9HRyKjOX0ktBGVzvySIgowvAI5HCiWwZTgSW
9fW4iiAyRERgbV0rYmxfL21GDtmfqjrhivLoLhVzW+6bxEIaWitfGdj0YSW/
78DvOKACHLa6rq1W9+2qwbA9LW7NMEXLLrUtTWWc1qrjQl7DWCMlrsXXo5Gq
M5ph4TjVjbLRtof5VlYTQg0SC6JDgGSAKAjylaTEBO7uTB1ABIyAjocJGPXw
ihcoKkMMyyts+J3cD2B5pFpY1RCoQbWjnk7OpgCviNRB5+0K136pgcEtG3Yj
AD76znRxK6bCeeJzB02ntKNAyTQLIKlBCleIO43RuVTkXOepyIAAYhgKL1Ko
8U0O8m3v0DXkKYiL4ribbbnhEQzoRGQtUoDJhTiu5AATBvDawevXSzjiDdSB
klYpZ8oUFSCR8glxv03J7Envl6oQK9ZXDNpvLWZ71OpihM5OtZBWdmmOuA1K
ZQMjhT1+VpkB5/eEZAEvGWi7qkmccAI7IoOFycFTMjf6y1ZeTrVZ2zE5K0pv
4gaAO3xiEgYxxsjPqhkCaL65P9cEBDgCrJ5Xehtwn69gFLYuuZOtqwGyYML8
amQEg1yCZQAKHbsXPa8I+8h83GA75xtilEECQ8e8t0rXj9sLGKEzoUfKbZAs
K6sbqgU8qagrF2/1UpQvF4iThhFMUjtUfWKGcUqrikGJM4hPaj0k3m7QNg3v
eFoV6l6U6rMKKmEO8w2+xwodzgfzLUfwIDKg5V7XrV/JrV/K3n4xc+eF+dsv
zt+5mLl9KbPhox/OWoW/9bkD8x20bNw3jEg578ZvugxNMEq1vWpTvtVbQuqk
s4gBsXJg1TuuosapvrgePFIxMxWQsmCRWrhZDZotmQHhYvmYZV/8vTFRUu2N
poHsSvAAOVngbHuXM8AaA/iJrhNSVvu5T/dSb/0FMgTqPcAEjGibHC6Xc3cu
ZtcvZAATUAN2lCnnZMUru8hYTNmnICNdpwUBUuTqKaQeM1hxf3n5wdLq3e4S
kaJYUe+Rn9uthWHLw1hwuxej4vSnNC1W+ehIAmYIcwTI5BbF/eIHeSnwAAmp
ID6ZJiWRUinGkmLjFqlR/unjut5Xwvw7A3SjDIwgOIDp1sV5QAOkMDYuOzXo
6F/kFfLI3JKIqi9NdRxRb3IOrVdltd9R57FKAe8tLQEmqr4AU73F9hEWqRjG
97Zy1OJbPkakUqZcPFn+lIJsbjJHk7nuZHR6pa/28x0LEI6MvAUOGWVKSEl+
LZ9h+E5+U+DnXqZIy4EF0AFSdy5nb0HvXYICdANIbV0tCikMSiWNLAgnvAMb
WOvHel0fr2gQKReRY6av0hBSjylTQIpKD8Mh5SNI5OepXdWe+NXo86bC2mJi
1H5iU6QTdgGLKnvvvmL1Z+LGmniC/GX6s97HrEum6BcEmz5fZ0zJMvCUEClO
kkTt+J5IyImUG1eL6xQiPwATnm54mep5lu5Yh/9z6lj+Xu/KJXk3ypRj6fRx
8ixZr1Gm9mtO9bnWu4+0U2+urb2xugrVZ5Fy3K/uVN9BpSV+roo+VnQ4I3Wa
U9OLtRMUH8yqBUtxCc588D1H6Vxim2KATl4Yp0Izk1ww5BCrMclSszzBBBhH
eKDcKLnGwGjDazxaKEf8JkrApX+90rtWFlIEq3e9Apj2Zhs2JBUNlhuiE6y0
94rI7zH3BTBCCnZq37vA7Lc/XGgfLZ6iBgNGCwvH3S6VHgczyIdVB9bozvdm
IBK5RkrjJX5ryJk6oRDxHv0hkbpnW4yV9WLl8whziC5zKhak6wj3CIcC+FVL
HuR0B3IewdIJpQkwheHBAhzb18o9P3Yna9B42xMlp/euFgHf1nWoyhpgApnX
OtzPtqOq9wvG+w6h6inLJEjZVEH7vriVBsBiJ14g5ULrnSbAOkXpLa6cdJfu
LSzTSAVy7j0piNWw1hmUgx3kLjbGh70gN1h4v2Vq9UkJMHxdn4kze6SYNNwO
9flVa+aSXIZh8jZMKtXHuXVSNq3yBjc2pso2DmxxZHTOMk/K0cgygCcbLRSk
yfGHy1ngBVCAFzDCYNaYLALShAGYnNvlxVyhP3fxwHYM0ZIiytajTDV8sq+m
3YtOrLy1stTijZWbwOg+yN7CMpC6v7hC1hfIeaPN+hkhxTIkn+9oheJz7yC4
gJKtpwr1LaRw6ZhnkAWT1O6Plu477j3X0GT2RgPaVgqIFI0Us3gAy/Jwy/EU
8bYCKKmUTCWxI48UKJ8DCxrvirNWbniJA5oQJSIFcOF8UXNSgdCGekXRsNrG
Fm2SpYedF7H3iPYXpLLAD5bXgBHAgjQBpjeW13AUUtJ+UH30pIgUtR9HWB6Z
kam2FsqKg1LwvVjfYmMLI6UjRrOlkg4WPuupcWZAKmgTbUhkO2bqbRDJipX1
pOgcUQ068YFjO1GATAGjAFZ0oIAUMOLROV/xC7sPzbbIcJzXPxpZUnBJSFGm
iBSrlehVwRilkHJgeaTeXLmJI+/OoOiEC1A4gaqz+Jw6kCIcMlP+3FL0WN5T
tdko6aIw+abUSiU9SUDPzGGSwjNzy4mluVEMilfGEZYCQ4JpnTh5dqkhQQOm
wIvcbzOGzaH6gkBFpOgXU6YUrcKHUgfSceDKGSFaHqmwtn17KCKlliOUqXGk
3vDQ0DwRLCtQjE64UXVguQIAXwngg34BKWeqYtZMeb1QZ2UInryYhLYZj8lW
70dLpwB7XRRdlosQiK2JW8p9tudC8GFIWZVI505IkQGSV5DpOXbhk1OECUqP
+Q5SpkGuE/TGHHhRKwZPjOsRjZQbzu2tRVNlWo48RKaADs0TwQJSlCYhBZfq
qN71YLWZlOceAWDEGL7i3pr5wE6jVZJAjUyv2ffH9LotjrWxBU2j5djjlFjG
ywnFbN2yu3F7ZLWfxStgGhkgtZ+QgkCBkzsn18fPGbwl6+NS0YcqtIVj3LMT
GIWQ8m5vGLZH5akpxfvRQpFIULgoU4r4kVF4lyrIlOxUyLaYCrcQ9jH+jo0w
WItgnXdGXWzqcDwKlJpb/Re1n/zrbZN46pkg8KlulMLpKRxF1DdigoN2Ckcg
tR1dXVooF3I37CUspDlnNH0QcmQTX+LajCJlW1j8RqRgnihZRI3Wip4vtZ+4
nzdVCaNIVRoTKU2gVjjNCs2HWHo/bgakD6UC43F6Zosc+jESJY4hIOwfprxd
i5SVNbuoeDUHUESKjIIWCqqvf6Oq7CHBcizRJNroLMA8MXhCRiFSYffsjCMV
wDqtL9Y9zyUsQAwiuaed5ePWIlQfBpDyacSW3SLqveAGd4mqOojC5VVflUVZ
rL2UIPRixtCnGuvMZMk8eSrYYP5R828VYIpD2pCd/QjL8Mexs7JGaBQiDgsg
5uLJxplD3IwZ+STM7hUghg0qitU4wgnnzjNACpdDcL6agOUZBU2VKp8H3kid
ipQwkhyF8KyHiTJF7ieYeOKjfyHfoaxriJx4RrFtyie42uOi9ZXPo5t85VKF
zIUx/VabyfrjRcvGxVhOpd820fwwoRshhzfKKmjhCJrQH+XwhqT8lPuS4BL9
mB4VWKEayvjmzPyS+23Ml7idylf411mn9DCkRPysxuNIYPKZqd1CbXdkz3VA
SozC1hRRarjUuXrxQzgJeOXOtRwzuZSm9cmC3Xjr0hYGKaup5PYqImSlRv97
ahZeoXILijVh1lQlKY/oWCWkXfUtxIgjhk3Gk8u9mZD15goMHo2P7ShGIc9X
SLn7BzWb1vO1SI2YJx+dCNtGwBt9BYW0n9l87a2V6YoT9jj4sBt1FMHSdPny
yALjlvt58Ng63m99w5RMbcdYt0weV6yiqcJIy5gEzPrOWiQMKFmKov0LlgfS
+oQIeSwb46Aokf6F4syZxA3HR1tpCsrQV9ozsmSRSnE/VpQNHtIAIYUUwbKe
lEVK267lAoP7ubCSyZ6HqnJfuUdHBnYKX5shAp5D3Fz6xu+GE6Pgub+UV+mm
eFV/S6BluXqjYSJr1IiXAvjWsxNSovS2IEdqk14V7ZEAYkRCNbR6kfJlFwxr
54gXBYruFe1ULw+YmlvZirRf6FpWbfAujeNIPVhafRhS0n5EykaTDF1vUaZs
4dD2rDaEjlh26RxK3KDQpvbjn+BpDCvVVNEkpLZjfNXWWOpEAT1ZQ0sUUyH3
3mgAyma+rP5kDFCyQ8PEc71idaCL65po/0jdqUGK+amdIgxTW6rPt4F1LRwh
UMOH3JyRSFHp8chAujNVzYVxRiFpElennerFTTGB/rFSJSoZxZEYuuRmln5s
3AG8lL7xXL2Wqj1LQZOiATaomDieY/V74+bDXsdq0SQJ4uO00nIExUoThU7K
UBqei4pXdgba+7/bfjCwQ6S0VdCD5T2ph8vUKeEj3+5bSKVYenR769FaJTJF
bRaKB2YZpmhqPhlsiUbE7etM5R/5hx61Gu2UuK797XpRQ6InOMYZYN8kXGwW
WITQKsBEhUYIFLYlOuR+PKfzS/XYZyTKqz5+4VBo7fX55mwNg9l5qD6vAIPq
831FGmQUD0OKThNAOW4sDGudk3r3bmMhxCUaDqwgWT6TGDNTTabm1bx0r9i2
MSXmLMSCUhVBlKztpP7Ea8IcDEp9Pwu/2OFoU4F+I8BIGl0US/Cl0hkpF0zE
w+pGq6Yk+PZTnJBGjQcgWPsXcruxHobCZeVOgIpgaH0GvUpLwVRRtgKMws7f
cn1Qb+9VQSc6e43TWPrS2r3uCsACUhxHddeCCUg5+PC696qY9bACpbbzPn0Z
+oQkcVqzhlPLWHMYZ6xMOEIR5mhzD2bY9VfW0EhZ6USzLVW5Zfbp90wxhi6V
8tRS/hpFRohYEaMo9WP1LAWNHF6M0UEW44GJX8DQmQ+ZbmZCmzLQdZ+af1T5
xBsrL91fWD1pL1F8iBSPGJAyDsqU6sdCO6DYMldIJan5sU0uNuKndet/QoU9
EFT3xR3Q3HAKBLXjXgRADpFMzMOQ0h4TK0fbJp6vb2IvmHxJL0QqO5fIUGoA
FmFydc4TBQxFNhKdGT/adwYIuSrHo1igTu1XbfdB2Ko4OSXcd29xFdL05urL
lKkkcFTrMGxOgIQXYFLcL1Xsp105Cgd5z7cugZJYWYdUZku7m1lKZHesU8qY
50pZFisUYlmWZqSAk/4RLraIwtLInvGX5djSDBEgQmP9YqBz+3KWfrH+V6VN
sl/0qlRN4ar+aKHAAWqdfqn2aJl6sHyTSJ00Fyk7FB+N+EpHKQ9b75eSqSRf
5n84mZ5qh6yJl07YyzQoTUJKfQaEVD+mMKxQ8KkNO1g6l2IUNuFofS7JqdC0
/lcvZoHlWBEvZq9sbczG1Xx/srIZC9QVgyJS27FS1zm/PqYNRuHpn+s/sAsp
qHdppx6B1JvL33/QvXnSXD6qA6mFYblzUGwRLAgRhxcx6MNFICXPl/vl490T
GszOi6v3TbFlilSLoXHqgJS6J4lIqAYjKsa6gmnWse3FDVnbo9E8yz1k0GU6
bRYy9cWs4CeOsLdKIuSyRzjZ4PYBH7ZliaYr4/T1MDZgyItTpjBRbnuO93zJ
JShTEKhTtV8iU4sv3WuvAoWjShcwHRZbg7xzcsHJAZYU4GEVpKIjlj6mBhus
+lMlvw1x2+hoStv0YheOpN2fGaqDFW2zBWD8COWCLW3rxSiEZt5GCFOO1ZZp
hWGxTsiGr5dQIp5WSQLlEvceoDuXXY06Bl+HPrx1KRMgm6kqQssm0ts5J1bs
P+Bh6kCgdiuP2owDaTqpLR5XF4alNjA6yNYx9gu1gQeLAuWHAwsyRbzI/bzz
26ZAOTJjMpt2caZUk50if15J0XLb80q9O4SUZCFFrS0rph20iEj7ceN8yqKl
4hj9uFnbOlxkeszFUx8qDxISWLF2naXRgOnOlRyV4Z0bxfXJkmLp9Kf2yh1I
E8cjANLjfnPtXmP1sNAZZBqHudbBfG0wV93PVQ8K9cNSG4IGcbMYUe9xtz7O
eUKZSrbgxWo9qn2SB9b9yhJxq6D4OfFSPTmNl7riqJkPjryIupGw8jPFBkdz
mlVf+dykEydYRf924oapnbH9BSljl9gvb5J6IBU4YdW6rzFzJeuX8zi+fmH+
1osZpvI3r4XWTCFSwQitE6g2LRQcqMdB6l5tBeOo0DmYb7gxW3cjWx/mm5Cy
Y6jE2gKR4mDQT6SC+4vVK1uhP6PcGmJ6jCOx7RilRkiRTsSeKglqkrJxWfME
3qBjEh/stcLS9HjxkUTVVtw4II6RMlLWsdoeLaFxn+ITiyFd5XcWAB2M2xfd
CTACUjx3VWfXfBeLUPjXUNzPMQqP1GHzsVq73C0t3y+vHGe7g5nGcKZ5OFMD
UocZhxRs1hEsl7dQhAknDFMAo1ihVHGo+XidbTjApWt3cERjEZwmdSdjnS1f
VDOikUa1kbFH6ajrDZY82E+ULyb0pdY2TcO6FN/bMTXzEivrWSR5llgKyHoY
aDxAg/HLF+aI1GvPzeDI4sDtGxWG00NHkWy6S9JhZ/FxkDrOLmAMZ1oHN+oY
h9erh5P1w7nGMNs6KDixcgqw4sDiTVV0Pym76YPxOoVY4U+ZdosVkS7xB808
ISNGEhbfsqwo+ieMxNuJkebcbnJkfoRXo74FXlCVIhISJS4hlucpd2wHg5Yy
W5I+xi4wQi8mr/2I1C+en6Xq+/n3piFTrkLmOrzmuko0XTg9nyZ4B+2FU6FJ
PYaTXTeutw+v1jEGV8qDq5X96So0IcwWtCIIoaPuFSdcITDru+DG+2TVbYfM
nu8CgZmMnYFHonC9ZF9GMEYKTdgegFboJGVe9VVEJ5Sn2xoti41pwRqvP8i1
9rNN7Uy0deMUIpbfpHSjdSWkUfumuoZRPkoWj1R9FCvAhOP61cLty7k7V/K7
Mw1WhrB/5m4h7d7uP16L+8OJhaOJxeHVheGV9sGl5t6Fyt7F8t71ygBqMNsc
5tvgFRhiFH4HYmlQaIZOrX77gNKIbkdDbPIgVraZNMZU4MKZD86hhMuiJsOk
/o2aanlDqWiS5RUSKH6E5yeJY4X3sFTAXs2GOPQ01JaPSlZvpqaKF0YknNny
dAIAQayo+mCeABYGZIpG6nHgeBRSlxaHl5dw3L/Q2n2+0X+uuvtibWeiDLMF
mQJSg4IbJBLAy8Ul/C1jwk2duHnflJDZsA+D//QpIGXG00n2hxK1WHdREtkQ
cGRuMhmpgE8IqY3uLpQ65TW5i0p1DoKgPxvqhXS1FM2zLrP1mm2xX4gdTZTA
+kgkKEpAChaqP4V3hqqtt4nU/oWFwwuLg+e7/e/Utr9V6X2ntHchIAVTBaQO
8m1X7ZBPNmI71efB8vd+SkrK496BpDmS6nmgz9UHoDeT8DrMIXWg2Dv5g+Y5
xm9DdRMNil3q5N69meQ927GnGfsm0cClgkhu2jPNjaly2Cms7QMmxJQKKWt5
OEx9AHB/rkmP2AsX3CtXDegKOK+5TVWACS8CpoNMh3b8bSK189U2xvG3Vvpf
q299tdr/VnP72cbO5cbgRnuY6Z4Ul4bFruvNHm7w7evHYvsvln6xUdK2Wlqx
x7WPtAAguOpsVknJCime2KUhGTFSkezF9vyBqLGZmF32qUiFfV2m31Jue5I6
5xUUv9XGSftXaS941LdSyt65ThOuYWCiQufesX6YO8+0d55p7j3T2nq6uv7l
cu/vG7vPd3Yutw6nusPM4kGmDaMMq+RLyBQ/d+kVCJr4nrbSaD+OM7JXcvDT
CRPbijLU7KJnI5VIfrBTaExLWVfXZvltRMgyZw2LTipOImKQkpqd0VJquerK
AlhPjTZXMGmXfdiTyIxwlE33trdtnta/XNx4srzxZHXryfrWF6vrXyhtPVXd
/HJt5xvt3e92ei82h9MLR9mlYa4LmTqAmxZuvM67iviK9OBAVdSlX10gMOHA
5fWL8798cY5gMWjJTIGzxaYhc+xHGpBKhZXiMamj03yeGsSzVqYft8KJNKai
Ru5p1H5S2tSxvZjllLsth0L5Mn2cA5db3myWJ+O2UL19pbf1VPmXn8n8/NNz
dz5X2vhc+Zf/Pff6Z3O3/2e597X27rPd/atLx7Mrw8zyYbZ7VFo6KHaAlHaP
6j44fueCC6fbrgueojulB5gAFpBiBIwCFVJyo3eYkvazlI+Wi35u5CFJwdK4
ZRFtswKYUnQh+jeblEpGpGo21RI/NOGigokj9Yk2aMY9brjs2wRIj/7/qvzi
b+Ze/cTUzz8199onMz/9+Ow/fOzaLz5b2Hy6tfn19sGVlZPZm0eZtWFuCUgd
lrp7xTp35SSBdIqDlzKqQaYR4WbensjKPPEEQzIlpEZ66cQUlQ0DWqTk0Wiv
rsyKyLbRkCPznOyjH7vzlCqpFCWms0yeE/sk1HQfEHHREdIeVaVP6Ta5At8p
pG5/ev7WX839/GPTP/nzGz/6LxOvfOTKSx+99Nqn83eerN16utp7vjucWj3J
ff8ot3pcXj6uLrHLgd/s1mCxn+6qjAEaz50a7A9851pOeyW0Y0IK0CnzsftG
cW4xP0Iqpf2sHNkE06l1GjbioToN52EZDqP7kXndW6fGswJCtm8FynLRFCFk
9RF3t8GCY7xTSOnxg/9w6cf/eeKVP7v80odf/MmnZm89Udr8SgtIHU6uHWdf
PswsH+QXjiouyajc4ujORGe88MWSWzjx/h0mSa29EgALJy7FY2CKOeJKyrdS
fYVf7SO7Gm3CIhUCinMYW2Mp0us/zupbMufw1LQ/tRJqAyyKVmFY9h6+SewS
/I4DpMfiB7/1yp+++PKfXPjhR6+8+ldzr3+huPV37e3nOvvXloHUSeHmEES9
vOCDtE2KFWsyJVYuZuuRsnpMdXF2iwSRct7i+F0OR+VITnGEz+9wiR1EUxtw
LJGLWjHRe7ZTtIRIGc/wSozcirrYj7DVhqcwz/mwqY1ZwrNDqvOvvwqkbv77
53/40Ykf/cXUa58r3X6qfuvbjf0bq4fzLx3lbh4WnZ2iTGkHPeMVugs2fz7F
ij82FKKY7oUkFaEq1bpOox2xbN7EBvREJ2wNmDibZQ7bvlugf5pYH5mqMYMY
zJ/ogaLHSpNJcBS58o33k41s7I7uvn/uDO960/6Dpxf+8JsAa/lD3/3Bf514
7XOF21+q3Xm2tXd9hUgNS8uUKWo/L1ahACY2dq5zy0ZwrExujjExtv2n88sK
BLlL/dghU40pFOy1wVKLmoUmhVQKQcuxCY2KNKQY5eT24h4fG4aKCc100UXs
3gz92Y6jyd59Z4fU6r/5eusPvrL6777b+qOvgVS8+rfZXz5Z3np+YffaMpA6
zKxCpmCnPDqBVDCuTqRCzXPWNMewWzh9blSe73rsWDhiR0z7ep2zV5J1SFNp
Phkma7O08kdHmTErGUHt65fOjL0IGpSOnrlZmye0Ve3Y5RhtUudVaAGTA1/m
DO/QcfMPv7n2b78NpFb+5HsrH774g09NvfZkZefiCrTfwezaYG75sLAI7Qdc
VLBE1Wc721OmtOc9KXHxMSXBRKScAjSUbETj2aaFJtI77tLaRS6YUiP+VU26
jgzQ6r3gGcWdX331IDXsFEipZIUwRbBqqlsOmdyzRKr9L5+++cHv3Pzj58DV
f/gXk698cvIX/7u6e2n1YOrm/vTKwfwKkILn6yteEqRSYGE5cReV/6Wuw56Q
Um7U3vqE9czBYTFN6bfi3SQpUymxSsWOUnEkG0QSgjuxfkP5YnkBVk6lftU0
jLm/2IGzLs5AOQq7KT1ArN9jHcuZItX8V19a/aNn1/74uVc+culnf5358afn
Xv1ioXdhaTC5tje1DO13VFomUoTJH9sCK9ZU+Fsh5JqeBLbYuWg77qEQ8VP0
jzfwYvTVCpSO7ApokUolO1JSZkmFjfV5elNXja5N/Yc/8RAo1Kx1gtc3psoS
It/8OfhfziTlw606wsYNL00sXTg7pFY/+I0f/6eLP/iPL9z88Pde/evpn3xm
7v88Mb/1vfbexBKQokxB+4mluyJAX71JsLTfba/YjlVkdXZyTkIukatrMAkV
7Ptob20hJZhSWd1UcKBvOnCmAN2OvSZ24i7IEKU3dkd3dhBGsRqkyaaOMezQ
IkZYili3TN3yV0Of+LZs7Kp9hndne+VD3/nBn3139U///qU/f/6n/23qZ0/M
vfrk/Mazzf7lLpDan14c+CAtEBGjOCy1hRSJum+BG5vIeY1htyfTH9FWdGeq
TKGsyDk7NquLiLU4KcERUtqbY/f/WreoN1oPED+xpvbCMfQ3cjs59ogWFY/v
DMX/QAroDMpdYuSW6FjC/SweP/34pR9//OKPPnHxlU+++NPPTb/+ZPa1L2dv
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

         "], {{0, 136}, {142, 0}}, {0, 255},
         ColorFunction->RGBColor],
        BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
        Selectable->False],
       DefaultBaseStyle->"ImageGraphics",
       ImageSize->{45., Automatic},
       ImageSizeRaw->{142, 136},
       PlotRange->{{0, 142}, {0, 136}}], "\[Rule]", "True"}], 
     RowBox[{
      GraphicsBox[
       TagBox[RasterBox[CompressedData["
1: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
sjPrhf8apknXwyhhGxR7QnfNtjd8sZu1mm0a8WAHI39Ss+1CMtfhN8ic5jeh
ME21JRcvbxNT52xtEFD/mFMKj1Q9otbfpYvZOqDZob9rtn1TF/v7tO+DbWKl
uYsaZYf1ipvzIm3LzFR9uIUXhmNbW8b8nUGOPTXzZB03TE1Imsgf6LlrJn3j
F/uelCgUteUNfNBam942ZRVWB4X5n03J05dBQFljXECs3caxz5EyNVrp2fTa
jFlxruOumfSNX9C60o7NLLFWeFptiW4mNl+Kwlbt0JY7tJWd2NqpYYDMKN5n
qt2QBGbnOA0DdxvvvGsmfXtXpl3zZiPIJWul4ZylcFW/vC9vQHypIHC/PtYT
V3kGtzzo4mdegnMwFvmScXG76zqinVwyDEHbMy1vrFM+Csnk+yqOoFJ6o5cs
5xD04PDLTcfBpq1gUHDeBfU//U8dpOlOqrKT9Vblt1HT+127dNZZSe0UjlLR
0Km0DmLgggffn0K251sd3xaY25fgvyx+r3YEBfV8bE6UQcDj9jjtf9cs+U5c
XLQ264Y21O+z6Laj57ahwFfcMAodLaJHrJY87pkuEDUPB9b9R/B/fsdLFmq8
sDlF3GonBFqOGwz9cDuqEgYahSi4fgq/+P1IkOU7FL7y0nGOMr+LIxS4hmE4
WAVKk2ryYpOgUh0BzQmNdqC5n0BVcCSODGxU/6fJ3qHwBi4qmc10NT/azgaw
0PLu+s/8Pb/IZzs73rINHEkn0290Htqu/8zf84sZBhukbPy3qZicR7frP/Mb
v/4/7z+Cvg==
         "], {{0, 175}, {130, 0}}, {0, 255},
         ColorFunction->RGBColor],
        BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
        Selectable->False],
       DefaultBaseStyle->"ImageGraphics",
       ImageSize->{36., Automatic},
       ImageSizeRaw->{130, 175},
       PlotRange->{{0, 130}, {0, 175}}], "\[Rule]", "True"}], 
     RowBox[{
      GraphicsBox[
       TagBox[RasterBox[CompressedData["
1:eJztfWeTJNeVHUP6oo/6C1KEPih2I7QKxjKo4K42ZCiuRIYorYJakhINQGBB
goQHCBpYwgwwsAMMxrUpl2XbTHePAcAlCYIAgSFmpsu0tzPAivs7dDNP5alT
92UVxjSmgUFn3M7IysrKqn7nmnPvM/kvbrzjb/7un3zmM5+555/Z7m9uuP8/
3H33DT/9X//cXnzt9nt+cMvtN9/0X2+/9+Zbbr778zf+Uzt52P7q9hcf722Z
2/pcbW22unK8bGLHGyfqmycbW6cmtk80tubqm7O19eOVteny6lRk+/hgpkJZ
OV6FLE9XFiej3f5X9rbL2wxZgGtiQANuiJ03xFcmSyZ2YC83ZgzliLI6UzMB
9EtT5d3+V/a2y9tgzrYHuIAbx8Qd0HetPnkXYppgAsPfg/6TsgFNir1cniia
LDUKJnbA87wS1zhVSY5NSSpm+KYAa7N1+gGV3f5397beRqxNgC9wX6znTeyA
Z6AJejGg58FSwz7eVQBGfyoA9rv97+5tvY0QL9dLS7XiYrVgYgf2EoJjnFyo
5HGNnVmomXqYDhj0ZSIegz5p4aBqgmPb4+X68Zrtd/vfvc43I+pG0UnITWin
ara07oVazsQwdULoIYa7gY59fKZRMjHonfQMP1EJvoQCUCsYGhgUdrvZroeN
kdeaHXCYeZoYUrY3a4XBxtilZq6WzpNEWU2+U851301u0r2PCBHnt9P2zfA3
Zuq2h0ANjBbuQb9Tm0OccJt0qnmTdiVnOKp0DVlAN4ghvED3Jq3yeHyfWk8H
cGzfqw4BBwY9cFfoTWD7e9Bf5ZYwrq6tEQsFRTFtR+PYO2mVxnBA6HklPkv0
DXcT6JJKn1dJ/Aygh+EzEDAouJrAng5cwUZjR4Mr9HTpzpxtb1g3i6OU+cKI
7akAJnhpe1yMT8X7xHuYmPnTA9h3QR96X53ogP029QM47upAgrumgbvdkJ+8
jVaG1gYtpwOnuyb0sGUHPYCm6En1CbGkoDvocUz0+ascJVD0Y8VI7B06sNsN
+YnZQODZwvC3hB5Yqw8PsQayob0TbsW9dzJF3OkAoTeBt7cfg59ExOmRmBcY
9Gr7ezpwKVu3DeullUZEfp6YeaFTzrcjw3qc0iwa7oby6Pn8iO1xbHu7DG+Z
8Mr0rR4TaEZjEMMXe0I/XxrFW3aghk8dgM+H4F1VBtuzDoDKwJ7n/9ANzajM
PEUqpwI1gFAH9MCAhlA9IPZW/Kmh1k1NwAEu1uuhn113lLJQpn7YA31ywj2r
H7TBptC8SNYAurjxrv06xE0HzCHQG6gTUOh7Yu7d7lzJYw+xY7x0ZA+i+gCh
BwD6WhBgAgg2SOjV8+PYCOFut/rHYrOmS5s9xgLunVDCWkM/fy53DMoAM8d5
w93Oq8NXd0HEm7HD76kB0deXiYyzeqD8H8qgKaFmAXZM3OkKYt1I6B+YwNps
fbdb/WOxJWlUzxLpz4k1ISamgNgEuqHhnmpAbUmcfF7NfN6oYCl2As72QwXg
BQs1088CVYI8gUxA81AEAtuTAbKPoOsKPt1Wb22VsCbbF9iqsTEKZDjIcN2p
4RvoEIW+qzPReKZ12xmFHpiqbvClKgChT27YM3k4fxYDcdL2yAW0IsFqQK+H
aKZm5g/5VCkD/LxBj9Y2AShqvDg4mz92rjByvjhqAtRM8NLE3uK7OCDohJig
qybgmNA7M+/3/DnVTwQC1voMaBBCBAJCr30NriZgCgDmj75gyG4Dcu02JErA
HW3bLOVjKebmC+Pn82Pncl27JvSKO87YHu9SGYg4z/AloIcJ2159vipGz/+I
u6A3sL0lfWT+JIF8CdyBL9WDRWmeARNAHQA6sNuAfOQbWkB9LNsWra3mDBwJ
qO1xDEBxoJZOiPUyu0ChxFfjPC5Tn8AvUs/gqIIKXZaLGowdiVfpVYTo+en2
1fbdmJDdxmqHNwRBtiEbnG1OI52P62x9jhpncIyTtGt3E37Q3gVA+KwGF3yQ
CKq9m2gUGBILQgVWtpBSxIJ2OMIJMPFHTxAyPhM7sNB/vULPuEmkcIAzam50
0YQPx/pxBz0/gr29yxuKGRaY4vHmYXBHXAiRDSX0Kv0KkFNaSMPXYWDM/W2/
Pte4XqG3JkWrOpNHAwqRzqlDpk8YRNc1RuOk4+pQOcfrBokGdxeeiCzfclSB
SpW+200GmQhQAUD+ez3UkxEHA5uY+ZsaXDcMMPn3i/25Uq+54J/p7akP9M+4
IGznEHpgjQwi02wdo3PUzgEdxgU17dCDMb4kPyOPHgEmAnD7yHHQBcBKoPn/
NOJXMD7N9rsN2s5szhid4Wu41+hPwkb/4JiAwoePM0BALBFQqt+SFE8/G3py
9TmDYj2/NwwKgN51ErFIqEkie3wIOnC/NtC//2r9/VcnLpyovT/XMPlgtvHB
8Yn3J2tb1fJmVLpQjraj0mZU3ipXTLYr1e1a7WKjsT1VM7kwXYfY8eZUdX2i
vJrKSiNaqpXi8mxgYiHNo9DMHW8n9O4OSu2c7dv+D+NHHIFU1JxbYIDgS0Kv
Jx3EgwIBEVfQdWAAnD9H+yxOFpN5QF0F2DzZuDbQf3B64oMTEx/MTv7DzNQf
j099MNkwxDfyxfXx/Ha+vJWLNlPZGC9tFqqbUXWjVt5olDcnKtABk43Jyloj
MvTXE9yTHtjSYrWoBM/ZqUOWwGly50LAIOhp0QgrS43I9ogULhDzx6gOOG6g
xZyUsXcDlpIHl+Lxlyc/uNcNpL2EgF7Hf6Y9fX2Gv3HiWhT83z81eeFEY/vE
5Adz04a7YX1xLPrgWOXiodLmS4W1Z8cvvBRdfLls+61XStuHonU7f6yyNV69
WGpcrE1cqNe3GhVTg7VGcaWWT4bFGu5m8uW0fdACPYdJ/6y1FydEk9lcU7Lv
kLABncV6l0/iq6keaqSO77kwxIzAYe3sXW08MxYETqCnQovpLADt8YfJA3fI
R4f4xdM18/OGe+znZyYvTDferzculmobr+QW9r+y9tTRlScPLz16ZPkXRxce
toOja0+MLT05uvzU+PoLpY2D0dKhwuLh3PJ4Yata3Z6ordej1XrB0E/HvXft
nQ0Vgj5I6A0Y9LWsp60aOmG2c38NNgP6MLI7WMOKjZ7hsWqpupSQAFCjAL2O
/Ilpvzh8tf3t05M7Dr05+f/32pT5eYvUF6ca71dqF8Yray+PdR4/eOa+fZ2f
HFj82cHF+w+27jpgsnDvoaUfH2n/+PDSA6PrTxTXnimtvBR1DuYWj+TXCtF6
tbJeNehLq71ZDz3omSy3UhrvaneM8qzMa4VWybMLx9qqShSHmHa7PwdXr66I
DyrTuc+G2uU+rnklowah19GnmCNmbl9xt4j/UUD/x9dn/nh62nz1cim/VYwu
5sqbL+WWnzrU/ukLZ370xNnv7/vDzfveveHJ9254+vxNz753w/4zN+4///0X
z9/28tm7Ds7//GjnufzyoWgjV1/NlZfz+bVKKQ7xtWIY5Z3r02wItRdqBYrz
Wq7RhsV9VAcUl6bU9AZZtHP4qpMO9xD6TIfvriQN0LoQU1pcYLgDejcADPOJ
1qbLGzNVzA036IH+TiG+dbq6fbJy8XTjH189brxuPSou5XJb+fI/jtc3nx9f
fvRg855n373lsd9988E3vvbzt/73I29/7ZE3vvrgqS/d++pXfvLbbzz+xree
/PX39r1954F3Hz68eKC0nZ/aLjbM8FeNFjZigpdOgelBHwLhmJ5qAixdr3cN
q+86cEP656ga4e6knUeEnirhaJtTG704dAKucOSKPM7h68j/JNx3Z4ASeirA
TkFvuG/PVU3en5nYnqiuF0vrucI/FBsXXil2Hn757D1Pv3XzI7/62/vn/vr2
U399199/+aevfem+2b+6c+ILP5z6q9vnvvzjX33zsbd+8MKZew+deejo+afH
Vw5Xt4uT79emN2rVtVqk0JuE3eIh9I7pOR5OTPXjDh11Dtrm4cedBw5pfKhv
oZmHzj/0D820quy8kGhIXsd7JDw/4tz/9eOV3roQO8f3jN1dPFm/MFMx3Dcr
0dp4cfno+Mbh4tKTR9+797n3bnvqjW8/fOLLd8598Y65/3hn4/M/mPjcrdP/
7rbG539Y+/yt01+6941vP/3ubS+/c/fBdx849t7jo63ncqvHqherU5u1xkql
uFqL0ukSieEnfNth54o52rWqbYWKXCamzuo1nQ8DsXM7mXQ9VM7Qq9Nmnat3
ND7TC4XuS8v7aXbfne+Puf9m+1tzdZON2R1b6uHCqfqFE7Xt41WL8lvlaH2s
uHBobPG5kfd+fuD3P9r/9s1PvP61n9f+8pZTX7zv9H++L/8n3yn96Y2Nz/6g
8G++V/izm2b/2/2/+dZTr333yVPf2/fLO55755FjZvjNA/nVXGUjqi5HpdVq
KZ0aYwpQxGgc6D+bSGmeg16byBqZTcfLlPu5pN45bcvrTfgDnNPWO4QenrFA
JdSETP4/RBP6tSXHZD+t55eA+0Itt1jPm+FjTZitEztW1tucq2xaNJkqbzXi
yszaaJymtZ4eOfuTl97+4TNv3br/1995fOzzN9b+/e2/+spDtc9+//C//Eb+
T24c/dffPfKn35397w+89q2npr7+8PQNj7121wu/f/TYH/aPdV6JlsdKK/mS
OXyDfqGUM+mUi4vVaKEatctFR9jUwGHCgN55eEZ2FvBdRuA8iZoqE/xMi3YK
ozrg4nLo21tJyYiXOeg1lIS0EO+yG5djPAT9MheCsAOgb+a/U9CbFm2ZLk3X
thr1jVLFoF8+nF94drT14OF3bnvut7fse/N7T9W/dOfon99U/cKPJr9wR/Vz
P4o++4OD/+qbR/7sezP/88FXv/P0yZue/uUdL/7ugSPnnsq1DhSXj1WM5Bv0
y+XCUpRfjPKA3sRwb0UF58y1wVHbdzi2JDdXC9V6jgusGjKcgoUXN9OuQKVk
FDVwdRQcT6hBPFQ5XEC1ce5InExveI+JjOIruuWezPB3Cvrtk7WLs3WFfuVI
Yen58XMPHXr7judfv+mxX3738emv3n/0czeN/PlN0V/cVvvLu6K/uOPwv72h
/J/uPv63j5749r5Xb33+tz8+bCZ/7plcYvKVtWJ1NaosV4omsZ+vJiZfKXX6
yZirxLJaq1bcSivnHG7BO7CDRiJmD3rtxOcxsXMuutWfzellauwKPc1ZlSfM
QB0R1RBG+hdCz8ndqQ4UuRjUTkI/ZxyvAejXi+XY6o8WOs+PnXnolTfu2D93
48Oz//fB6v+4p/hf7ih96c7oi3dVv3jv5Fd+NvnVn5/+9lOnbt5/4pZnfnXf
y289dOzM06PzL+YWjpaXc+XVqLZSrizC5BHlq8V4okS/Q9ao7WxZfb4OpGlK
ed+F9SFWzwPF0ZE0F6Mzj/UkfYgqqhs2oEQ09BvOSyTX5JnX9085LCDRg+Hv
FPQW6LeP1zenqjH0pcrqaLR4JD///OjZxw7/+p5nZ256aPbGR2vf+Mnk1x+Y
/uZDM998dPrrD8/8n18Yrzv1/f2nb9v/2j0vvPnIkd8/OXL+5ULrUHFpPFot
VFcrsWB6FKGPh9Zn5V+h81djsT0KetpQShEz0VduFlr6ICKn1zjzVLcA2uB4
Qieo4joPn8kHHPpa0mF9LxnC11sWzNDfKejXp8uG+8ZkxaA3L70yXl44Vph/
cezdfYfffPCl1+556vU7nzlx6xOzf/f47E2Pv/bDZ1790TOnf7j/l/e++Ord
z//9z1588xeHzzwz0nypsDASGe6LxfJqpb7eaKzV68v1ykqjimIOJ0tSATKt
Q1ubbaW6sRAvehM52uzaU324M3NH7504x84zyvzJGGn7uECrN85jDPmFznGx
e0tHcBF6WL3tdwr6DeON0zVYfQx9vrI0Wmq/Unhn/6G3njj4u1+8/JsHD/z2
gQOv3/f8q/c8+8v7Drx2/wuv/+TF3zx88DcPv/TmvkNnzD+8NGIfWSvX1yu1
5ai8XquvTUwsVasGvUnX3nXiTJp3O27vfL5jRMrPGQ44/Ebb0x04ew+B0POZ
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
D/j/CeA7nQ==
         "], {{0, 151}, {169, 0}}, {0, 255},
         ColorFunction->RGBColor],
        BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
        Selectable->False],
       DefaultBaseStyle->"ImageGraphics",
       ImageSize->{53., Automatic},
       ImageSizeRaw->{169, 151},
       PlotRange->{{0, 169}, {0, 151}}], "\[Rule]", "False"}], 
     RowBox[{
      GraphicsBox[
       TagBox[RasterBox[CompressedData["
1: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
xcOXw8qBlCcrofzs5jX/8Ov/AtcvMC4=
         "], {{0, 103}, {103, 0}}, {0, 255},
         ColorFunction->RGBColor],
        BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
        Selectable->False],
       DefaultBaseStyle->"ImageGraphics",
       ImageSize->{44., Automatic},
       ImageSizeRaw->{103, 103},
       PlotRange->{{0, 103}, {0, 103}}], "\[Rule]", "True"}], 
     RowBox[{
      GraphicsBox[
       TagBox[RasterBox[CompressedData["
1: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
oULCGc884ZhHPOONsPfHqPXrYOdFv/V81Ho22HjS2viqsfW4tf653tZDVuuR
oPNI1HrEQ9v6vLfzhWDjc+76w87ag8b6Q+bWF8zdx5zWE27/W3H7Kb/3bNr7
Ydp7Iev9NAlfGXt/GAavD2B6/BNZvjgCP4QrCQxTvJNAVUK6KKaCPKhL8Wll
GCZ52X3crVwQK0ubwukCOTnbi2SAWueEVuTueVUEo94UTEnE6uxldqUQksDP
Y2WC8yyBSlfLpwwLtWXMpS3v+RE51K6ZmSrQHSTFMMoVHkJFFHoVixgen73m
dueN/nEbSLCORP3X4vbLwc7Pg60f+Ts/CLaf8ja+Zm88bm4+ap9/yFi7z9z4
rL1xn4Pzyt29tfvszQe87YeC1XvM9fut7Ye8tfuN1c8am49YG49Zu1/zdp8M
uk/Hu08HrR9G/Z+lzm+H/qsj77Ws84rjHU/ihSJayeIN+C9F3ivjbqbi3lUK
oOpxuVOzLHgI5aTset0G2XjhL/6VXNaDDAGpArUut175hMAwwYPWCTAQqsUY
XIni20JNmPyQs9If1IGPrab9lgMw2ygrDvIBwAC3SD2Zfhp3cue8b5x27bnA
ORpbb2Tdl+P2S1H7xWT3WXRisv1v/ubj3vqjNob/6v3m+Xut83fbK58xl++0
Fm83lu5QF+fvdlc+Y6/f5W7c7W3e46JtPehuPORuP+rtPBa0vhbu/Ju/+3QE
inBeGri/Ku3fpsbvAvutOJwv0pVhsl7mO6O8M8CHATjDLtR7Wi+81lxemJeJ
1oswqEnoOkXr4kI2uokWGQFfex2HX4mbapE0K6JrNFzgxTrHp4RibPnAADih
0KSqCEG3gQ4m/J2CAS4PTNvBaPjO3vh/7u/vFQO1AZaXZk5e2KOiN3KXI2c+
co7H7ptp57fB9k+87R/6298Pd58CEuLNx4PNL/jrn/fWHnBX7rPO3+uorr/T
QVu63Vm82Vy+1UY7f4e3gotbrNU77I27/fV73a3PBusPOjuPhO0vJf2v5Z1v
xcb3M+e5wvvZwPpFGr82Dt7Ko7kiXRqooMRmmbXLtFem/SIxMjSAIeCthGlP
omo14IAwkDlJYAaRrSr9fMPXHpMKuqplCiw1OZ2aqgPsubjAr6hgGNe4g/dR
m8laEWOJltQgYYCzekp+WMZKekEkQCsO1MblCgmqbOkjE2Z8T8doXMD3+fP+
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
gs4fwo0X7M3vuwtPGEuPWUuPuGfvs9DO3Gku3O2cuqE/d10XMDhxTXfu2t6p
6yxowjPXqQbNACS8/a/oaBsMgH4HDNBOfNIkJMx9ylJIuAL+ZhvksHijAzBs
3u+3vhi1vhr1nsqs53L756X3ysD7YxEcKbzjqXsi8uZjfzH2FiJ7wXWWfGvF
9jYDKryBK6HIoZ7YDjxQ3ymzsT+YZQba5EvtLb43JGDgTBezzI9X0nbDQMWH
1SeHdgAJqaVnLu8G/SW7v+C3jjjtN3yoha0X/OUnjbNf6i48Yp6535i/yzz9
GePMHfb8beb8LdaJT/eOXws8WHPXGtTACWikCogciA2IHACGI/+izvNXu2RE
TsLXuMFdvtU/f1cAAdn+UtL7Zm4+U1ovlACD83Lh/CFzXo+tN4P+G27vLbN7
1OwdN7onTfOc429EcSsFLZT2QG8A9z43aLh8yCN1/Kiv5+Fuue2z5s5Jo3XE
Axg2f2kRGE59oT13f3v+HgNIOH5z+8RN3SPXtuZuNOdvdI5f2z9xTf/41b3j
V+PCOHFlD9IR/a54QJPDm//vjuYEpRyABDRihiOf6By9ojt/vX3uZn/xNnft
3mjz4WDnsQhgADMYz+XmT3PjF5Hxm9B8Jej/3tl9pb/9Snv3T732MbM/b7vL
gcdgcMvSLwbxx9+gfwhH6oR+x3J2LGvD3ZnvbRzrtI/6W69aaz/vr/3QXvxG
78gDG8fu2Tn5me7J23pzt3TO3u4ev7771qd25q4zj17dBQyOfKrz9ifbaEc+
0UKrFMIVXYAB12//cwsNkHj7n2Esekf+tQct8da/tPACIGHptmjpDn/jwWTz
8+HaF5ytJ8LtbwbtZ1XQu/Wi037J7v7G6bxs7v62u/uHrnHMdc/FwUoSb2TK
p2il2psYltHgMhg+2KO3bm+cbq/P9baP2jtv+qu/MNaec858vf3avUtH7to6
evv20Rt2Tt3WO3Wzefza9ttXtkEIJz9tHb2yK8Fw9Io22QWQALoeYHjrv+2S
NwFI4Jr0w6lrTKUxbnbO3Oacu9vb+Fy2/Dnv3AN9yNT1r3nb3/Y3v+t0nnN3
njc7v7D6Lzvma65zNFAVVouJKpLcKZNeDsEQ98PDfmwfz8NuB53zVmvR7p8L
N94w139jrrxgnvtO9+RXtucfaZ+4r3Xstt1jt7ZP3tI/fmPn2HW9Y9d0YCam
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
gRNiMwmMOHSixE+zMC/isi5c+Qdihv8fDMSwmw==
         "], {{0, 145}, {175, 0}}, {0, 255},
         ColorFunction->RGBColor],
        BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
        Selectable->False],
       DefaultBaseStyle->"ImageGraphics",
       ImageSize->{48., Automatic},
       ImageSizeRaw->{175, 145},
       PlotRange->{{0, 175}, {0, 145}}], "\[Rule]", "False"}]}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  TableForm[{0.9696617796487152, 
    Association[True -> 0.9696265077750326, False -> 0.9696969696969697], 
    Graphics[
     Raster[{{{0.9389342647886956, 0.8876926731612381, 0.7152637629346882}, {
      1., 0.42, 0.}}, {{0.9470897104856508, 0.47255971724898654`, 
      0.0026342552757478224`}, {0.9220216119108112, 0.823784107867886, 
      0.5490320752806648}}}, {{0, 0}, {2, 2}}, {0, 1}], Epilog -> {{
        Tooltip[
         Inset[
          Graphics[{
            Opacity[1.], 
            Text[3336, {0.5, 0.5}], 
            Opacity[0.], 
            Rectangle[{0, 0}, {1, 1}]}], {0.5, 1.5}, Automatic, {1., 1.}], 
         Column[{
           Row[{3336, " examples of ", True, " correctly classified"}], 
           Row[{"Precision = ", 0.9723112795103468}], 
           Row[{"Recall = ", 0.9669565217391304}], 
           Row[{"FScore = ", 0.9696265077750327}]}]], 
        Tooltip[
         Inset[
          Graphics[{
            Opacity[1.], 
            Text[95, {0.5, 0.5}], 
            Opacity[0.], 
            Rectangle[{0, 0}, {1, 1}]}], {0.5, 0.5}, Automatic, {1., 1.}], 
         Column[{
           Row[{95, " examples of ", False, " misclassified as ", True}], 
           Row[{"Column fraction = ", 0.027688720489653162`}], 
           Row[{"Row fraction = ", 0.027624309392265192`}]}]]}, {
        Tooltip[
         Inset[
          Graphics[{
            Opacity[1.], 
            Text[114, {0.5, 0.5}], 
            Opacity[0.], 
            Rectangle[{0, 0}, {1, 1}]}], {1.5, 1.5}, Automatic, {1., 1.}], 
         Column[{
           Row[{114, " examples of ", True, " misclassified as ", False}], 
           Row[{"Column fraction = ", 0.03296703296703297}], 
           Row[{"Row fraction = ", 0.03304347826086956}]}]], 
        Tooltip[
         Inset[
          Graphics[{
            Opacity[1.], 
            Text[3344, {0.5, 0.5}], 
            Opacity[0.], 
            Rectangle[{0, 0}, {1, 1}]}], {1.5, 0.5}, Automatic, {1., 1.}], 
         Column[{
           Row[{3344, " examples of ", False, " correctly classified"}], 
           Row[{"Precision = ", 0.967032967032967}], 
           Row[{"Recall = ", 0.9723756906077348}], 
           Row[{"FScore = ", 0.9696969696969697}]}]]}, 
       Tooltip[
        Inset[
         Graphics[{
           Opacity[0.], 
           Rectangle[{0, 0}, {1, 1}]}], {2.5, 1.5}, Automatic, {10., 1.}], 
        Column[{
          Row[{3450, " example", "s", " of class ", True}], 
          Row[{"Recall = ", 0.9669565217391304}]}]], 
       Tooltip[
        Inset[
         Graphics[{
           Opacity[0.], 
           Rectangle[{0, 0}, {1, 1}]}], {2.5, 0.5}, Automatic, {10., 1.}], 
        Column[{
          Row[{3439, " example", "s", " of class ", False}], 
          Row[{"Recall = ", 0.9723756906077348}]}]], 
       Tooltip[
        Inset[
         Graphics[{
           Opacity[0.], 
           Rectangle[{0, 0}, {1, 1}]}], {0.5, -0.5}, Automatic, {1., 10.}], 
        Column[{
          Row[{3431, " example", "s", " classified as ", True}], 
          Row[{"Precision = ", 0.9723112795103468}]}]], 
       Tooltip[
        Inset[
         Graphics[{
           Opacity[0.], 
           Rectangle[{0, 0}, {1, 1}]}], {1.5, -0.5}, Automatic, {1., 10.}], 
        Column[{
          Row[{3458, " example", "s", " classified as ", False}], 
          Row[{"Precision = ", 0.967032967032967}]}]]}, Frame -> True, 
     FrameLabel -> {"predicted class", "actual class"}, FrameTicks -> {{{{1.5, 
          Rotate[True, 0.]}, {0.5, 
          Rotate[False, 0.]}}, {{1.5, 3450}, {0.5, 3439}}}, {{{0.5, 
          Rotate[3431, Rational[1, 2] Pi]}, {1.5, 
          Rotate[3458, Rational[1, 2] Pi]}}, {{0.5, 
          Rotate[True, Rational[1, 2] Pi]}, {1.5, 
          Rotate[False, Rational[1, 2] Pi]}}}}, FrameTicksStyle -> 12, 
     GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], ImageSize -> 300, 
     Method -> {
      "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> Automatic, 
       "DefaultGraphicsInteraction" -> {
        "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
         "Effects" -> {
          "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
           "Droplines" -> {
            "freeformCursorMode" -> True, 
             "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
       "DefaultPlotStyle" -> Automatic, "DomainPadding" -> Scaled[0.02], 
       "RangePadding" -> Scaled[0.05]}, PlotRangePadding -> None], 
    Association[True -> 0.9723112795103468, False -> 0.9670329670329669], 
    Association[True -> 0.9669565217391304, False -> 0.9723756906077348], 
    Association[True -> 0.9669565217391304, False -> 0.9723756906077348], 
    Association[
    True -> 0.027624309392265192`, False -> 0.03304347826086956], {
    Image[CompressedData["
1:eJztnWd7HNeV5+fZfbMv9yvsB9jxeGYcxmGksWXJCrYlywq2LFsSFSzZ6zzj
HY1lWxKJ1KGqOiMHkmAmJTopUswBQANodCMDpDzPfpA95/7vPXXqVoMGCFKk
NKrnsJ9Cs4Hurl+dc0+69/6vp37yzWf/29/8zd/84n/Qwzef/NW//PznT/77
g/+Tfnjox794/rkfP/P03T/+5TPPPfPzzz713+nJEfuPz7d5XHq2MPVsefKZ
8qUdxYtPFS4+USSZeKo8uaNCT049W5n+YW/9hVr9R+XJF4pT/6e8/Xfc/rF+
tO/ysX6SK68NkNCPJJv/dfoV/PpVfov+d+1I7+rhGj3i7ejkenz2D/qY+F7h
wncLl75XOv9YRCcXHytd+E5x8nvViccrk09Upp6sTj/bO/V0tf5cZeLp4uQP
Kjf78/IBOlq2xBc3xtWR4X8heP2W3uLWOS4+XLjwSOHio8ULD0XnHgzOfjMk
ofPz3wrpycnHKgS6/kTvxPfLhJtU+2Z/Xj40Vlx/ki39On7xKnxxA8AyXH6t
98rr/Hg9PvsHdJx5ODj/cHTqG7mTX8+e+lr+5H05ejxxT+a9e7Onvx7QOT2e
vj9/7kEGPfFo6cIj0cR3SqTdpOlEmYz5dt595WBl9VB17XCNHul8+UB5aX8J
wud7C4t7InpcHi8u7ivSM/Qa/Aq/nn7RMQUCbau1bPTu+C2yvSvm3elN6V0W
xgt4d3qLdaezVl7v+8vv+XE7X/kDPk4+mD37YPTe1zLv3t3z9p09b9/R9e6d
Pe98pfvEXZnT9wan7smfuS8kyiRn7w9Ofz139pt5EtJ0st5nvxttky/gCl8P
McGFEGJQFsR45apDjOsvJ++/Pqhlo3fHr9AfIazyXvNjAd5xZV9p7UCFEF8R
xB9CvqceyJ76ekAKy1jvyLzz5Z53vtz17h3d792ZOXlXliiTnP1aQHLmG0Q5
S7pMQrp8/uHw4mOFqSe35WhBRwCXLibJ6v4yXVhCSY9LewlxkR7jE6faEP6t
w7XLTnOtFU1p8Ubv/j4Npkd66e/M741ao/nmSK45lCeZHwkXRpk1f4yDDjH9
/WM1Ms4fCvs89VxU31G88DBpZY7YEc03b+/88z/vIvnTF3e+/SXmy4jvzoHv
ua+HrLz3B2TJaVymAfrCQzQuhxOPhRNPhJNPR7M/3QJo2FioIevvgYqIx5dk
ebxM4s6LJEIZhjoWsgNGMKRq1lBk4P7L8aH//P0wCSFjs2yMw+JYYW4w1xjI
El86aQ0H9MzSbv4Y6wfZyBBl8KXHtaNVPN44QNs8pl6ILj4RXXy0QMhO3NX9
5u1E9tU3buv44xdeJdAnvpIlLT7xlZ4z9wRn7w3P3EdWmodmGouhxTRYsw/2
SHjhO9HFx6OJp4rTz2+B7+r+6sqBGmT1YO/y/urSPiJbhazsq5AQzfnR4uLu
MgmdLIwWl3aXV/aWl/eU8EjQ5VdI1g7UlumGMZRjj/doH0FkBTcnEPxIwr8y
Xp4fi5ojwdxg0BjIz/XmG7Vcsy+gk1Z/uDhUXBwrrY7X1g/0r9PnPFBcPVRa
O1y5fLQGX+vGAdrmMfFCOLGDvOXwxD3df7595xu37STL/O4dGdJcgnvyrjzx
JSETffruvNPfwHhfWUJ85gFysPPnHo0s3yeiiWeizb874SOmEEIMvsC6vLdK
srSnQlhbI4WFsRJhpYu8aE5wTmpFIqZb1HzJ/FncNvLH6f4RWTvUR4Jz+i/6
Cwx3KCS4YEpwZ6vZmXLPdKl7ppIhxPPDxcVRuq+qa/uqZkSI+d7KhvriD/Ln
v58//3D+vXuNT8UDbk74nvpqAPsM/SW4JGe+EZ57oECONME1HnVw9lv8F85/
J3/h8fzEjnDz704cV/f1kizvp+vctzJeA1YhS0Jk54mv0VwI/ShCPwI6ASJZ
2F0god+iX8cfwd/BiYi8i/x9gguyVqpBo5KfLedmSll6pB/pSXpBa4jf1A4Q
B8rWXBuLfWtGTBMvBOefIAObf/de6yqfvbdAiKHFxPfUV3OkueQ8k5z/RkR8
z94fXXiwdOGhouMbnXuIYquQ+F56PCBrsPl3J6Dgu7a/j0wf/SgIAHdxd2Vh
rEyKQ+oDoSvcHGRdo+vcGo6AWFiTAYeyi9hn1O2h7xPo7PxAZOCGjVrAKGO4
eSPZeqGHpFkLFwZL9GL+m6Mh3UhsalxkR3aeKN84Utd21H9SvPBkeObh3In7
egjuua8XztwTmWGX/Ocess8El/neE7AKfy24cH+BlJcQ03h97gFOfZz/VoHg
QoUvPR5NPrkV+zxegwDx6r6+5b2EmPSuSlhZRkowjCDL6jMQkbVkg0nXeSBa
GGTKhAmsAd3TdPkvEfwKhtrZPoy2lulsOSBplILZYn6mkMPjVNAzGfbQ863e
YrPGN1ijn0dqshsY/eEfXtlKUuU6Huv7azRqrI5X1vZUV8bKS/2VpVJ5KVtr
vFSa/mnh0tPhuUeDMw/kzn+jePZrDPfdf+kmee/LmVNfydHIixAJfEl/SYuJ
8vlvRsSXlJcUmfT3zIO5Mw9mLn47f/F7+c1/MMKq+a7t79d8WyNWYReHyvMD
RRKoD8EldWNr6Sjzk4Y+tJvdoSF6cWEjkT9irHFIZBuVENpKQCGEmITgQuqF
PMlMKZwtR1bTe/P0dxjxHnYY2LtDiuZIBQLv+sZhlWONrh6ZwfEKfxLiO1he
LFcW89XJX+VnfsYe78TjJR5GvxZxHETKe3vXiS/1gO+pr2Te+3I3jcuE+Nx9
ZL3ZhSa+F79VZL4PhHRC7veFR6ILjwSXvhNceDy3+Q8G4ywmGvoLxKS5gozI
tvoLEJw3+8iiJhSZjbYT3AzyW3JvyB+h3yVGwGQ0N4Taar7Q3HqYmY7oPCSZ
KdBromatRK9nYcQhv92w9fEW9xVNvEbedRl8P5gRmbw+8u0plODIYqy8PFQh
vvPZMukv8SWPl7xf4ksj7Ik7c2/d3v3mF3eRvH1bJyE+fWeWhCif/Wqe4JKc
uid7+t4cOc+kwiQXHmS4hPjStyOKgreqvxh5DdxeeERALHzZRCumBmshKaHo
I5vNATxZavYVIXROMj9QnustkDRqkchsNWQxcAUxi1NbI6TFQT3MgW+jUiAt
pkf6Rf4LZN4HQhqOybtDME6uNfGF8t5Qvs7o9a3u7SUhyhxZjBSXyHxVSs2e
aPqlsP7zaOK5Itnn0/dnyUMmPX3z8zv/+JmX//yZV97+Yue7t3W/czvZ6h5S
5LNfDc/fm7/4NXrMnr27B7HwqftCEhqFzzyYP//tkOKjC09t2T6LtwzNpdEW
wy7rhbG0oonQOyCG9oE4lNH7X/otUVK8bL6v0OolBQzhRBmJSNxoG5CqapkK
soRVCz1pKEPlI7bVtdJ8f5VGkOUR9tIplCa4V45x0PT+8f7Lr/etm0zIjTDU
dPU4HifZ17823mdUuLI8WgLf+Wyx+Up54if58zuCi48VLjwU0QhL8e/bX+x4
8/O73vynnW98budbX+ggyidu7zn5pQzJmTt7zt+dO3dPRvOlcIm86JP395CT
Nv10eUv5DTnoypCvS3zJYU7zJdMKarC0wlROrKmk1/QyRDyJ+8HCrYX4L+Fr
XCnrTYn59fiCKVGGCF/nV4cw163eMr0FDetIvLDyHq5AeRE03SC+pBrO+vXT
0GaG4NrKaGVxoLRQLhLfuZcLkz/LXXiGQ9fz3+Kx9e3bdr3zz51vf77jrc/t
evNznZC3v9D97m1dJCdu7zx9R+b0XT0kJ++mYCpHfMmdvvhImWtJj0ezz1Zm
f3gtyTrCOj+a4AvEdNGgv1YBU3ydd5QnagJR1JkQz1bz/LJqQP8Lvgh/HCP4
VCGMsAcXj5ovnsTr4W6xoSZFNu+CGG1lX4lLEocrnAAx2Y8blAMRvxQ+KvG9
PN5LfBfoDi+Ec93hzG+C2X8rTD5PoWv2zAPZ03dnya1655+73vjsrrc+1/nO
F7pJiO9bn+965wudRjreu62bKJPY0sO9wflvFuuP1+ae6pt6stx4rjrzQmn2
R4Xpn0T1n+bmXymthX1rtd6VoQrfV2OljT4qm+XdFeErKgx31/OLMLzS2Get
a4XTEaKYTNDwpRMS+l8w1a9RsS1G20BEa67mKyaazi1fvKYYsJTz/HkG2N3i
BMsedrQoaLp8tAZbfSP4yvir+dIw0aqFjTA/25mffSWce7E4+UMuDVCMc+Iu
jolO3p7782d2vvWZzjf/qePtz3eJ0I+k1KzaX9hFNvztL3We+EoP+VrkQs88
XpvZUZ18sjD7fKXxo0r9+eDSC9nJH2davy2tBwNr1T6KyOh96d7e+FbstYOv
4oto1yQfotT4W2JnqRpxNOo0V/giSl3oL+K/IFBhEnjLHl9togHRG3kF7mQ+
g3M6mcj10DN8SxTZ1Nt7jwK6Ma5zre5nQw2+NyJHnQw92DhT/EuD73wlaAb5
Rlcw90ow92Jh6seFiR2Fcw/lTt7dffrO/Hu3Zf/06Vff+NSuP3+6443PdBJr
kjc/zfLGp1596zO7WLs/bwKoO3PgO/tEbfbp2qWnoqlnCtPPF6eeC84+03nu
B53gu1rpXegtsZkd2TC1JWGRHn8lMhK1NTEOkyWC830leTQSQcgI05OGb5lu
AHk+9qYcX4IC0XzTBtmDS0xJ6ATn8KsxFpMK88cbKPBXGC1ywuFA6f0jtRsU
KJFfajV3PztX5D+vjJQX+6MF8goM3/pvs9P/Hs78snxxR/DeN7tPfz1HfElV
//iPO//4yZ1/+odX//yP/PiHT778x79/hc7xSPTJehNfcqppCKYQqf54eWZH
mfheeCI38Uxu+vno/HPdF17oBt+Vcm2+VgRfAre8m4M176Mip2Epj1Xi4Nd4
wkBM4EglBas+MVLA8GoQM1+ba6pZ3F4EZOEaa6w11/OpIEITUs/lSEBZnK5G
iUOnuSpHZJyHGeFS48p4tH6wLOESPVJcfN1Brxi47DwPlxb6wvlSOJfPzXTk
Zl7OE9+F/xigEPjEA10U0hI1Us8/fWrX8b99+fW//Q2RFcTHP/Hb33/iFeL+
h394lWw1giZyoS89VJr+fqn+ZPHSUwEJ8SU5vWPXpR9l5l4qrOb6loqVVrUA
vmy7TBXG+4Tk/pGJJuGTPQh+WRDjgB07xmxm2fySbtIjnQtfQk8CPRWyeA0U
WSus0Vkb24JO2ixrbSW5lO02kiGZCQLiO5npnsr2OE0nvsWZYoHERNkhZ9KG
8ku7o5V9BY6Ij1RuHF8OMynGHKssDfLg2ypGNP42evLTu7LLXdX/F4w3fl46
+e2ud+/tOPbZF//w2ZfJYSYV/sM/7HrzU11vf6rnjb/vfOMTLH/421f/+Hev
kt1mj/pfuk/elT//jYgTWd8JJ54qTz1VqO+Ipp6Lzu3oPvN0x7kfdjZeKi1n
+pcLfUuV2mJfeWEgcne1r7+IgjlI38P6ywlnFfM6q1sw42xR8IGgpqkfcSI2
WfjWC1nmWwpjSbpVBi4Fv3lCOZEjyjk84klzAo3O4b/M/2ZsAqTIxp8/gKka
k9exMlbmgfhAiRT58qHK+pHr3wywYiJfumjEd76X7TMhbuYCQtzYFa33DC3/
ZnDy+cLb33j16Bd+9e4dnSfuyNEI+8Y/db39uZ63Pt1NOvvHT+z809/t+sMn
Xnn9f/+OFJwj4rvy5F+dvT+YeLR05tHsxSeiyaeLF58Mp54Jafw993Tn+ec7
Gr8urnT3Wb6kXANBazgg93J53I+RkeigIJ2sN31OvvlVqsp5Tdb2OoUtp+HC
43Ijcvy/QCx5SCORiHjOmi+AkmKSgKzwTQu8LNhqc/NwwYI+OSMeLZmesWh1
f5Eok8d13fmS58zGmQbfQdaCxVo0X4laYTCTyU6+0j3zcjD3Uqn+8+jEd1/9
/X3/QYb64sOFE3dl/vDFl0mXj3/6t69/8jfHP/kyWenf//0rZJlP3pGztf4H
wguPROceDc59P3/2ydzkswWS2edLNP6efarr/PNdc78uL3X2LQTVxXJ1aaA0
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
CBxaZ0VtSa4cvw4bXt+yx/8HhqLmmw==
       "], "Byte", ColorSpace -> "RGB", Interleaving -> True] -> False, 
     Image[CompressedData["
1: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
       "], "Byte", ColorSpace -> "RGB", Interleaving -> True] -> True, 
     Image[CompressedData["
1:eJzcvVd3HGeWrtlr5mYu5y/Mj5h1zprjurqsbImURNGDAEECIAhLeKT33vtM
eEeCRr6sDA28TSRsGmTC00pd3TNzP+/+dmQwi6rqqjojkdWdaytWIAGByCfe
eL+9Pxf/R0XD8cv/yz/8wz9c+99wOF7e/qPm5vLOd/93fPF+/bWaqvpLla/V
t1yqutT8nyv+V7wZw3+d+I/O/4O9dnqGd+ND+z0j+z1jhz3XD3qvH/WPPxq8
9WT4zuPR289ufvzkFsWr/jP/I7wO+8YOekf3YiOI/fgo4iAxdth34+HATYrh
m0cjNx+N3HrVf+Z/hBeo7iVAeGwvNrofHd2NjhTCQzh/2DcOeSMOBsbB/FX/
ma/glevq/15+z+Prt46GgPE6fKMQHdqJDOdDg7vhYUQ+MCBok8jJUhJkLEe9
NwAfzOEtEPnj63e+lz/j7/m13T3wvfyeR2O3j4ZukaRjo4C8ExpCHERGSNgC
OE4OYmNyHCVuPOwZB3Bi3n/90eD49/Jn/D2/drqHvpffgyYP+oRcyTGCg1lv
b8HfvxcaQuwGB/HOjjgn+OHhw/DIUWzsYfw6x6HQ+ffyZ/z9vNZb4+tN4dW6
wGZ9ON0Y3W4bAGoIO6fsK2h6C7qeHVPfruNv0DkyiqfjHz0ZuwMTgA/DJXYE
27Qzlvf0Frx9ONKJvx+R9/Xt+ocQB/7h/eDIQWj0IETYDyLDoH3UN/Z46Oaj
0f8g8t5oS6w2BJeq3akaH2hnW/rynQOFrsFtRd+2KpHXJg7tw0eu0b/+F8Jj
EeD8cOAGlLkTHmSqWWccnHd8/eCM415gcNc/gHd2PQOIPe/gvo+AIw4DQwQc
9hIfhZOA9g/38V/ma6ujd6MpulLrX6x0btSFtpoS6ZZErr0v05nIKmJQ9a55
4MAx/Nf/QvIN5owcLzFWCA1se0nMO+7ePW8/joh934B8vuPu33VR7HsGD7xD
AI7AVcC12An078eGoO0f7uO/hNde4Nau4+a2biTd2bfeGFmq9syV29avBrca
YhsNsfS1eLo1mumM7Rn6cupYwQgPGdr3DB8FRyE2ar/6xh/13+QjDPnxEFrA
ccgPnJ+O3H4yTNZBeUVibC80uO3ugZJ3PUS74Oph1Djm7LG8M1Fw9ObtPQVH
/46zb889tOce2HEOFFz44f6cK8G09xPD+71DR8P/Lt17P3hz33Uzpx3eautZ
rQ/dO6OfK3csV3o2ayKr1YF0fazQ2b/d2bOr6YOHZLVxOPaecxDCOwoOH0VG
0ZY9EgnDo96bj/pvIShJE9ifDt3ByWH8On6GGkFhFNAwhA10sBEcQRix6+qF
mPPO/m1HX87Sl7f37btG0C7kzL0ZcxzY807cDgPUjEaGDnpGHv/7zEn2AuMF
62hBO5Lp6IN7TJ41zpyzrlz0bFVH1ioDG9VBNJHpa5FsVxyOLYTdu28fYNrw
0v3g0KPYddB+AtQiHvYR6scDhB2ylzkj2C6AGpwRZNTCPfbcfXCMgmug4BzK
2wYK9kGBegioEULnwsYD5NtHPdcf9/97Mu1Htz/dQ67bewcGkjOO5FSD2c7+
lSvBmTLb7HlHssKbqgikKnzrVRB2JNMU3bwW3GwLZpQRUrWtf9vSk7PGYQVo
tqBtZGWPE7ce9iDGSeF9FNAzEmbkb8g6wPnAL6FmG+GWEb+B/MTZs21LbNtg
IH3b1n5EwTawbenLGBOInDkB1LCRHd8go37Ye+Pp8K3Hwzee3rj9qkH+5RdQ
H45+uBe/eRC4nTePwagzrT3rV8PzFxwzp61L510rZb7V8gCEvVrtSzdGMm2R
dEd4qyuYUYW3DbEdS++OHXc9WS60jazsUWz8YWz8iMuQOOUMeyJPBmf4BiAz
ZwLroyQEtHGZwB8GkrNGgRpekbP2wECy5t6sqSdtiG/pYzimDVFcWVwF+Dby
QPwTj3vGnw7e/mbsw4cjN141yL/8enrn88djnx70fHgU+njXNp7p6kfKkaoK
Lpd7Fs+5507aZ07Yls952EM2r4bWGwIb13ybnYGsOgLUeVNi2xJHK8bp2WFg
5FH4+lHkOpgDr1SeBIaRJ0OKnMVxQJxZJ1Tdj2/BEERGN4LfADeGqhGs55wh
kdHFsvo4TgB8Sx/Bhdh29MCxIeynfbeeDFBb8Gz030HN/s1Hvwbqx/2fPgp+
vG+9taMaW6+PLpS7l8vcC6edsx/YFk86U+d80Haywp2q8q7V+4F6o8231RXI
aaI75p5dW08B4eiFzQLXw9AYAm0ltAoDpwxNQKYb/48DuHIuauZwaXCBKKMT
14vyDQdZR97aD8hbmghoAzWEvaGNZIwxCHvHPXgYHnvWe+dZ/+1vhj5Ci/Cq
Qf7l15Obnz0Z/fxx/2cH3g/3LTf3Vdc3rsYWy1jSjunj5sUTruXTbggbjp28
5E5ecacaXECdUYS2tbG8Mb5tjOfMsV1H34Gb0uBD37AUgREqPfxCzC7K3CiQ
M3tQpwyAPyRN6QRKwvAYqkJ4Aonf3U+Zhr0vb+2FXaS10Q1VKK0F6h7Cro/B
tPFd/AxuBFygV83vb3g9vfX507FfHcU/2nPe2jPdLHQNb9RGVy8GF8+4Hryt
v/+WDqgh7IUP7PDtpYtOoF5rcAN1WnjIjiFeMCXy5ljemthz9nMA6b5rANgP
vAP7HgkyZE8h0mPSuX8InMlAAsPw9sfxm9C2KMNH930jpag31eGMDhe0F6i3
jT0ICH7fhXybEvtXze8vv775/LNvP/382Ye/ejb+2cP+T77p+/Wh605eMwKj
Tl7yJy/4IOO7b2gmfmmYfsc0975t+bRr6bxDRr3W4sl2k6qz6hCEve/og42A
Nghz7NmRnsUK4k0c04Yw/BzAc/YE6VbgPYSlR64fRW88FC0pv4NvATUw7tgH
4dV5Uy/h1ffkdAkcdywDBXMfUB96xg689GOvGuRffj396JOndz59dOPjR8Mf
klFHPt61XKc6sT66XhUC6pkTVqCeOmZaeN8OzitlnhUY+CWBusmz3upNdwfh
1Tl9FC0jOIM2qMJGABlBBm6JI7ZN0R0rUrUIyd4tejaCI0BKSk7cehS/iePT
3jtPem5TlojUBbS9w7uuQaTTe87hXesAo94x9aNExRHv7NkGDxzDSLmh7VcN
8i+/Ht268/DGncNhZNS3juIf7rlvbOuG1pqjySrf2uXgcpn3wbvGe7/UTb9v
AefV877Vi/7UJfdylSNZ61xv9m51BBi15B7Cq4EUhHGkE0uiYIKTR9O6YEYf
yJhCBXscfoI0Dw0l9YuKxPuoWGDiSOVkbAxX4XHkJpwB0kVAxrAOSdKC9p5l
cN8+zLT/pl6vV/U6HBs/HB7f672xF7u+G7ietw1vqweW6wIoxhfLXHNnnTMn
bZPvm+dPOZLnvesXAyhhkH6krrhX6p1k1N2hrDKc04QhWnBmr2A9M+odpGSG
SEYb3FT5srpA1hAEberrCA4hSQNbgH3cJ1U6OKFyMjaGSudQqBrmAIuAsPOm
vqw+kdHE0uooq5pQW4cY9aFz5FWD/Muvg6Gx/f6x3fhoITicdwwWTINZZd/K
1cBCuXPurH36lGX+nGPhvBMpHzJq1Obp2shGXXC90QdJpzuDGQU4R7O6SE44
A6oYPu4LA4Ges7rQltq/qXCtdTs3VZ5tU3jHkaD6XYy2gO2TwTvfjHyMIweK
98OeGweJ64fxcaDeAWRUi5a+XesgCVvfl1bHC8aBPcvwrnkAwPetAI5v9b9q
kH/5Bc57CRray7lFCWzoT3clUnXBlcs+EEadiOPKRV+q0r9ZE8nWxTIN0Wxz
LNMa3mz3y5wzughUDetAOwjOHPsoQAyRDaV3tcu11mnf6HZmtH6oetsaReL3
KHFD7o/6dvSTp0MfMuqHfTfBeT8OYZOqC6JNpK4PQw+lH/q+XfMQUB/axyBp
oe2BgrEX+farBvlnX7vDQ/tDw3uDQ7u9I4XoQMbXu2mLUQms7dlsi643hFNV
/qULbgSqRdSMiM2rsWxjItcUz7bGtrui2e5wXhMv6BNoEIF6R+R4KMz33H0F
UcvsWXvgG2sdztV2x2qHDcJOa3yw67w9zi7NqJ+NfvzN2CdPhj9kSR/1jgP1
Xmx0NzwK1HnbQNbct23uh6SJtgYekgDqA9vooX0EHrJj6tvWJ9LqyJYqjCwI
8arRvvgq9PXt9g0gIOlCeDDtTqybwxlUB6o4UG80hpcrPYtljtVLPsRaTRCx
VRfNNMUyTdFcezSvTOQ1MXDetfQyanIMJNIwBy9asR5uEGEdzBmqzqi9eWMY
qLdtsV3/APVaDH34eOjOP9/47A/jn397/RMwxzvU6dp3Ex4CVVPPHlRtJdo5
IDX2QtU5XW/eADEPP3SOHTlGdw14J46bK60MbSmC6W7/q0b74qvQm9hJ9BQi
id3IwF5oMO1IpLQB2GC2K55pi603hBYrHbPnLcifN2qD67X+zbrgVmNwqzmc
bY9uK+LQc14XRyLNiZyUexQbRGoTzfGcPril9sI3VtosiDWFI6P3r2s9QH0Y
HkE692Two2+vf/pk9ONnNz75Zvzjb29+9mz0o8O+G/s9YxA2VF3wDG3bBzKm
HkSWKpcEbjqg3jcN7RoG9oyDh5ahA9NAXpvIqaJooCkd6gy8arQvvnbj8Z1Y
YieS2A8PQGMoKNY14fWOYKYtst4QoKK7xrtw0T53wZKqdq3XetNNgXRLKN0W
zHSFcqoI9Lxj7kEKx5A5/YCS4c8c+BZxVrq3lO71Lsdap21d6dw2hTKWUM4a
LXj7KJ0e+BBK/nb886fXP35y48NnNz56PHobqA96r5OHRMb2/KM7rmG0IFlz
L+64TW1sUxlF7Oj789reHW3frq4fFz2rjIAz2uh0mx8tyKtG++KrEI3uROK7
oZ59f++OsweVxYYqlLrm3WoJrTV4l2rsS5ftcxXmhUrrRr0fkb0Wgm9kO8LC
omO7xt49ax8lzObnQXZt7z2AjZhRpMe2DSG0g8g6VrscYA6Ro00EZ6rWgyMo
VZ4NkmNA1U/GAPnDJ2N3EDRA1j/OqHeQgbgHYddoRGAgoA1Jk7DViW1VoqDq
gY9lu6Jb7aRnxGaLFyXVq0b74qsQju0EYwVfbMeVyFkim+rgeqdvvcW/Uude
vuJYqLLOX7SA9mqtZ73OA0lnWoPMeVsd3THE90w9cGkpcy4JoD5EPW6TDASo
EZA3GkTibIlkLRGUitSDFxt/OvDRs+GPHg7QZMiHw7dp8PH6h09HPsQ7+/Eb
O6ERoIZdM+o8Mg3roMjxhvLqHhqyVyZgZZnOCKOGnteb3X+HqHeC0bw3nHeF
t62oL/zrnZ5UiytZB8hmxGK1Zf6yZbHalqpzoyqEdRDnrigscUeX2DVSACb3
miKRznNhKLwaqqZuEHMsow+hQkzr/FtaH4IaRNGhTeNi4TGgftxH2d2hmCHG
AUlD50hCIGnk+fsBEjayfRrzsg4iwHnHNAjrINoKtCx0o2Xaydk2W/xrLZ6/
RwPxRcA5ZwvljMGMyr/e7l5pcizUmARk09wlI4Av1ViBGh8BIfQcQ1PIPXiS
dQjICDDcKaGNb3FbiboGYgZnAEfxgh/j3o+9wPDj+M1HvbfFCLvEWZruy6l1
jDKQ/dB12PWuewSOvesc2bEN7Yiket8wCNSsZ/7zOFC9bv79NYvbnlDOgRoZ
kvNudntWW53LDbblq9bZSt1EmXK6QrNUa1ltpF4O/P1rbd60IrytiedE1oEm
D7UJmsKsKZoTxTifyNi5A6Ro4MAeBee8OYK65sA7xGMBR5FRlORUlQ/cfgwP
GbzN8c3QR0/66RKgWjwI39gNjO76xg581/fdY3uOkT3rCDLqIurYZlsYfyH1
ejV7CXVr4FWhzgYi2+FoIRzPh+PbwWjWH+bIeUM5dzhjC24YfOsqN5qtlWv2
xXrTzCXtvbNdQD1fbVy8Yk42OmB9qRb3apt3AymrOoLCEJCBOmsII9KGMNpT
DtBm1DkhaZa3YB4jPQO1LQb3yDt7aTisOA2PepYSY4/6bz4dusPBqLnH6Sh6
E8LeD9xAHHiu79qH922jR47rSPOAGnlpuiO6cc232uhm1Ks4dryaEiYfioHz
XjiBYyEQz/tjiG1fFOdZF1Qd3jIFcGsjPVhoNE/XaCfKlXfPdU5WqOZrTQtX
zUuNttVWd6rNvdbhXVf4MtpwFtWKPkTdHcKKcQRwfMlvQsmQOoJKGFGbUy+f
IwHIKMYL9jhSnR03TbBBtXgYHX2I6js2shMe5NkFiCcDt74d/PBp3y2qJSHs
CAn7cezDJ/GPjnzjB66xQ8d16gAxDqJZ3GqPbLSG1luCq8009AbTTneEXxVq
5BgchUBU5pzzRpDjbXtiaWtoTedZVbvXlK6lVivRrtY8uKiartLN15kRi002
QN7o8q51E+otTQioRV9oiCStCworDvOXnFpzjs2cuTxn1IiCQ0ykEePju/7+
/eAgTXSMDu1FBx/33HjSO87xrP/2s95bTxLjT3tuP4nfOQzdOAzdfBS69dB/
85Hv5pHzBppFJNU5JUkaBrJ2LZBs8MBDyLc7Qhnly+gM2Q4lMv4oIheMc4Dt
jj+OjC7vjW57Igj4BqLgSzDqdaNvVeNZUTqXO6zzzSYS9mXVzBXdYoN5od60
1GxFZrKhRG4cQInNPFnDHCxpZs7f4tYQvsHWQUZtjzNqSJp6SLz9+/7+g8AA
RXjgKDp0FBt+FBt7DBnHKAD5WXz8SfT6kyiOtx6Hb4Pzo8DNh97xR54bQH1o
H4OqgRqQVxq9qSYPYu2aD6jTXZG0IvpyUGcDsZw/BtpZXzTjjZBXCM7kzM5g
2hHAEdaRdYF5FKg3zYF1nQ+ok522+WbD1BX1ZI1mvs64fM2GWGl1QM/gnNYE
sroQ65b1zNoGW9k9WOFcyHC1jtYQwZwJtSMBYZOBeHv3fH0Hvt6DQB8HviT+
3oFD3+CRf+hhYPihf+jIP/I4NA7IR97rh56xJ76bTzzj4HxgHqY2sTsK9wBt
+PNKoxtHRo0i/SWgBuScsAhAznliCFnJgJy2+hBZewCx7USmR6g3TH54yIrS
sapwQNgzDdqZBv3yNUuq07na5UKsK6BqLySd04e5hx/niLQGlWAQ72R1AcpG
6CTEgTwwZ4SNQ+FRSdjEPAJ5o1SkuTT2aN4R23XGdt3xghNfosWMwsy5o5sz
c9RBiIfuEeLsHD2wUefSI/vovmkI6ceubjDXndhoDqDgQi2wUu9E8UU9M+qe
HxQ18O6Ee7nVA+esBwlGBBaBAGRoeMvu37QR54zNjxDMATwE1GlzcMtAXUDr
KtdKl22xzbzUal7pgJjdCOpn7naDNlQN1MAI7AwfqPGOIO/lb+FnEGKoBZWL
X6bNmd62KYQTTgszplDWHELplLehgMLNEtq1UQIpAjUmDVNy9r5r7j+0D4Pz
gXkQsW/s39X1H+gHtxU9aBPXGn2rDVKmB9RoE6HqXfP3s4TkT74AmcJHtrwb
SMAuEDse5BiRLXtwE2HzbVi9WxZvBrQtgbTZv2n0bplwHsqYgmljgGirXBB2
qtux0mXHcVXhRNBJl2Nd4QJShik4+4WlEOothTet8mTUdEQawwH4m3hTS7Rp
eEvvT+tQKtKX7DPi/QBKJ45tHPVB/KrNbl9aGdroQumKSsS/pQjuGHoKepoz
X9Am9vQD+7oB6vfojuU6Ypm2CLKOVIPrhwP7p1H7nnsF/AFZHCwi7Qitmb0b
Vj9UTUq2eLfMHnAG7aw1CNSAvKZxr6pdGzovTqBtZCMplQsJiRwCnZ+DJb2l
hpKDoI3cD7UPIG8qXBvdzvUuui7gjMDVwZF6P7S+DbUb13FT40FhvqUNiMaU
xnPBH9VTRufLaf2wrLmrBuQ8qWanCNfGNc9Wqy/dGaQqVRnNq2KAvKNMbHdF
UYaDM3WLNXmQUb8EwsiZ8/4I7CLjDnFeAbaQccYZzjpjHOsWnzCKwJrBLWQc
AF6AZSVv6Cm2jEEckYcA8rrWS0cV4LjZOsRwlQf5HmJL4U8rA8hJKC1BBtjh
3ur2bHS6VtvsUrQ71jtd4J9qs+OEroLKw0OKII8TXAKcZ6FzrVc61/gyKn/y
mmWhzogCavaSdqHKmLpi36hzZZp8uZZgptmfbgkgcu3hfGc02xbauuZP1TnX
GtzrjWQdLwE1VXwUEYoi6k1bIG2PZBxRHCmsxJnaPoN70+hHwQLCMI1NvQ+B
3GMNH1kcU2r3CvSs8Sx12eAh0DM4C8cm1KvtLoBl4DjnL3FMtdpAabnZvNRk
whHnK602ABdu4CGdd9hSnXbcGqBKbNVuQM4ZAqDN/HMa6oHZaHcvN1rAeeKC
YqZMM1+hX7tsT9d503XutVrHep1rs8ED5uAMvMtXbPOXTaCN85djIHIjSO2g
OwpnZlVv2cIMecsSRC6HgG4BOWMO42TTQF9u6IDajyNkjABhKmRwVDihZ5Zi
st2OSLU5kfXhyHiR/iHZRuBNOgrIi43GUtQpIe+NLjcbC1wFtLnLekPl2tKQ
jac1PkadVQfSSt9mh2el2TZfpX9Q1j1xRjF5Vrl0wbhW7UhdtiSrLFD4Rr17
XRxXax3LVZaFSiPON5q8LxM13CPtItOgFtAWoEC2LBLmNYM3bQlvmUPsD5Au
20XaFAJecJZRSxYt7BRN4XKbBWQgaaAGz8UmC8AmW+wInKOo5C8p9242cxDk
FiuCObOTQNVADcK4cKCNI6MGZ246qR8bnLs9qy0OoF6uNc9c1E6fV0+dUy2c
1ycrzKtVVih86ZJppdq6esUO2vCWxUsmHLcavZvNPtj1S0CdcUUQUjHiCFHz
Z6FgJcM0VvUemMOGHkoOIXDOsSZk/FzMSiQblFej8Uq2W8EESfVym42tAGKG
kpPNtpVr9uUmK6rIpUYLvkTgBGKW9SzRFqpe63ACNY50ImaArPNwOdISPeUb
OJdCoAZnRPKqZe6SfvYC0Qbq5XLTYrl+9pwSR9BeuGhALF40Jy/bVmucmw0+
qPolebUnRrTRCArg5NJWCsk0LEHQhoCBel0XwBHCRgA1hM2qXhMlucjx7Iwa
CgRtVOhLrVZQAjeWMQgzZ1TrOCJma/VT1ZpSScO3U0X3SLbQ/w6GMG1ALmaM
xDlvDPPwLgd+BlYDVadwKa9YoGp4NWLhgmG53ADI02e6p88o58u0jHq2TD9f
bgTwlRry8Jej6oK3N+eKsz9TamcNZGxhBKOWi25Q3TLQTLlNGq2WfENyD5Ub
5rwm7FQ4BkkRHxy4loQJLzQYZq7ogHS6Rgu2OMdRRo0vZTEj/UiJYOvANUKA
NkSLVo8aPjHxhsxZF+BskAP/HGK9zQXaSzVkIFD1XLkOqBcu6ObPaRbK1OBM
qC8Y5s7rZs5qlipMoL1QaYaNAPVai4fn0v9wqJFmoAWEmKkptPjXjR4WMywa
1kFHLVo6N1I7oEa+Aa9g7GzO3KHHqGEa8GcEI1pESydsYa6OOL+Amnyj0TJf
Z6T+KGEgsnWw5/AcG0ZNGMXl45yc820c2boZNYS91upkVcNAWL0AO3sONqJd
rtCB88xZFd6ZL4PI1RD28iXr/EUDUpH1ZvdaC/4JX1od+eFQc/P3PM2wAHiQ
euq0bsS63rum84gKxSGAU4VCdQqlza4NtQexySVel5vhpERuDG6gN18vqffB
JeXdii7QZs6i0DCyn8Cul4sphyxjhszAqWUUwWayrQ2JWQp2zqhBHjpnVSPZ
g6qTtVYk1bDlxUojqE6dVkyfUkyf7po9o5o7qwZtijINaR7XotKYrLWvNDmT
zfi33Khef1DUGyWcRQpN5DcMPg6gXtcir3AicMKBqm1TJHVrxTQMoGCtcAwo
mfNkRg3Rgupklfp+pUImzM0imsi1Ntd6uztZTDlk95AumTiRafMJzKQUNXez
wMzJz9tcUHUpamgYXjFzWkkGck4zd16zfNGIbAT2snTZjHxvsdpE43GtHvpL
FMidfkDUcuaM5o9qE1OA+o5MAeYMlyZtA7XWLkHWurZ0VEGgjlhBZdFOt/yy
AAtPlv0BVGX18hFfcmvI1gFjYXNe+2PCcrCq+VvsIZyKUFJXzAOpKRTnbCAy
agBcBsnLZjLkMn0KhlxphmkjkpXiElzUpfBjlw2LNcbVRsdmJ9WwGW0wb/4B
RwSkhs/oQzBe1IMsZgoUgBqXcA+SNAyEUKNZVLlSXbZkq3m5hQx5vsEAQ56p
JUOGgOEVE5dVOGHaCBgFgmwZkJusnODJWYeMtFTSyeL7zFzO+qDe0p9MCnuX
EkKBeuWqDS2jjBrCBuelC/qlCgPyasRytSlZYwZkpIXJejMcPqP0oQjK6WmM
+IdDzekcN4KyaZBFo1opps1Em7TtQeMI39gQc7qIM+yi0QiXAGdQRasHvDJq
eRQGqLmE4SqGEmyqXHBuASh2DznALVnSOPI7pZoHc/lNviIse/quKGFkVUO9
i+Vk10it585qcU6oa2y4Fqv1jmSddb3ZBc6QNOr6bUOkYKLe2h8ONUsanBk1
t4MAi7qPq+w1kUiLPITOOdOAbyxdM4Izi5niig6ocUSgEYS8ARluDAFT8ycK
cAQgozwX8RwvCxi4cE5eBG8pci4VPF8FjhdaUkn8AjWrGpU47Hr5opkIX7Tg
BApHhYhGMNXgWGtyog3FXbAuHCmn9SNRh6S3rT84araL574hhmWlDg2coEhR
uVYU7mS3i6rsViub8/xVw0yNdqpKPS0SOUCGgEGYHRuEkV2wkhkvOEPSMmoZ
I36bLFdZ56V2nSzWjwyZG1++QDJ/go9kBgZ1xcKoESuXrBQXbSuVdpwkq62p
OqeYl+IC53SXL62goj4nyqIsFQ7BHxQ13IPSDL1Xbg1h1yhVuCuJDETpAeSV
Lmeyw7XUSj0Y1LqhAEFhUqWeuKScvKzinBnNH2ScanEAOBeGs3UG/DwIc0eT
1JXX5iz1ZIZW2gjKDOXERv4ZqRVuNuNb3CwmRbcJXVY0u1dMSD8WLlENTp0e
l6ypyzYYCGwEtSF1MVVROwjIG0hmBOeshhbXSOML1h/Qq6XeDA6hZzBHsKo3
Nf51lTclOK92eVJt7uUm+3ytabpKP1dlmK7U/v5ky71yxWwN5Rtk17U6IWPJ
h5kJG0KpY5SmGcyQa0NGyv+7rOHlYp/qcyfpcCy3Sdk4krTVVif5Rr1t+Srp
GTAXBWdqGS9ZFypMKA9RyCDHowax1srugcwnq/JvKd3sHj8cYfm1gUJbpq2T
WkBpXgdaQLUPWSs+F3S41uFdbXUnGx1zV0xTF3UzlwwT5aqvz3ZOVKoBn1rA
RtIwXAJYwGGh0ViqRpmb7AayA8sYS3+m9EoxVTmIc5uk7VVRIaKNQ8A60CCC
MwoTtIkk7EoLUC+WU/GYrCLO+DH8PJJ5qHpTQQFJo0F8yaipNdS4OICaikHR
54DbX/TI2ZfqrfO1ZnC+X6aartTfO999v0wxdVk7L9I56Hm+wZRsdzIoVixz
YyUzxmKLxo7tFO5tl4vE7/5w6QXi38m3Cec/SaSRSB1rzZA0cUaqTGmzARrG
CbeGKFug8NUrMGpxUZqsQL3VTaOZFDpfzvBqZugRapWTBlBU1OcAP6Q0uN66
WGdZuGpZqLE8uKD+/cn2u+cUDy4oJ8qVaBl5Xg1i4Zp1peN5MiZnbvJ5CT0b
pyVsOKVWXIpa1rZ8jgaRvwRqFE24yrBo4lxjXBIuDcgIrrtLUadqLEhOGDXu
BaqAup3kHqYQ4pWgXtO4V5Q06k3Ded2ezW7f6jXXUq1l9rIe5jxVrr17pvvL
050APnNJRxPzrhqgeUl1HQ6a+1EsqEszBIlPMX/glJtrSRCjzj3kD01W/Cr6
bdyVLS4fXw55yAY2xTkk5xvz1QZwRp7MFg3I1JVHnXg4MVCCVw5tG4V1G+Ew
sHQYCFBTydPlQGmfFqPArwT1qprmcqyI4TyqiDs8y1etgDxdoZm5qJ28oLl3
VvHVmS5IGvAnL1H+jLaJnLbdTm7T4SgtpWUlUy9fCWqZM5Xt9Xoa8xIZOHPm
HhIZNXOW7wJkOC+gXmtwQtJwDIgZnOfOa9AUMm0ZNbwFqNEmEuc26lTBB6Rx
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
CcWJtf+0M5e/ANSc/q0=
       "], "Byte", ColorSpace -> "RGB", Interleaving -> True] -> False, 
     Image[CompressedData["
1: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
p9szDgLqU4Ljl1P6uTDJvwCojjQj
       "], "Byte", ColorSpace -> "RGB", Interleaving -> True] -> True, 
     Image[CompressedData["
1:eJztnVmvHEeangX7xpf+C/4PY8Cw4QtfGgYG9hgGfNvjkRs9M5C6tTRJUdzP
Xvu+nYWktpZaCyUu4naWqjobSWk041/kN+KNePOryKLQrT48RVEV+E4iK09m
VlU+8a0RmfXv/vbNv/m//+q11157+99g8Te/OvNf3nrrV+f+57/Fi//1xtu/
+fUbr//df33jndd//fpb/+Fv/zU2Xsffx/hz62q/fX3xnV8vXnijcPGNwpXf
lS++sXr5t4Xldytrv68t/m5t6c3VtbfWVn67Unx7FVJ7t/javP3M27nfLFz4
h2vX3ly5+g+LV/5+4cpvrqz+brX0zhr4lt9aqb692j5X6p0rD96rdM8U+2dK
s/688/aXtitvLi+8cW3hH68W3lpZ/e1S6XfLAF15a6n2zkrjnaXWO8ud36+u
nysN3l3bOFPcOjsn/nNtS28sLb+5XHi7ANDNd1ZBtv32cu/3a923lgF3/d2V
DYB+a2nznZXNt5c/OFv85L3yR2eLkI/PFCB/ODM37z+z5hT57dX6u4XmOwWA
BuUb75UgN8+Xt84Wbp4tbr27evNMAfLB79cA+tP3yp+dr2A56w8+bz+xDc7C
KRfWz6xunnGsgfjj85UPz5U+gi6/V/70/eofzlc+Plf68EwBlD85W/zsXPnz
89VP51b9Z9s+vlD58Hzp5rnCR8B9xmkx+NJ0gzXVGdb7E6/dkD++V4J8erYw
6w8+bz+xfXqx8sn7pU/OFz+9UP74vcIf3i9hCbn5++WPzq19cnbt4zOrkM/O
lz59r4ilVmb9weftJ7Y/XqqCNeSzi5XPL9ewxPqHZ1chH5xZAVzKFxerlvjn
Fyqz/uDz9hMbiAP0F1fqWPnsYgny1eXqFxfLkD++X9TSrZwvfPbe2ud4eaH0
5cXyV5cqX12sfX4ebr385YXqrUt1CFYgs/5O8/Zj7fPLlS+v1m4vNAGa8uWl
ytdX61i6l5cqty5Xv75SA2KABvGv3i/dvly7daH8zaXqF+876FiCMlYg2Bkd
Y9bfad5+rH292ARxiEPvWQs6Vj6HOl+qfHO1DtxACQWnBB2P/QFLdgmq/6y/
07z9WLu93L610ABx2vNbV2q04VgBa5p0ECdQUsY6ROad/0J/gHAfbeQOWHLn
Ly6k6n/7Wu3rK+6c6DZ4lzsLTchMrsMvp0HHKV9ccbip1yL+p5+HxMGX+s6+
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
KvSlhm73jsOCMOadjUP3o5N9OxI68xvHXvmmcXaNxylnz9+/YJkm8ysO4tOA
bYWcP4OrsbCxB00B7uPe1vFgEwLWXvqvds38JWlBx7326SfpNYAlU5xYY/1u
NXfjsYAbZqPFn7vlQxLczlDt9jqWhI51EMcyznBwMusr8Utp1ERmSeFXL81Y
Rny6zsD+gCn56ufLZavVSdhzwi8qUqnD+JdbGbd7B1jvre93+vuD3sF6/2hz
/XhrTvyUmv1tWVY4k18JtKJfmNKe7Bjabs921N106uzddCDeW6ccIQvzcrgx
AO4n1zef3bw+6yvxS2nUzWjP2yJOrJTwmxST0NklslEeXyM9hnfubJAva+Px
Odgu/4LLfrpxHQacjvvJxuZctU+/MTnaq7e44qxuq5utT/5GJISTUjg7JT7/
dsCdabcVfh9EpcYKDDhWOAcVoCHPtja/v3H953Vj4KvRiExC4nGwcmBVmMaZ
/UG9gruF9Aqu2aOnAHQw3eDu6yoe9HXOOgbuHz64+f2HP+97SX7Wzf/eRBjI
MDIIpbBuHK32vzfE+/S1Ub9H44KxKIfejDvT7UNx3lMw6285b1njjXtP1zef
bWxhiZehCOYlQe8exOErogc9N4qtJCtm1uuxnLIFpebdBE7m4dnL1Nzz0AYb
4TFZEXReSJNWWitef7e4pHD9u+s3YMCdfHDj+w9v/vDxzZl8tf8PNBqCUQ==

       "], "Byte", ColorSpace -> "RGB", Interleaving -> True] -> True, 
     Image[CompressedData["
1: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
7XOF21+q3Xm2tXd9hUgNS8uUKWo/L1ahACY2dq5zy0ZwrExujjExtv2n88sK
BLlL/dghU40pFOy1wVKLmoUmhVQKQcuxCY2KNKQY5eT24h4fG4aKCc100UXs
3gz92Y6jyd59Z4fU6r/5eusPvrL6777b+qOvgVS8+rfZXz5Z3np+YffaMpA6
zKxCpmCnPDqBVDCuTqRCzXPWNMewWzh9blSe73rsWDhiR0z7ep2zV5J1SFNp
Phkma7O08kdHmTErGUHt65fOjL0IGpSOnrlZmye0Ve3Y5RhtUudVaAGTA1/m
DO/QcfMPv7n2b78NpFb+5HsrH774g09NvfZkZefiCrTfwezaYG75sLAI7Qdc
VLBE1Wc721OmtOc9KXHxMSXBRKScAjSUbETj2aaFJtI77tLaRS6YUiP+VU26
jgzQ6r3gGcWdX331IDXsFEipZIUwRbBqqlsOmdyzRKr9L5+++cHv3Pzj58DV
f/gXk698cvIX/7u6e2n1YOrm/vTKwfwKkILn6yteEqRSYGE5cReV/6Wuw56Q
Um7U3vqE9czBYTFN6bfi3SQpUymxSsWOUnEkG0QSgjuxfkP5YnkBVk6lftU0
jLm/2IGzLs5AOQq7KT1ArN9jHcuZItX8V19a/aNn1/74uVc+culnf5358afn
Xv1ioXdhaTC5tje1DO13VFomUoTJH9sCK9ZU+Fsh5JqeBLbYuWg77qEQ8VP0
jzfwYvTVCpSO7ApokUolO1JSZkmFjfV5elNXja5N/Yc/8RAo1Kx1gtc3psoS
It/8OfhfziTlw606wsYNL00sXTg7pFY/+I0f/6eLP/iPL9z88Pde/evpn3xm
7v88Mb/1vfbexBKQokxB+4mluyJAX71JsLTfba/YjlVkdXZyTkIukatrMAkV
7Ptob20hJZhSWd1UcKBvOnCmAN2OvSZ24i7IEKU3dkd3dhBGsRqkyaaOMezQ
IkZYili3TN3yV0Of+LZs7Kp9hndne+VD3/nBn3139U///qU/f/6n/23qZ0/M
vfrk/Mazzf7lLpDan14c+CAtEBGjOCy1hRSJum+BG5vIeY1htyfTH9FWdGeq
TKGsyDk7NquLiLU4KcERUtqbY/f/WreoN1oPED+xpvbCMfQ3cjs59ogWFY/v
DMX/QAroDMpdYuSW6FjC/SweP/34pR9//OKPPnHxlU+++NPPTb/+ZPa1L2dv
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

       "], "Byte", ColorSpace -> "RGB", Interleaving -> True] -> True, 
     Image[CompressedData["
1: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
sjPrhf8apknXwyhhGxR7QnfNtjd8sZu1mm0a8WAHI39Ss+1CMtfhN8ic5jeh
ME21JRcvbxNT52xtEFD/mFMKj1Q9otbfpYvZOqDZob9rtn1TF/v7tO+DbWKl
uYsaZYf1ipvzIm3LzFR9uIUXhmNbW8b8nUGOPTXzZB03TE1Imsgf6LlrJn3j
F/uelCgUteUNfNBam942ZRVWB4X5n03J05dBQFljXECs3caxz5EyNVrp2fTa
jFlxruOumfSNX9C60o7NLLFWeFptiW4mNl+Kwlbt0JY7tJWd2NqpYYDMKN5n
qt2QBGbnOA0DdxvvvGsmfXtXpl3zZiPIJWul4ZylcFW/vC9vQHypIHC/PtYT
V3kGtzzo4mdegnMwFvmScXG76zqinVwyDEHbMy1vrFM+Csnk+yqOoFJ6o5cs
5xD04PDLTcfBpq1gUHDeBfU//U8dpOlOqrKT9Vblt1HT+127dNZZSe0UjlLR
0Km0DmLgggffn0K251sd3xaY25fgvyx+r3YEBfV8bE6UQcDj9jjtf9cs+U5c
XLQ264Y21O+z6Laj57ahwFfcMAodLaJHrJY87pkuEDUPB9b9R/B/fsdLFmq8
sDlF3GonBFqOGwz9cDuqEgYahSi4fgq/+P1IkOU7FL7y0nGOMr+LIxS4hmE4
WAVKk2ryYpOgUh0BzQmNdqC5n0BVcCSODGxU/6fJ3qHwBi4qmc10NT/azgaw
0PLu+s/8Pb/IZzs73rINHEkn0290Htqu/8zf84sZBhukbPy3qZicR7frP/Mb
v/4/7z+Cvg==
       "], "Byte", ColorSpace -> "RGB", Interleaving -> True] -> True, 
     Image[CompressedData["
1:eJztfWeTJNeVHUP6oo/6C1KEPih2I7QKxjKo4K42ZCiuRIYorYJakhINQGBB
goQHCBpYwgwwsAMMxrUpl2XbTHePAcAlCYIAgSFmpsu0tzPAivs7dDNP5alT
92UVxjSmgUFn3M7IysrKqn7nmnPvM/kvbrzjb/7un3zmM5+555/Z7m9uuP8/
3H33DT/9X//cXnzt9nt+cMvtN9/0X2+/9+Zbbr778zf+Uzt52P7q9hcf722Z
2/pcbW22unK8bGLHGyfqmycbW6cmtk80tubqm7O19eOVteny6lRk+/hgpkJZ
OV6FLE9XFiej3f5X9rbL2wxZgGtiQANuiJ03xFcmSyZ2YC83ZgzliLI6UzMB
9EtT5d3+V/a2y9tgzrYHuIAbx8Qd0HetPnkXYppgAsPfg/6TsgFNir1cniia
LDUKJnbA87wS1zhVSY5NSSpm+KYAa7N1+gGV3f5397beRqxNgC9wX6znTeyA
Z6AJejGg58FSwz7eVQBGfyoA9rv97+5tvY0QL9dLS7XiYrVgYgf2EoJjnFyo
5HGNnVmomXqYDhj0ZSIegz5p4aBqgmPb4+X68Zrtd/vfvc43I+pG0UnITWin
ara07oVazsQwdULoIYa7gY59fKZRMjHonfQMP1EJvoQCUCsYGhgUdrvZroeN
kdeaHXCYeZoYUrY3a4XBxtilZq6WzpNEWU2+U851301u0r2PCBHnt9P2zfA3
Zuq2h0ANjBbuQb9Tm0OccJt0qnmTdiVnOKp0DVlAN4ghvED3Jq3yeHyfWk8H
cGzfqw4BBwY9cFfoTWD7e9Bf5ZYwrq6tEQsFRTFtR+PYO2mVxnBA6HklPkv0
DXcT6JJKn1dJ/Aygh+EzEDAouJrAng5cwUZjR4Mr9HTpzpxtb1g3i6OU+cKI
7akAJnhpe1yMT8X7xHuYmPnTA9h3QR96X53ogP029QM47upAgrumgbvdkJ+8
jVaG1gYtpwOnuyb0sGUHPYCm6En1CbGkoDvocUz0+ascJVD0Y8VI7B06sNsN
+YnZQODZwvC3hB5Yqw8PsQayob0TbsW9dzJF3OkAoTeBt7cfg59ExOmRmBcY
9Gr7ezpwKVu3DeullUZEfp6YeaFTzrcjw3qc0iwa7oby6Pn8iO1xbHu7DG+Z
8Mr0rR4TaEZjEMMXe0I/XxrFW3aghk8dgM+H4F1VBtuzDoDKwJ7n/9ANzajM
PEUqpwI1gFAH9MCAhlA9IPZW/Kmh1k1NwAEu1uuhn113lLJQpn7YA31ywj2r
H7TBptC8SNYAurjxrv06xE0HzCHQG6gTUOh7Yu7d7lzJYw+xY7x0ZA+i+gCh
BwD6WhBgAgg2SOjV8+PYCOFut/rHYrOmS5s9xgLunVDCWkM/fy53DMoAM8d5
w93Oq8NXd0HEm7HD76kB0deXiYyzeqD8H8qgKaFmAXZM3OkKYt1I6B+YwNps
fbdb/WOxJWlUzxLpz4k1ISamgNgEuqHhnmpAbUmcfF7NfN6oYCl2As72QwXg
BQs1088CVYI8gUxA81AEAtuTAbKPoOsKPt1Wb22VsCbbF9iqsTEKZDjIcN2p
4RvoEIW+qzPReKZ12xmFHpiqbvClKgChT27YM3k4fxYDcdL2yAW0IsFqQK+H
aKZm5g/5VCkD/LxBj9Y2AShqvDg4mz92rjByvjhqAtRM8NLE3uK7OCDohJig
qybgmNA7M+/3/DnVTwQC1voMaBBCBAJCr30NriZgCgDmj75gyG4Dcu02JErA
HW3bLOVjKebmC+Pn82Pncl27JvSKO87YHu9SGYg4z/AloIcJ2159vipGz/+I
u6A3sL0lfWT+JIF8CdyBL9WDRWmeARNAHQA6sNuAfOQbWkB9LNsWra3mDBwJ
qO1xDEBxoJZOiPUyu0ChxFfjPC5Tn8AvUs/gqIIKXZaLGowdiVfpVYTo+en2
1fbdmJDdxmqHNwRBtiEbnG1OI52P62x9jhpncIyTtGt3E37Q3gVA+KwGF3yQ
CKq9m2gUGBILQgVWtpBSxIJ2OMIJMPFHTxAyPhM7sNB/vULPuEmkcIAzam50
0YQPx/pxBz0/gr29yxuKGRaY4vHmYXBHXAiRDSX0Kv0KkFNaSMPXYWDM/W2/
Pte4XqG3JkWrOpNHAwqRzqlDpk8YRNc1RuOk4+pQOcfrBokGdxeeiCzfclSB
SpW+200GmQhQAUD+ez3UkxEHA5uY+ZsaXDcMMPn3i/25Uq+54J/p7akP9M+4
IGznEHpgjQwi02wdo3PUzgEdxgU17dCDMb4kPyOPHgEmAnD7yHHQBcBKoPn/
NOJXMD7N9rsN2s5szhid4Wu41+hPwkb/4JiAwoePM0BALBFQqt+SFE8/G3py
9TmDYj2/NwwKgN51ErFIqEkie3wIOnC/NtC//2r9/VcnLpyovT/XMPlgtvHB
8Yn3J2tb1fJmVLpQjraj0mZU3ipXTLYr1e1a7WKjsT1VM7kwXYfY8eZUdX2i
vJrKSiNaqpXi8mxgYiHNo9DMHW8n9O4OSu2c7dv+D+NHHIFU1JxbYIDgS0Kv
Jx3EgwIBEVfQdWAAnD9H+yxOFpN5QF0F2DzZuDbQf3B64oMTEx/MTv7DzNQf
j099MNkwxDfyxfXx/Ha+vJWLNlPZGC9tFqqbUXWjVt5olDcnKtABk43Jyloj
MvTXE9yTHtjSYrWoBM/ZqUOWwGly50LAIOhp0QgrS43I9ogULhDzx6gOOG6g
xZyUsXcDlpIHl+Lxlyc/uNcNpL2EgF7Hf6Y9fX2Gv3HiWhT83z81eeFEY/vE
5Adz04a7YX1xLPrgWOXiodLmS4W1Z8cvvBRdfLls+61XStuHonU7f6yyNV69
WGpcrE1cqNe3GhVTg7VGcaWWT4bFGu5m8uW0fdACPYdJ/6y1FydEk9lcU7Lv
kLABncV6l0/iq6keaqSO77kwxIzAYe3sXW08MxYETqCnQovpLADt8YfJA3fI
R4f4xdM18/OGe+znZyYvTDferzculmobr+QW9r+y9tTRlScPLz16ZPkXRxce
toOja0+MLT05uvzU+PoLpY2D0dKhwuLh3PJ4Yata3Z6ordej1XrB0E/HvXft
nQ0Vgj5I6A0Y9LWsp60aOmG2c38NNgP6MLI7WMOKjZ7hsWqpupSQAFCjAL2O
/Ilpvzh8tf3t05M7Dr05+f/32pT5eYvUF6ca71dqF8Yray+PdR4/eOa+fZ2f
HFj82cHF+w+27jpgsnDvoaUfH2n/+PDSA6PrTxTXnimtvBR1DuYWj+TXCtF6
tbJeNehLq71ZDz3omSy3UhrvaneM8qzMa4VWybMLx9qqShSHmHa7PwdXr66I
DyrTuc+G2uU+rnklowah19GnmCNmbl9xt4j/UUD/x9dn/nh62nz1cim/VYwu
5sqbL+WWnzrU/ukLZ370xNnv7/vDzfveveHJ9254+vxNz753w/4zN+4///0X
z9/28tm7Ds7//GjnufzyoWgjV1/NlZfz+bVKKQ7xtWIY5Z3r02wItRdqBYrz
Wq7RhsV9VAcUl6bU9AZZtHP4qpMO9xD6TIfvriQN0LoQU1pcYLgDejcADPOJ
1qbLGzNVzA036IH+TiG+dbq6fbJy8XTjH189brxuPSou5XJb+fI/jtc3nx9f
fvRg855n373lsd9988E3vvbzt/73I29/7ZE3vvrgqS/d++pXfvLbbzz+xree
/PX39r1954F3Hz68eKC0nZ/aLjbM8FeNFjZigpdOgelBHwLhmJ5qAixdr3cN
q+86cEP656ga4e6knUeEnirhaJtTG704dAKucOSKPM7h68j/JNx3Z4ASeirA
TkFvuG/PVU3en5nYnqiuF0vrucI/FBsXXil2Hn757D1Pv3XzI7/62/vn/vr2
U399199/+aevfem+2b+6c+ILP5z6q9vnvvzjX33zsbd+8MKZew+deejo+afH
Vw5Xt4uT79emN2rVtVqk0JuE3eIh9I7pOR5OTPXjDh11Dtrm4cedBw5pfKhv
oZmHzj/0D820quy8kGhIXsd7JDw/4tz/9eOV3roQO8f3jN1dPFm/MFMx3Dcr
0dp4cfno+Mbh4tKTR9+797n3bnvqjW8/fOLLd8598Y65/3hn4/M/mPjcrdP/
7rbG539Y+/yt01+6941vP/3ubS+/c/fBdx849t7jo63ncqvHqherU5u1xkql
uFqL0ukSieEnfNth54o52rWqbYWKXCamzuo1nQ8DsXM7mXQ9VM7Qq9Nmnat3
ND7TC4XuS8v7aXbfne+Puf9m+1tzdZON2R1b6uHCqfqFE7Xt41WL8lvlaH2s
uHBobPG5kfd+fuD3P9r/9s1PvP61n9f+8pZTX7zv9H++L/8n3yn96Y2Nz/6g
8G++V/izm2b/2/2/+dZTr333yVPf2/fLO55755FjZvjNA/nVXGUjqi5HpdVq
KZ0aYwpQxGgc6D+bSGmeg16byBqZTcfLlPu5pN45bcvrTfgDnNPWO4QenrFA
JdSETP4/RBP6tSXHZD+t55eA+0Itt1jPm+FjTZitEztW1tucq2xaNJkqbzXi
yszaaJymtZ4eOfuTl97+4TNv3br/1995fOzzN9b+/e2/+spDtc9+//C//Eb+
T24c/dffPfKn35397w+89q2npr7+8PQNj7121wu/f/TYH/aPdV6JlsdKK/mS
OXyDfqGUM+mUi4vVaKEatctFR9jUwGHCgN55eEZ2FvBdRuA8iZoqE/xMi3YK
ozrg4nLo21tJyYiXOeg1lIS0EO+yG5djPAT9MheCsAOgb+a/U9CbFm2ZLk3X
thr1jVLFoF8+nF94drT14OF3bnvut7fse/N7T9W/dOfon99U/cKPJr9wR/Vz
P4o++4OD/+qbR/7sezP/88FXv/P0yZue/uUdL/7ugSPnnsq1DhSXj1WM5Bv0
y+XCUpRfjPKA3sRwb0UF58y1wVHbdzi2JDdXC9V6jgusGjKcgoUXN9OuQKVk
FDVwdRQcT6hBPFQ5XEC1ce5InExveI+JjOIruuWezPB3Cvrtk7WLs3WFfuVI
Yen58XMPHXr7judfv+mxX3738emv3n/0czeN/PlN0V/cVvvLu6K/uOPwv72h
/J/uPv63j5749r5Xb33+tz8+bCZ/7plcYvKVtWJ1NaosV4omsZ+vJiZfKXX6
yZirxLJaq1bcSivnHG7BO7CDRiJmD3rtxOcxsXMuutWfzellauwKPc1ZlSfM
QB0R1RBG+hdCz8ndqQ4UuRjUTkI/ZxyvAejXi+XY6o8WOs+PnXnolTfu2D93
48Oz//fB6v+4p/hf7ih96c7oi3dVv3jv5Fd+NvnVn5/+9lOnbt5/4pZnfnXf
y289dOzM06PzL+YWjpaXc+XVqLZSrizC5BHlq8V4okS/Q9ao7WxZfb4OpGlK
ed+F9SFWzwPF0ZE0F6Mzj/UkfYgqqhs2oEQ09BvOSyTX5JnX9085LCDRg+Hv
FPQW6LeP1zenqjH0pcrqaLR4JD///OjZxw7/+p5nZ256aPbGR2vf+Mnk1x+Y
/uZDM998dPrrD8/8n18Yrzv1/f2nb9v/2j0vvPnIkd8/OXL+5ULrUHFpPFot
VFcrsWB6FKGPh9Zn5V+h81djsT0KetpQShEz0VduFlr6ICKn1zjzVLcA2uB4
Qieo4joPn8kHHPpa0mF9LxnC11sWzNDfKejXp8uG+8ZkxaA3L70yXl44Vph/
cezdfYfffPCl1+556vU7nzlx6xOzf/f47E2Pv/bDZ1790TOnf7j/l/e++Ord
z//9z1588xeHzzwz0nypsDASGe6LxfJqpb7eaKzV68v1ykqjimIOJ0tSATKt
Q1ubbaW6sRAvehM52uzaU324M3NH7504x84zyvzJGGn7uECrN85jDPmFznGx
e0tHcBF6WL3tdwr6DeON0zVYfQx9vrI0Wmq/Unhn/6G3njj4u1+8/JsHD/z2
gQOv3/f8q/c8+8v7Drx2/wuv/+TF3zx88DcPv/TmvkNnzD+8NGIfWSvX1yu1
5ai8XquvTUwsVasGvUnX3nXiTJp3O27vfL5jRMrPGQ44/Ebb0x04ew+B0POZ
np+4aP+dK1DwvH4dR6A5B6I0Zl4GhSotdDP3kyVc4kC/g9Abvd88HtO8zUbd
ArRBb8G6faRw7sXR3z720u/3HXrr8cNn9o28+cihtx8b+d2jR83M39k3+vb+
o79/5tgfDowujFQWx0rb1cm1am2jXluMiqu1yupEzXjdcqO6WCunJo+lD5Kp
NOLSw9Qs7Jhj6+mgC57PtGKqSivo1wuVgXihnK45nQaCtNjeTeo1p4P/70g1
mBXazNjBH8/xJO2AUtL2ZeGmMuRqET9R3T7RuHBy4sLc5JbRvCnz0pXlqNTJ
59q5/GI+ao3mzx489u4LR868ePSd54++9cyht54+bPL2/kPvvTjaOlJYHI0Z
namK5XFxKheVVsqRiR0sVyLIUjn29mEJlzSpKf1rLSnvKJdjQ4X8zXl+5yjC
wO2sXpme8+Saj7tg4XRJicQgh6//glMDpxLyf+WY43PFhmTM9tUu1xyn80lh
cH2qujZZ2ZioGvRmsIaXMbT12kRnvNg8ljdpjxZbI6X5o4Vzh3N/ODi6MF5J
JOqMlUw9TDrj+YVcYalUJPQr1bLdyvZ2N0AfltFaQX7XCjj/IOgdxEOCfkjn
1OeEhh+eGRII3PlWMK4v071n8kCX5Cb3ybX7l/FJR/KUrhL6zbnuisGG++pE
ea0eC/BKoK8vFCKKkbeVcs3423JU7eQLC4WiiR20c+OQ1vjYQiEf23sidpO1
ehV3A/Sx4Vey51w45Q8Jf2bTqTiqoDd0QKiOhTARVo3aDl+F3tl1Zh5HK1Z8
wx/vEtjksnFO62OmD8p3xYhDNmbLxu1XJ7vrlqxUIeXEYGsmy+XaSqW+Ymyt
Ulkqm/3GDmGhZLjnF4sFEzsA7hYjIHbSbN8kdh0J7oQeEd8hFaZmrf4MThs2
bLohFLEZVPlUr3gH55A1RjOUK3/LVAAXbgb5f35Kc4FmOiAQYU4vxshtTujj
hH2DHjW9y03wgXtM7Waqxu3XLFVM+lUN99VajFcKWYx4jH7VjLe7N0OOfXga
0w1imH8qeTsDrcA1CPdpNa+IsbgKXCb02nQO+kwlUYfsgqlzzu4O7lPtXm7V
Z/U6XyDzzu4Hu5AR4q6kopWOGm2m9UBV0eSMh57jNy6X78XGPhOZvccmnwyU
tRCfuPpIoTfINiYmLDeHB4AmYA/TtiRuqWSBoGSyVIgFiAP95IKScTwTlHO7
q2QIUg56JTmZSLkoqZ/qyHCLIdC3s7KwISqRGcrDmzuKyAN3Z6cVjjfqD2hK
WZjztVnaZaJ3iXxv63R160R5cy4y3Feni7GfnyhihdjU1cdWb3YNMQUAcEs1
U4/qSr1uslyrLXQ9f8WSuE4xTz9PYyf08UFUtACxGOWXygUt6ZB109wc9Jlu
waWBepmjTGGsVwUYBL3eJ9NXh9A79JnoZUKf+Snnx/S/0B+syzIg0bss6A33
jdnS+nRpbaoY+3lD3+5ZzoHgpVLtevVKtNIoJyOoS+h8MR1I6jNRp2wmbCej
OHOvFA3WTnG8nR+NoQfiiRrYQawbxbjbztCPEe+HXt17CLcmfbQC595Dbcls
Rhc+CBPPaKqoOPKzDspBPj9T2fgRJSGuE1m/jnfjBXbAhUO5Ivel13ZiXnc8
MsQtvpuYyRv05vAXq4XViQoEQ+VRgkMNlmIv7a2luD4TQRJPHnWTuHIEk9dA
34v7SdctFMBs33XiaJCluwudgEv01DFm0rbQvhTWthR8WmldUa9pSe/AUiNy
PfW8JkQ/k/lTvYcoUub/iPZBZY/rs2GCBpZlHoL49skK/LyF+M2ZMqGPcU+h
N7s2A0+lh7WiD+jR8QpJ43i3bmOO3Xl7Y33IBeIu+2S0xiDoFSkHdyYT0ObS
hGiQw8yMF+HXOb8dehhF3xV1HY4hwdC3+L1axXWxTK1AoeeM7EuAvoY8LpYE
cUPfxNgdJBk4VxT0FfookQpNXg0fiEMQ94k78j7QgFgBiuOxpNDD84e9eKrn
mdCH2IV6ojfJzA6gLW2pADfTnpdBeVwmc1jon4wzyNuH0DvcNaI1+wcZUhAd
dJrGJYX4E1VQekIP9JHLc3JEinJEb5+YfDmdMFVCIDCVWJ2oMSjEB2L1MHaa
fFIQTlL+wlgsCfpc6BIRX2Mcc5whVh8G9Gb/OG1t8xARYq3NC7NiET4MGZnm
3wn6AdXJhDpDc1bcVZlVdR0/kQyiW9gfjjhLN3Eql0CPAk5cuEvKdzR8A1cd
vvj5MtEn7iYaCJgJxs4/dfg9qy+MdU2+ON5JJRmslXj+fhNbSBc1GoR1CH1b
emfIrjXaOjXQWzmIAX3o3kPow5KdM+cwB8k0dmfvTs9D75E0V7c3fwj0vXrd
TLR2vBTLdBzoHegmST0nBtdo3tpkdW2yDnxNAD0Y4MpkZdmuNMWI+9/LygCp
AKuVMpgei3vEPYY+tX2O2wlNTGO3A3pQmuyaiOho47f7eVcn7ZGh02B0yPTb
mTcJr8z8F5SchNCHI5ScqqsTAPSQD7X6GHd085mHN0rfm+TeXXda7doOCL3t
TQxrQ9xkdaqKA0BvshIrRg96lutj808JXmz4Cdwh9CjyDGK5zsDDZs80STr8
dv8gSaqB+gHFJbQvB72+dJmIo52qeIPC0/CI5kKGc/gQI/lDoL9wqm7o96p2
k6Wleh6untAnaqAuPSLNM/TXpxpEnGJnTNbsrURDGB007qP7Js7mErgt3wfo
dhAfF8eXygVUA7QvzzVy2HSZdZKmLGGhlzlDy6zD6AQNt1anC7ihz2/1J2JD
ApPe7UNdlrtYEcckAjPGZD8M+l6v3FSCftItK8G9+8Q3+HN6+9ixN3r+H1YP
uClr0zV1BVAYfHCtXl6pGuEvxLBG+bjOY4gngijfFqu3K92oSBed1TYH8Xyi
T/jCRnYfDIHr9FfsnXPopEOwnDqFELtbKcrKZvWXhFHM6ad2JxkcQxDnFkd5
PMk3TeVSrCM+XyCx/W7JLvX2VfI9QxNq5tA36PWAF8f7WmSAwpkD/ZjRpewO
OmAn42tQJJRBL4MUIGzeQdCHPiGEPrMIECbpnf6qbEs4IV16qJ/O83fSupDz
Sy3pem5Kl00YyzTfhOEPD/Fx6SbpzoOrR8FWn+qoj/lj7gb4aPg4Ju6Eewj0
saOo9cQpQE8qBeaSnAk1BP0hETP0+Zn+00FPXjcE+rbQNn3ZCvICp4qOUfAt
N8zA/X6n5O57qQAfCr3F9+6T2RN7J5+3A/eQR9A8g8DINjw8cO+pQYLv+vG6
iR1QoA/rUzV6CUCPmyRDffrMH8UcnY6BKwH9IPQzQ2Torl0c1487lQihdxRO
w/0gJu9omEKvduqgbAVUvz2Y3gyC3lppeIi3PK77tO6kb05dvUIPZSD0/bXc
cproJZIiDk1Q6E1Y/1fPjx6f+J6JAnR5Xa2U9gR1v46UlZ4/M8MKm90580ya
1Exn64SEvJNO7CLWIawh9GF+McgvOc/TkoLVcDYbRny1hUzojc9vn6zB28cp
POw9gV4f4cpHCBF9dszBCTv0u8eS3JHmEXpqCK9Pq38lLRLqGY3yIfSZdMtB
42q5LgrwvIPeuY52f59RZvuHaKqyhXceBO4gG29mjVi4LOhRqI9rODNVsHq6
ehfcg2f7Rg4jZnnw4YDe5Xeh1Wt2QJR5577z4uQ1Z0Ha4gbEZrawNpc7SQ+P
T4XT8bTlO9J1q9C7hIIXaNqYqZNtoQ3hfTKTwUF5fTtgIINiPTto6OrB6tXG
+XzAfvQj+OcQetbxusw/C3qN9dQWgs5xWTR8UDsgnqaoPdUi+pm4t2VEbjhY
11k9PqgMKoS4099rn8kl2v2VYVfsdWbuIgUVkuMth0SuMJQ4lzgouWPNFqxe
jX25WoAsVfKryUsqAPrsCI26a9Awok+BGqifV1cfM7cUcXTO4uaqA/oV9r8w
U1Crx4QaZWJok7DcnRkLnNt3RscqHy5YSOfR6N0GBV/13q7jiZbuVEjtOpNV
hhpFotjpz+yYZa9M9nQgLtumCR1SOT7B2RA3WTEDT45tHy9plT40UE0yjM6q
EiqAW6W/j6/kDJ/TLfF1vS9KTR64E3p76Qbtt/tHVmSG+0zgQnfK8xoIOsGQ
y0E3V+AW+idfD1dIN8rI3SqEviXjBxT6hGuV+6zecE8SOqN2fORrDG45B+hD
9FdqRYVb+R5MVWu8qgNK6XUQl96KjA64K7cnw9coH0pm3A8NMORRCnTYicaX
RDy0aAdcqFHtftqm0GcGAq0mhboRQt9JO5iIvlr96lRvpi1cPXA3wcMBYe/A
mqDzjDn/tUZae0lhdZrgjN3lcaoYBJTGHkLvrgH0ocDkddGbD4V+UPRs94/Z
cAW3lmR5SgAcsfzQWr2C5e6gzseRE6daoc/hzwa3h42kvOiSKrqLqQ7YAY7V
6jEKl/UcoKOAao6voBN6cjz6CjVzRny1eiqYknyFHgcLwfp1oQ26M47ptWTQ
XWbzdvrr84qj+8ZB0KuNu+OQLQyCXmNTmDt0kgWgNMka3n3DbSEaB+KAnprQ
VYBkDDbG4pKP0WDVyWvS5+K71oWANadZYTSOrqrRxwRS6KHSVGxGAS2uhkAP
AkWvcYvtOFgHOfxMP+Ps1CUIoZYO+mCmulJ4W80s+r199RKhR08ZaulQAFMG
E/h8dLSh7orKG41U2biW4BR6+nCFVd07NEGh57us4WuKBxrjor+b9RwaSya5
cn7ABdMPdbnUDb3eqc2ggXmZtwq11P1CrgvUkTKCOnzJr+Px2BszdZNL0YFw
iw0/rbQTeqx+Y9CYh9fQ72yfls4Aobmbeg8TM3yuqqGqpdCzq2j9eN0OYPKO
4ro0HBJOXA1bW9WjlY7PUdDbg+fpt/qnQjhqF6pE6It4DfPKzD4IXRIKZ6jz
oHlsK0K/OXuFi+XGnj+priv0kGQaThl7HOBdXEY/oPyfdYC4OJ+6CDsPq+eq
GlCDrk9IMdXiHk3eFIBVLG1qjt7sJM81CKfh05q0b/RcYaQja7K1BuTjzj9Q
VfTloCDeSetILnCr/oSIh8zE3TwdkFlMJmKgpNZD/8qgN+fPzjWCDnwzoado
hVaFfh7W3ZtYnS6mpA4fo/E7/WWrVKuriPgsaCzI+jkM/Z2kVOvaSmFSV9+U
oREU7eJXnXE+ZFDcd3yDpu066fRdWr1b81m/OoSe0T91+5h4Vbtiq+9xgGRc
jcNdBV3wfLneiHtmHdXXuE/HDtxp+BCNEVrVd86fIYDhfqF/GRO25CDo1cO3
0/H2Ds1BpM6dHET81IoV3BDBdv9QXn52Xh7lkJnAdtKanrUDSzqA/oqtHkNo
WvlR7U930GMSriJugvU3tA4Q5m7UAT58XKm+koFu8V8YPhAHt8EBKzy0rEzK
p2eawdxJPuWwHRA2B7obJa4fcZ9yEHdklG/mB/kjXcR3A0X0V3XSNXysWTB8
At7eoB8++2bINj9+rJkbMWkXxgx9F/fV29PqAT2OXXIXw93vPeIxt+W8Pnqe
bl+Zf/cOWdDT6hX6Vjp9JgygLtCDOxEgJnouRof6o0hpCHAuQisPzrqH378d
TDJy7AL/GimQhkJU864S+nOjR86PHTUFaKUDZYndEOiVA1ABut4+GI7FoZi2
x7JpYHoMB67XgKwPDp+EX4fxaPimJw9pMxwpLN31oQyC3oWJQfHaQR9SCOd8
nLigr33NKvR12nPH7huif6XQH1PoNeiz1KMET3WAoqUbNwrXxO5sAt/CyMIJ
15oAKvTajYsDLfC2+5leWyYvO+jD0Y+KVyiZcTyEXrNOnlTl4UvXxaz8U5dP
0Q+qk9cvYqxX6E0uC/GzI0cT0Edsb4YPtw/0NehrxqeeHKkf3+qug5fYMpiD
CS2dQvRVx5gIaKkwrickQHM4kB2oN9CuPQ24YbPzCeZkU7qK3SDrzqQQLcnX
dBghPYk6E/0WWrob8OkqUY7mtWQ4gY7HThukJ5cF/fzoyPmRYybNsVETHLdz
45gQ3V0DJ5lGsWYQmwIksmzOPJ0oTTXgkHs37poCrZgvjDLcc64lDlxVHz4N
xg5XD5Rp8vSB4diqzMIOFsyfl4eed7JGZWQ2fugHFtIlENsBOcykmu5kR3r5
VaPwLn+kXkz0Ge7hBi8LcYVexXC3PabEEn3IajUW4L5kiKdxHLQQiBN3zrPQ
gfcG+vn8CKEn+vAVJPy9QkFvNEIFhg9LB+JuHJdm5ZnhvpU+M0sfhK0OVj/V
lpGTDvqQn7el1KZYM4470f7cML6oj2r1J3pa9VLNvzLoYeaQc8eOmrTGx4A7
Vz/rol8urKKwnyAOA2+n06XJ6LosLvbn5vD7/LyBDtwJPRWgGyP6S7uumG+G
z/qeG8Sl0Dse5aK8rr3pIniYYTluTw3p9FfsB/Wy8fpB0IcehsGiKXNJFoKV
27XwZcdXBn0S4mN579iRs0ePOOi762BgjnwKN6wYWIOtKeigc0k0NwUYmx8f
xYGpQXcx5BR6HtDwndvH/wXcN2cnEO5Bb9ij5xx+S0oozWAea7P/IQjtrFp9
Js1zpV1FPIzOTgFcQS+8f8g2cTGJX0dqzplO4AqtfmzE0Elp3jG8bBdyXAQD
s+NjTSiajeecGKBEXGdUJQRvHNADfXs5XzC4c6oAmuNDAZjdowff/juM9jeT
5+A9mH9o9ZcCfVNmXrSCSdzathqgnUNwLr0T9Ng68hCG/kxn4twUnuPTSlNX
hiEllp0Bo7IvZQM0TmLok9WuIEDZDuDDeTLx5zkcJ0tjFUySy2KrJ+jAHdAn
6PcZvivv9I3s6nVOsW+6jLk/avthkUeh1/ZkZwoP9EGZjhk6LVLE1fF2+kt2
zniHLA3huB9/J9cA52/j/d33dtJejCuD3ukArZ5wE3HFWk9SQwC9nTGscZ8B
0Jvh51ys17qu68Fn9zT67t10P+3Nd/U0NVUSZrbkfP8j1ZpZ47qdnyexdwlF
s39sj3LCMNDrnTPPqyqqrqqHUbEzVwk9nDPcfjc0E7IERBwDbuDbC+LJAc9D
hXAxfX5881wsKfTm4QsM8ezR6xvUlxYt2UuFFI/TvhT6xWCpbWVTzf6n0jTT
J6PBryr0ir6GBgp72VjG4c0Vd3UImUxvkIpSIVWpSEt0nAZHLl211Y+fHzME
c4YahWZr+qBRG/pgF3SDePoWNKRr+Hlz5nkTGLuJnTHBge1T9AtYdHFQh44W
roE7ZNls34L+ZKVj7xrfmyjbQVty7Xbar0cdAGodWZQ1fIISzyi5Ijp6gYvd
GvqVvxFcDR+DfEuofvxsO60khGMXrx56k1Y+Tyjp/21v/N8pA99V6KkYsbbk
RoG4HQBr1QH37aYAiruO40LZivVbTPWNz5jVG/ebqhrotjcxNVhKo39mrUyn
1vKMW+uGQzcd9HoQ+nbtO3bQO/JGccgqBc10FJ10GLbr2zIruErozeRh9YjU
BB2i/N+dpyb0XESCNaC3g7PjIzhDk7eXIfRq7wq9G7LFid6riawk5m97HoD+
LQYPHBzieB3RcqsfUIscvmF2Nui8mrML5S4f0ef66QVM5fpH5cWcZ2vuap9f
D+gTGWFhnzpA9057J/R09fGZBFZiTaB5THHfnvh834HLmh6g57Ruw31jpkHo
se+afMoAOapHA25mkq4tj8ZnsVdduivbhl3qmuCHL53bbwd1+6aUm/RACzuE
vpvvJKq+cdXQcwPZ03yffl6jvEYEePir+dIk7udY0HN998zsZHxC19IN97VE
DeDwl9MGAfSu5V02rVxOrVKzKnqGsHanxQR1/op+qGOZZK+dTiFU3OkiOkln
vTGZBYvvqYab7BTi3ByymqYp4Vduj8Ttar4U0Dv0meJpdOst6ZCI4b4+O7GW
OgHowHIyokNRCHtJQh7lMmu9WNNwN5hfcR9UEcoU5wrCcE9dgrEb7sZqiPtH
AT3gBqaO1xFunqRcJfTxo4110VQp5iOFIdkD+psp3IAeoNsxIv5SEuvdEg0t
eYR9aNQh9C6nbgVJXEjDwhq+A9qxCw00Q+J7l8mLvcOz7RTiu7s5q1f0SWtZ
2esyvQR97LsE73gddrGY2gjyAqLAlFxHuSOya92PPfvz/U89ZmKoHIAgaj+C
+gEHdCaZp5qR5gF6TWwV9+sJ+iTNH+d4LR2yq26fDt9oHmwciCvVJ/SdrAV5
QkNjCUUre8205sOCT6Y31ngdZhBtGY/tCk2D2L472Uqf3NobmZwq+XUDPUu7
brS2RnydVL4hwX0tUQO0Bql+1/D7xzWFZNtB70r9maVdhTIzoDs6EbL60OQH
cQ/avk5JW/3IYv2ubFrUVYevEd9BD7cPn28Jjgmdf6/C0z+UMWRfcP6KOzke
Acp0123pfXMhQH1LJqwu4g+HXrOJ3gCVRL13G7Sd2Qh9iP4Q6G1vfC+WE1Nb
J6dtT8rHELAYTNMOiRagB1h8Qnrok4f08WVCP0hC4hcGff2RDPpuLupug7Yz
m0EfDt5Q6HV0LkZl93BPrN5wB/Sa6xH9hX7oB0XYS4HesTjmdIO4vSqbu4OD
noVEdSxav+0tSZ2kt7sN2g5vOmxPE3wOPif07McB2yf67oaEfknW49ISiiNX
JP+a5TloHPRuqEaY5TmUQ4YQ3l9xD2P9dQl9OF5Ln5HBf58rcuPYPMBWAr25
fXdDsj4O6QH3c+amnrYpnXSKfki/nXmGVR0XEdxBpu2HSqXj8dT2dwWgj27j
YC0dsstn4emcI6IP6DdSvuduyHR4URbkRIdaZnql1pfZf+oKrfrEeWewWtYL
WUGI/qBQgptoyAPZ2xWAPrpNh+6YmP9nuueW+HC9OQj9Q7qxWBUM50TQeOdl
9HuoGy76u2DhUHNWrFX9MClwPYzKFXlbHYiL51peS1yuwcZYz6kZujZLOEq/
F+5T4jfozhzAr+O42mmXmeKbSbwV+o7M8CJ/a8kyTZ1ksv98/2PUwsRtCPTh
uM3+uu6HPPzik7i5kbos8ujaO2mPXqTTzT50tml3UEewAGMzWWRD67cuqddU
C8cL6VIeLSng6MyOTHqf6SL0IITeuX2hfCU+1VTXzftEb26oNkT53lK6cKv+
+5cIfa/Ql46sQMNqMUezvEzoiZTacjvpC2ilNaJ5GeevyBJ33oH3VMVQfqj2
LtJ9pOnGTP26gV6n55Dq67w8KfJ0n+N8idCzxrsk07TZ564em45drZUcz/Ex
2ql68lZQlnG4E1YNAdpjqA6Bxs6fzUea2v97iUsmfvy38/mRcGqGq+qnPXqF
0PCHzDY1/s8uXXTu6ChupXlK51yA1o68sMwbZmrO24ewKpEYBH2Y4rlnGWNB
lSueX/9x29TwCb0edMq5eMHn9Hm+HzrH3PI+DubBCF5O2KTnzwQixHQQ9LwJ
PcYg0ph5nt8YFgrcNFuF/lI83idr05IO19lTz982ulXJ4wl9VP4hgQ/Q0/DZ
u8fV2Joyalf3joa58gsju3PyYdWXF2g1QL9Lx4HrHFI34wYOH9BjzTTgfsXL
KH3cNhZztJ6vCT4jYFLVqYLrQv8zzX9ttm6yOlNbOV5dnIwWJrqVMab5ztZC
t69UkDbrKn6ZknkT52HU5JvSo9ROp3v30zyspBTzHPt37J9an2uY7ApSH92m
6GeO3uEwBpgAdWDQDa2tlqcrS1MytHWi99AlTnodAuKgsJ4Z4sM7uKUd9bYQ
dCEp29Ree7dOJqCHVl9LXK7Blgl9bwgH1lTvzsrpMj1E/0E3NLfA6GBX6gym
cNa8S7sGKUCoCZknnSfJVI9WMpDsbP6YGxicNWYj+RcS6KHP1xKXa7C5WZla
5est1NydiFdBvjOc79Et4IDLbiubckVXhUyLAJdi5no+swPIneQIUhSaOuns
rVY6WIvr5nVnnqYmf/1Bz03TPazJY+i7ay6rPwtKgv5f+nyoQUtW4QuhDwfy
NWXUrqvzZ+pPs79WoHdrpcNyWumSgCw/oueut55MMk7PcN/RZv44bs7wLfuz
vbtmbfLyoDcvEXf5petvM83PhH6I3w6jgwN6CPSO5rXSob/0Pzz2SwklE07X
B3dbXDdbptt311j0v/QbghWAGHAlRvbmazXVgeh4e2ZAH37sqJ2qSku6gTSh
U1rbjfhTVQxJ3dFm/nRtCV+qukU4m/1zn3W4ZhjKiddwiIdoDlNFhg8We1nF
JcFDSWq3m+162BLD72Z5TO50LJ/2yoWuHophnNwFfS0OOMVwiZtTAFdk6LK7
pBZhOakxOshuN9v1sJHwuydusF+ei1llWvG8TI52nXGhE3BOvhWs6qxMj34+
tvTJGH2j8XvQfxSbPljTDeBsBR1tzopb6cQuFuI4wHs49G6wFlXIhfhOoxhX
IK/fDG53N1QGlOdruG/2F/BDFmc+35Jx7OkKBhF+UgXt1nd99Oyqi/uYGkWz
+pXj19tozI/JlkIfd41dCvSKYDMd4MH0Hx/XkmyY2bn4rmPw/Jo5U2XD/dOQ
xe/KBuiXJ8zh9z1Oa146YcMMnRrSkUelN6UjRj8VhgmN7x1ZOEWXFLj+hl5/
3DaUdmH4dLmtYGK+A86VdFQy1+UjM9RYzwFjHXl0qS4kstttc51vLOwb+gvB
8sghaW8FHfHw8IjymKM9yOEjNCji7DtQ6DnLbLfb5jrf0JlrEh80Sgu1jLlU
87LijWZzLvfXpZDoN6gesQKU8rH0L5yy2w3w6d3Q9dlVgC7ZM9AzptBmFnaa
QQGQw3T1yna60K4bgrUH/S5uBj0HcqB6lvC9fCerE99RdJevaf2HF7Dv1S33
QV6x2w2wt30GpTOg3677Z5m5IowygXkZV6leQhXDjbDdQ/xjtcHqIXEZLWt1
RKcD4chMuvdBF1ORdvvf3dt6m0If236wKJObSKuYOqAZ2fV8u39OzW7/u3tb
xtZl+8msDV2ITyftOkBVdGwVz3C/2//c3jZs6w56nK5xLT6O6GCpn6OntMef
6sF32ReT7veg/1hvgN4MX/2/CdJ/xAUjAzEVTHrWTPCyVcu7M7gGkpzfg/6T
sfVlfII+EwFNChRrVRtowm7/K3vb5W0rx8smy9MGX2FxsghZmiqp8LyKu8Zk
t/+Vve3ytvW5momh7zA1ZTChYvAkz+iVOLnb/8redoUbsKYATZO12SrR50m9
YLd/+N52tZtBvDpTCWVt1vA107bgXrSD1ZkIYudN7GC3f/jedrXbxomqyvpc
xQTgGuIQII63KLv9w/e2j3AL4d5D/FOywQ9snqyZ8Hi3f9Tedi22rVP1UK7l
D/j/CeA7nQ==
       "], "Byte", ColorSpace -> "RGB", Interleaving -> True] -> False, 
     Image[CompressedData["
1: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
xcOXw8qBlCcrofzs5jX/8Ov/AtcvMC4=
       "], "Byte", ColorSpace -> "RGB", Interleaving -> True] -> True, 
     Image[CompressedData["
1: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
oULCGc884ZhHPOONsPfHqPXrYOdFv/V81Ho22HjS2viqsfW4tf653tZDVuuR
oPNI1HrEQ9v6vLfzhWDjc+76w87ag8b6Q+bWF8zdx5zWE27/W3H7Kb/3bNr7
Ydp7Iev9NAlfGXt/GAavD2B6/BNZvjgCP4QrCQxTvJNAVUK6KKaCPKhL8Wll
GCZ52X3crVwQK0ubwukCOTnbi2SAWueEVuTueVUEo94UTEnE6uxldqUQksDP
Y2WC8yyBSlfLpwwLtWXMpS3v+RE51K6ZmSrQHSTFMMoVHkJFFHoVixgen73m
dueN/nEbSLCORP3X4vbLwc7Pg60f+Ts/CLaf8ja+Zm88bm4+ap9/yFi7z9z4
rL1xn4Pzyt29tfvszQe87YeC1XvM9fut7Ye8tfuN1c8am49YG49Zu1/zdp8M
uk/Hu08HrR9G/Z+lzm+H/qsj77Ws84rjHU/ihSJayeIN+C9F3ivjbqbi3lUK
oOpxuVOzLHgI5aTset0G2XjhL/6VXNaDDAGpArUut175hMAwwYPWCTAQqsUY
XIni20JNmPyQs9If1IGPrab9lgMw2ygrDvIBwAC3SD2Zfhp3cue8b5x27bnA
ORpbb2Tdl+P2S1H7xWT3WXRisv1v/ubj3vqjNob/6v3m+Xut83fbK58xl++0
Fm83lu5QF+fvdlc+Y6/f5W7c7W3e46JtPehuPORuP+rtPBa0vhbu/Ju/+3QE
inBeGri/Ku3fpsbvAvutOJwv0pVhsl7mO6O8M8CHATjDLtR7Wi+81lxemJeJ
1oswqEnoOkXr4kI2uokWGQFfex2HX4mbapE0K6JrNFzgxTrHp4RibPnAADih
0KSqCEG3gQ4m/J2CAS4PTNvBaPjO3vh/7u/vFQO1AZaXZk5e2KOiN3KXI2c+
co7H7ptp57fB9k+87R/6298Pd58CEuLNx4PNL/jrn/fWHnBX7rPO3+uorr/T
QVu63Vm82Vy+1UY7f4e3gotbrNU77I27/fV73a3PBusPOjuPhO0vJf2v5Z1v
xcb3M+e5wvvZwPpFGr82Dt7Ko7kiXRqooMRmmbXLtFem/SIxMjSAIeCthGlP
omo14IAwkDlJYAaRrSr9fMPXHpMKuqplCiw1OZ2aqgPsubjAr6hgGNe4g/dR
m8laEWOJltQgYYCzekp+WMZKekEkQCsO1MblCgmqbOkjE2Z8T8doXMD3+fP+
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
gs4fwo0X7M3vuwtPGEuPWUuPuGfvs9DO3Gku3O2cuqE/d10XMDhxTXfu2t6p
6yxowjPXqQbNACS8/a/oaBsMgH4HDNBOfNIkJMx9ylJIuAL+ZhvksHijAzBs
3u+3vhi1vhr1nsqs53L756X3ysD7YxEcKbzjqXsi8uZjfzH2FiJ7wXWWfGvF
9jYDKryBK6HIoZ7YDjxQ3ymzsT+YZQba5EvtLb43JGDgTBezzI9X0nbDQMWH
1SeHdgAJqaVnLu8G/SW7v+C3jjjtN3yoha0X/OUnjbNf6i48Yp6535i/yzz9
GePMHfb8beb8LdaJT/eOXws8WHPXGtTACWikCogciA2IHACGI/+izvNXu2RE
TsLXuMFdvtU/f1cAAdn+UtL7Zm4+U1ovlACD83Lh/CFzXo+tN4P+G27vLbN7
1OwdN7onTfOc429EcSsFLZT2QG8A9z43aLh8yCN1/Kiv5+Fuue2z5s5Jo3XE
Axg2f2kRGE59oT13f3v+HgNIOH5z+8RN3SPXtuZuNOdvdI5f2z9xTf/41b3j
V+PCOHFlD9IR/a54QJPDm//vjuYEpRyABDRihiOf6By9ojt/vX3uZn/xNnft
3mjz4WDnsQhgADMYz+XmT3PjF5Hxm9B8Jej/3tl9pb/9Snv3T732MbM/b7vL
gcdgcMvSLwbxx9+gfwhH6oR+x3J2LGvD3ZnvbRzrtI/6W69aaz/vr/3QXvxG
78gDG8fu2Tn5me7J23pzt3TO3u4ev7771qd25q4zj17dBQyOfKrz9ifbaEc+
0UKrFMIVXYAB12//cwsNkHj7n2Esekf+tQct8da/tPACIGHptmjpDn/jwWTz
8+HaF5ytJ8LtbwbtZ1XQu/Wi037J7v7G6bxs7v62u/uHrnHMdc/FwUoSb2TK
p2il2psYltHgMhg+2KO3bm+cbq/P9baP2jtv+qu/MNaec858vf3avUtH7to6
evv20Rt2Tt3WO3Wzefza9ttXtkEIJz9tHb2yK8Fw9Io22QWQALoeYHjrv+2S
NwFI4Jr0w6lrTKUxbnbO3Oacu9vb+Fy2/Dnv3AN9yNT1r3nb3/Y3v+t0nnN3
njc7v7D6Lzvma65zNFAVVouJKpLcKZNeDsEQ98PDfmwfz8NuB53zVmvR7p8L
N94w139jrrxgnvtO9+RXtucfaZ+4r3Xstt1jt7ZP3tI/fmPn2HW9Y9d0YCam
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
gRNiMwmMOHSixE+zMC/isi5c+Qdihv8fDMSwmw==
       "], "Byte", ColorSpace -> "RGB", Interleaving -> True] -> 
     False}}]]], "Output",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{{3.7715841697114377`*^9, 3.7715841917704997`*^9}, 
   3.7717707996546326`*^9, 3.7717739854580193`*^9, 
   3.7719435302569604`*^9},ExpressionUUID->"e588e2af-a2a5-4743-835f-\
88c83630c400"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1510, 756},
WindowMargins->{{-7, Automatic}, {-7, Automatic}},
DockedCells->{
  Cell[
   TextData[{
     StyleBox["  WOLFRAM ", 
      RGBColor[0.97, 0.83, 0.35], FontFamily -> "Source Sans Pro", FontWeight -> 
      Bold, FontSize -> 40], 
     StyleBox["SUMMER SCHOOL", 
      GrayLevel[1], FontFamily -> "Source Sans Pro", FontSize -> 40], 
     StyleBox[" 2019", 
      RGBColor[0.97, 0.83, 0.35], FontFamily -> "Source Sans Pro", FontSize -> 
      40]}], CellFrameMargins -> 10, Background -> 
   RGBColor[0.12, 0.14, 0.15]]},
FrontEndVersion->"12.0 for Microsoft Windows (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 292, 6, 96, "Title",ExpressionUUID->"49ab34ee-bfd5-49f5-beef-400d3cc456dd"],
Cell[875, 30, 404, 6, 34, "Text",ExpressionUUID->"94536f76-3fd2-4bf6-b228-fa93ec9acae9"],
Cell[1282, 38, 513, 8, 34, "Text",ExpressionUUID->"b70c649b-a958-4202-9f22-238ea1f9c7d4"],
Cell[CellGroupData[{
Cell[1820, 50, 157, 3, 67, "Section",ExpressionUUID->"924cb575-5c57-4d9b-90ef-880ee3d0f827"],
Cell[1980, 55, 819, 14, 78, "Text",ExpressionUUID->"51ad8c17-7a10-408d-8ff7-ecade2ef6a39"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2836, 74, 157, 3, 67, "Section",ExpressionUUID->"f15e6535-3a5d-4e2e-8daa-d7a5c325866f"],
Cell[2996, 79, 1181, 18, 122, "Text",ExpressionUUID->"c47900e3-0d93-418b-a8ca-76fed2024df7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4214, 102, 275, 4, 67, "Section",ExpressionUUID->"6232da72-67e6-4c4a-917b-1fd2676affb8"],
Cell[4492, 108, 418, 6, 39, "Text",ExpressionUUID->"3f81ea6b-d5d2-4f10-bc94-bcdc9bf0aa5e"],
Cell[4913, 116, 520, 9, 34, "Text",ExpressionUUID->"14b1ad91-f8e1-4fc8-9375-80aed2baf403"],
Cell[5436, 127, 666, 16, 34, "Text",ExpressionUUID->"5edc8f2d-b00c-42e1-b426-0defa90910f1"],
Cell[6105, 145, 1325, 27, 48, "Input",ExpressionUUID->"6faca5a9-b94f-4985-b261-e59532dbf58c"],
Cell[7433, 174, 603, 12, 56, "Text",ExpressionUUID->"05604ee1-50d3-4b81-9191-6b6fcf313f24"],
Cell[8039, 188, 480, 10, 48, "Input",ExpressionUUID->"9a838ade-0d84-4b7d-84be-249166c36d89"],
Cell[8522, 200, 619, 11, 78, "Text",ExpressionUUID->"d6e698ea-8634-4140-9548-ffd75e34c429"],
Cell[CellGroupData[{
Cell[9166, 215, 215, 3, 28, "Input",ExpressionUUID->"56acb087-9161-4599-be74-2c9ce5fc7dcf"],
Cell[9384, 220, 204, 3, 32, "Output",ExpressionUUID->"85bcd672-c326-4ec8-a65a-ae5693a936f7"]
}, Open  ]],
Cell[9603, 226, 409, 8, 28, "Input",ExpressionUUID->"d82b1fc5-00e0-4524-8b87-55c1a56a29c1"],
Cell[CellGroupData[{
Cell[10037, 238, 270, 4, 28, "Input",ExpressionUUID->"533182cc-5275-4040-b0dc-d8b4472f472d"],
Cell[10310, 244, 394, 5, 32, "Output",ExpressionUUID->"b5d0c4e2-41f3-4b86-8c79-a63ae34d1af4"]
}, Open  ]],
Cell[10719, 252, 489, 9, 28, "Input",ExpressionUUID->"4f1e146a-db97-4421-8d3f-639087eeae5f"],
Cell[11211, 263, 191, 3, 34, "Text",ExpressionUUID->"8cb3bdb3-b1fb-47a6-a17e-860dba5fdda0"],
Cell[11405, 268, 532, 11, 28, "Input",ExpressionUUID->"424ceb74-7fed-48f4-942e-6bd967ad688c"],
Cell[11940, 281, 517, 11, 28, "Input",ExpressionUUID->"682b4eae-b9bc-4a58-8025-ec80878aad3a"],
Cell[12460, 294, 676, 11, 78, "Text",ExpressionUUID->"c1136194-4eb1-487c-95c8-a967c6df96de"],
Cell[13139, 307, 511, 10, 28, "Input",ExpressionUUID->"de40e697-9a65-400b-9275-a1b5085df37e"],
Cell[CellGroupData[{
Cell[13675, 321, 276, 5, 28, "Input",ExpressionUUID->"c8974b31-21fc-4f2a-a63d-44b903ed02c7"],
Cell[13954, 328, 350, 5, 32, "Output",ExpressionUUID->"4d2e1fdb-56ee-4cda-9030-26348c650469"]
}, Open  ]],
Cell[CellGroupData[{
Cell[14341, 338, 180, 2, 28, "Input",ExpressionUUID->"5dc0f7af-34c3-4801-a1ea-48adc49dc188"],
Cell[14524, 342, 297, 4, 32, "Output",ExpressionUUID->"1ddcafa4-49d4-4a8c-99c8-a85837f19d62"]
}, Open  ]],
Cell[14836, 349, 320, 7, 28, "Input",ExpressionUUID->"788e4742-ede3-4fbf-b9e6-6d1cb5ecd057"],
Cell[15159, 358, 312, 7, 28, "Input",ExpressionUUID->"8c340929-7b3b-4dc8-963e-7a5d8ed5c25a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[15508, 370, 207, 3, 67, "Section",ExpressionUUID->"3c986e32-4ac8-4703-be61-f387ef381f5c"],
Cell[15718, 375, 421, 6, 39, "Text",ExpressionUUID->"b7eaa46a-30c5-4ec9-9026-f6e86ab129b4"],
Cell[16142, 383, 1023, 19, 188, "Text",ExpressionUUID->"b87785f4-5941-4e04-ab96-555fb73b9d09"],
Cell[CellGroupData[{
Cell[17190, 406, 255, 5, 28, "Input",ExpressionUUID->"0c82c71c-0a8d-462c-8d1b-8b87719cc37e"],
Cell[17448, 413, 398, 7, 32, "Output",ExpressionUUID->"21d60123-4bfa-44c5-b751-bef21ffbad6b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[17883, 425, 3041, 67, 314, "Input",ExpressionUUID->"ae03eb60-e8f1-43d7-b2e5-05ad61c6a384"],
Cell[20927, 494, 45215, 918, 88, "Output",ExpressionUUID->"367fe044-2d83-4ea0-87eb-01b214d17127"]
}, Open  ]],
Cell[66157, 1415, 909, 15, 100, "Text",ExpressionUUID->"960c56b0-54b1-4787-b3de-b85c3e0845ea"],
Cell[CellGroupData[{
Cell[67091, 1434, 599, 11, 28, "Input",ExpressionUUID->"2fdc1736-16ee-4e85-bcdf-85516efb2ffb"],
Cell[67693, 1447, 28741, 581, 463, "Output",ExpressionUUID->"4d19b54a-e810-4a01-882c-beafb4f7b396"]
}, Open  ]],
Cell[96449, 2031, 76189, 1254, 580, "Input",ExpressionUUID->"1ba648b6-e09b-4145-9959-6eede2f26591"],
Cell[172641, 3287, 391, 6, 34, "Text",ExpressionUUID->"2e811f54-5083-4588-9785-ad4b1269d071"]
}, Open  ]],
Cell[CellGroupData[{
Cell[173069, 3298, 338, 5, 67, "Section",ExpressionUUID->"d6e80e80-686e-4d38-8ef9-a700c5c69ef6"],
Cell[173410, 3305, 1061, 17, 100, "Text",ExpressionUUID->"027e860f-7f2f-4800-8889-beabe4f1b660"],
Cell[CellGroupData[{
Cell[174496, 3326, 682, 15, 48, "Input",ExpressionUUID->"cc7d1f53-1959-4706-b13e-835169623fc9"],
Cell[175181, 3343, 14852, 298, 72, "Output",ExpressionUUID->"36dd40ba-93f8-4787-97ff-9093f4865d12"]
}, Open  ]],
Cell[CellGroupData[{
Cell[190070, 3646, 24148, 400, 54, "Input",ExpressionUUID->"85f9ae13-3290-43f8-83d4-e963e25098ed"],
Cell[214221, 4048, 40692, 671, 152, "Output",ExpressionUUID->"c003c106-3515-4d97-b959-ea01a41d967d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[254950, 4724, 407, 7, 28, "Input",ExpressionUUID->"fdaed4e1-dfcc-4d5b-8f29-6a1fbbb57f29"],
Cell[255360, 4733, 224, 4, 32, "Output",ExpressionUUID->"2e1f43c2-c715-4fdd-9784-60723c008415"]
}, Open  ]],
Cell[CellGroupData[{
Cell[255621, 4742, 1632, 34, 295, "Input",ExpressionUUID->"a0f3d9fc-7ebf-4d92-b510-4379691cba43"],
Cell[257256, 4778, 46229, 937, 88, "Output",ExpressionUUID->"6b877cb2-99ab-44c5-901b-197c9d4f94fe"]
}, Open  ]],
Cell[303500, 5718, 744, 13, 78, "Text",ExpressionUUID->"6b71f2cb-c4d2-4cb0-98f5-e03b44d4224f"],
Cell[CellGroupData[{
Cell[304269, 5735, 534, 10, 28, "Input",ExpressionUUID->"a3045bd6-070e-4227-800b-d5386ddc1b19"],
Cell[304806, 5747, 27478, 558, 463, "Output",ExpressionUUID->"54c264c0-4395-4182-b203-8db43acf429a"]
}, Open  ]],
Cell[332299, 6308, 413, 7, 67, "Section",ExpressionUUID->"25d3c5a1-0a37-4833-9f3f-a737ce07e40e",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[332715, 6317, 215, 5, 34, "Text",ExpressionUUID->"d7afbf41-5040-4c73-94a9-fc05d5a20f2e"],
Cell[CellGroupData[{
Cell[332955, 6326, 359, 6, 28, "Input",ExpressionUUID->"0f4f3ff1-70db-4149-a53a-e96ecc0e4f7d",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[333317, 6334, 45983, 931, 88, "Output",ExpressionUUID->"17335084-fbca-4c61-a41c-3fbf3e35050a",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[379303, 7267, 339, 6, 28, "Input",ExpressionUUID->"23063470-1c0a-4c27-a35c-60b1ddfb6d74",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[379645, 7275, 295, 4, 32, "Output",ExpressionUUID->"f012b678-ad8a-4fd2-adaa-06fd3e0fb0d3",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[379943, 7281, 333, 6, 28, "Input",ExpressionUUID->"21a32f02-04c0-4747-b795-b741a1fa962d",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[380279, 7289, 43134, 871, 88, "Output",ExpressionUUID->"e1124c12-3ae4-457e-8b24-9df4cd9d0e32",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[423416, 8162, 343, 6, 28, "Input",ExpressionUUID->"87192415-c5ef-4d04-b969-361da7e1908b",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[423762, 8170, 252, 3, 32, "Output",ExpressionUUID->"0b372e11-111b-488b-9df5-a5056d50aeb1",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}]
}, Open  ]],
Cell[CellGroupData[{
Cell[424051, 8178, 548, 12, 28, "Input",ExpressionUUID->"8c5611a9-8571-4994-a8fc-d42a666fb61c",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[424602, 8192, 45914, 931, 84, "Input",ExpressionUUID->"f4ac6b77-0749-4278-93c8-3dacf870aa13",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[470565, 9129, 171, 3, 67, "Section",ExpressionUUID->"567ea8cd-bcfc-498d-9424-906599773998"],
Cell[470739, 9134, 1247, 19, 100, "Text",ExpressionUUID->"7ab6a12f-5771-42dd-abf9-d49e82217586"],
Cell[471989, 9155, 502, 9, 28, "Input",ExpressionUUID->"b2b8db7a-8894-46f3-828e-7d63c29bb43e"],
Cell[472494, 9166, 978, 17, 28, "Input",ExpressionUUID->"74f7f6ee-a0a8-4485-95e3-76a3abe1fe8c"],
Cell[CellGroupData[{
Cell[473497, 9187, 684, 15, 28, "Input",ExpressionUUID->"2bf3b826-3d03-46be-b729-0cee05d804e0"],
Cell[474184, 9204, 416763, 7022, 480, "Output",ExpressionUUID->"e588e2af-a2a5-4743-835f-88c83630c400"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

